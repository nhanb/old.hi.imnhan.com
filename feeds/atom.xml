<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>Hi, I'm Nhân</title><link href="https://old.hi.imnhan.com/" rel="alternate"></link><link href="feeds/atom.xml" rel="self"></link><id>https://old.hi.imnhan.com/</id><updated>2023-04-22T15:55:00+07:00</updated><subtitle>and this is my humble corner on the intertubes.</subtitle><entry><title>Acer Chromebook Spin 713 “Voxel”: an adequate Crostini device, a buggy Linux laptop</title><link href="https://old.hi.imnhan.com/posts/acer-chromebook-spin/" rel="alternate"></link><published>2023-04-22T15:55:00+07:00</published><updated>2023-04-22T15:55:00+07:00</updated><author><name>Bùi Thành Nhân</name></author><id>tag:old.hi.imnhan.com,2023-04-22:/posts/acer-chromebook-spin/</id><summary type="html">&lt;p&gt;&lt;strong&gt;June 2023 update&lt;/strong&gt;: I &lt;a href="https://github.com/WeirdTreeThing/chromebook-linux-audio/issues/2#issuecomment-1578962117"&gt;learned&lt;/a&gt; that using pulseaudio instead of
pipewire works around the audio issue. The following is the original&amp;nbsp;article.&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;&lt;strong&gt;&lt;span class="caps"&gt;TL&lt;/span&gt;;&lt;span class="caps"&gt;DR&lt;/span&gt;:&lt;/strong&gt; bright crisp screen, acceptable keyboard, thin &lt;span class="amp"&gt;&amp;amp;&lt;/span&gt; light build, random
touchpad lag on both ChromeOS and Linux, almost usable on MrChromebox &lt;span class="caps"&gt;UEFI&lt;/span&gt; +
Arch Linux except for the …&lt;/p&gt;</summary><content type="html">&lt;p&gt;&lt;strong&gt;June 2023 update&lt;/strong&gt;: I &lt;a href="https://github.com/WeirdTreeThing/chromebook-linux-audio/issues/2#issuecomment-1578962117"&gt;learned&lt;/a&gt; that using pulseaudio instead of
pipewire works around the audio issue. The following is the original&amp;nbsp;article.&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;&lt;strong&gt;&lt;span class="caps"&gt;TL&lt;/span&gt;;&lt;span class="caps"&gt;DR&lt;/span&gt;:&lt;/strong&gt; bright crisp screen, acceptable keyboard, thin &lt;span class="amp"&gt;&amp;amp;&lt;/span&gt; light build, random
touchpad lag on both ChromeOS and Linux, almost usable on MrChromebox &lt;span class="caps"&gt;UEFI&lt;/span&gt; +
Arch Linux except for the fact that internal speakers crash most of the time
(wired headphones work fine though). It&amp;rsquo;s absolutely not worth the sticker
price at &lt;a href="https://www.acer.com/us-en/chromebooks/acer-chromebook-enterprise-spin-713-cp713-3w/pdp/NX.AHAAA.006"&gt;$1,099.99&lt;/a&gt; (lol). Maybe consider buying if you can find it at a
heavy discount and the speakers issue has been fixed&amp;nbsp;somehow.&lt;/p&gt;
&lt;h2 id="context"&gt;Context&lt;a class="headerlink" href="#context" title="Permanent link"&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Around 2022 I was looking for a replacement for my T530&amp;mdash;something lighter
with a better screen&amp;mdash;and saw a listing for a used Acer Chromebook Spin 713-3W
at only 10mil &lt;span class="caps"&gt;VND&lt;/span&gt; ($425, give or take). A recently released HiDPI laptop with
an i5-1135G7 at 425 freedom dollars? And I get to play with ChromeOS/Crostini
on a not-pathetically-weak x86 device? Sign me right up, I thought. The plan
was to run ChromeOS/Android apps for &lt;span class="caps"&gt;GUI&lt;/span&gt; stuff, and install my usual tmux+vim
based development &lt;a href="https://git.sr.ht/~nhanb/neodots"&gt;environment&lt;/a&gt; on&amp;nbsp;Crostini.&lt;/p&gt;
&lt;h2 id="the-hardware"&gt;The hardware&lt;a class="headerlink" href="#the-hardware" title="Permanent link"&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Specs: i5-1135G7 (Tiger Lake), Xe graphics, &lt;span class="caps"&gt;8GB&lt;/span&gt; &lt;span class="caps"&gt;RAM&lt;/span&gt;, &lt;span class="caps"&gt;256GB&lt;/span&gt; &lt;span class="caps"&gt;SSD&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;Keyboard:&amp;nbsp;acceptable&lt;/li&gt;
&lt;li&gt;Screen: 2256x1504 (3:2) at 13.5&amp;rdquo; (200dpi). Subjectively speaking, it&amp;rsquo;s
  bright, colorful and delivers crisp text&amp;mdash;I have nothing but praise&amp;nbsp;here.&lt;/li&gt;
&lt;li&gt;Speakers: worse and quieter than my Samsung Tab S8&amp;nbsp;tablet&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Here it is sandwiched between a Samsung Tab S8 and a Thinkpad&amp;nbsp;T530:&lt;/p&gt;
&lt;p&gt;&lt;img alt="size" src="/images/voxel_size.jpg"&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="thickness" src="/images/voxel_thickness.jpg"&gt;&lt;/p&gt;
&lt;h2 id="chromeoscrostini"&gt;ChromeOS/Crostini&lt;a class="headerlink" href="#chromeoscrostini" title="Permanent link"&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;I&amp;rsquo;d just like to interject for a moment. What you&amp;rsquo;re referring to as Linux,
is in fact, &lt;span class="caps"&gt;CHROME&lt;/span&gt;/Linux, or as I&amp;rsquo;ve recently taken to calling it, &lt;span class="caps"&gt;CHROME&lt;/span&gt;
plus Linux. Linux is not an operating system unto itself, but rather another
free component of a fully functioning &lt;span class="caps"&gt;CHROME&lt;/span&gt; system made useful by the &lt;span class="caps"&gt;CHROME&lt;/span&gt;
v8, css utililties, and other vital system components comprising a full &lt;span class="caps"&gt;OS&lt;/span&gt; as
defined by the &lt;span class="caps"&gt;W3C&lt;/span&gt;.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;&amp;ndash; &lt;a href="https://orib.dev/interject.html"&gt;some weird internet&amp;nbsp;person&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;As advertised, the laptop could run ChromeOS apps, Android apps, and Linux apps
via containers. By default I got a Debian container, but since I needed
up-to-date software for development, I set up an Arch container instead. &lt;a href="https://wiki.archlinux.org/title/Chrome_OS_devices/Crostini"&gt;The
process&lt;/a&gt; itself was straightforward&amp;nbsp;enough.&lt;/p&gt;
&lt;p&gt;Zoom for Android worked as expected, and to my surprise, Tailscale for Android
managed to wrangle traffic correctly for programs running inside Crostini too!
The only hiccup was that Magic &lt;span class="caps"&gt;DNS&lt;/span&gt; didn&amp;rsquo;t work, so I needed to put the
hostname-&lt;span class="caps"&gt;IP&lt;/span&gt; pairs into /etc/hosts manually. I also had to change the temp dir
from /tmp to ~/tmp for &lt;a href="https://go.dev/"&gt;Go&lt;/a&gt; tools to work, because Crostini programs weren&amp;rsquo;t
allowed to exec files inside /tmp. Once I&amp;rsquo;d worked out those kinks, I could
open up a terminal and start working as if I were on one of my Arch PCs. Hell,
even docker/docker-compose Just Worked™ inside the&amp;nbsp;container.&lt;/p&gt;
&lt;p&gt;But then came the&amp;nbsp;papercuts.&lt;/p&gt;
&lt;p&gt;The touchpad would randomly lag, as in, dragging still
worked but there was a noticeable delay between my dragging and seeing the
cursor actually moving. The problem would just go away as randomly as it&amp;nbsp;happened.&lt;/p&gt;
&lt;p&gt;Back when I used an actual Linux machine, I was used to having 10 virtual
desktops, numbered from 1 to 10, with Alt-n mapped to &amp;ldquo;jump to desktop #n&amp;rdquo;, and
Windows-n mapped to &amp;ldquo;move window to desktop #n&amp;rdquo; (the &lt;code&gt;0&lt;/code&gt; key maps to
desktop #10, naturally). While ChromeOS has a &amp;ldquo;workspaces&amp;rdquo; feature, there&amp;rsquo;s no
way to navigate and juggle windows between them precisely and instantly.
&lt;em&gt;Instantly&lt;/em&gt; is an important keyword here: many tasks, while doable, suffered
from gratuitous animations and tedious step-by-step navigation. This reminded
me of when I tried to use a Macbook professionally: things kinda worked, but
the experience would always be intrinsically&amp;nbsp;worse.&lt;/p&gt;
&lt;p&gt;While Linux &lt;span class="caps"&gt;GUI&lt;/span&gt; programs were automagically put on the ChromeOS applications
list as first class citizens, certain quality-of-life features didn&amp;rsquo;t work. For
example, on &lt;span class="caps"&gt;KDE&lt;/span&gt; I used to be able to drag a video streaming link from the
browser onto &lt;span class="caps"&gt;MPV&lt;/span&gt;&amp;rsquo;s taskbar icon &lt;a href="/images/put.io_01_mpv.mp4"&gt;to play it&lt;/a&gt;. This no longer worked on&amp;nbsp;ChromeOS.&lt;/p&gt;
&lt;p&gt;So I jumped&amp;nbsp;ship.&lt;/p&gt;
&lt;h2 id="real-arch-linux-on-mrchromebox-uefi"&gt;Real Arch Linux on MrChromebox &lt;span class="caps"&gt;UEFI&lt;/span&gt;&lt;a class="headerlink" href="#real-arch-linux-on-mrchromebox-uefi" title="Permanent link"&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Installing &lt;em&gt;real&lt;/em&gt; Linux on this device requires installing the MrChromebox
custom &lt;span class="caps"&gt;UEFI&lt;/span&gt; firmware, which in turn requires disabling the firmware write
protection. Fortunately, for this device all I needed to do was opening up the
laptop and &lt;a href="https://wiki.mrchromebox.tech/Firmware_Write_Protect#Hardware_Write_Protection"&gt;disconnecting the battery&lt;/a&gt;:&lt;/p&gt;
&lt;p&gt;&lt;img alt="internals" src="/images/voxel_internals.jpg"&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="battery-connector" src="/images/voxel_battery.jpg"&gt;&lt;/p&gt;
&lt;p&gt;If you need more detailed instructions, here&amp;rsquo;s the &lt;a href="/images/voxel_chromebook_cp7133w.pdf"&gt;official manual&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Then go &lt;a href="https://mrchromebox.tech/#fwscript"&gt;here&lt;/a&gt; for instructions on how to download and run the MrChromebox
utility script. In my case, I also needed to enable developer mode to get
access to the chrosh&amp;nbsp;shell.&lt;/p&gt;
&lt;p&gt;After this I got a normal &lt;span class="caps"&gt;UEFI&lt;/span&gt; boot menu so I could pop in an Arch installer
&lt;span class="caps"&gt;USB&lt;/span&gt; drive and carried out the installation as&amp;nbsp;usual.&lt;/p&gt;
&lt;p&gt;I managed to install &lt;span class="caps"&gt;KDE&lt;/span&gt; plasma and everything worked except for audio: the
usual &amp;ldquo;default&amp;rdquo; audio profile wouldn&amp;rsquo;t show up, even after I installed the
necessary packages: &lt;code&gt;sof-firmware&lt;/code&gt; (sound firmware for recent Intel
generations) and &lt;code&gt;alsa-ucm-conf&lt;/code&gt; (so-called topologies for these newer
devices). After some desperate googling I found
&lt;a href="https://github.com/eupnea-linux/audio-scripts"&gt;https://github.com/eupnea-linux/audio-scripts&lt;/a&gt; which installed some missing
configs lifted straight from ChromeOS upstream. Sure enough, the device showed&amp;nbsp;up:&lt;/p&gt;
&lt;p&gt;&lt;img alt="default-profile-get" src="/images/voxel_audio_device.png" title=""&gt;&lt;/p&gt;
&lt;p&gt;And it would actually play sound&amp;hellip; for a while until it crashes. I later found
out that wired headphones and &lt;span class="caps"&gt;HDMI&lt;/span&gt; audio work just fine, so only using internal
speakers is&amp;nbsp;problematic.&lt;/p&gt;
&lt;p&gt;I collected logs and tried googling but nothing comes up that matches my case.
Asking in the eupnea discord server yielded an uncertain&amp;nbsp;response:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;looks like yet again intel broke&amp;nbsp;something&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Oh, and the random touchpad delay issue was still there, so I&amp;rsquo;m starting to
think the touchpad hardware itself is&amp;nbsp;problematic.&lt;/p&gt;
&lt;p&gt;And that&amp;rsquo;s where I&amp;rsquo;m at. I&amp;rsquo;ll probably gather more logs and submit an issue to
the &lt;span class="caps"&gt;SOF&lt;/span&gt; project. For now, consider this a warning: the laptop as of now is
probably not worth buying. Hell, in Vietnam you can get a second hand X1 Carbon
6th gen with an i7-8650U and &lt;span class="caps"&gt;16GB&lt;/span&gt; of &lt;span class="caps"&gt;RAM&lt;/span&gt; for $460 right now from
&lt;a href="https://chotot.com"&gt;https://chotot.com&lt;/a&gt;; that&amp;rsquo;s a guaranteed best-in-class keyboard, decent
screen and Linux compatibility, at just a slight decrease in&amp;nbsp;performance.&lt;/p&gt;
&lt;p&gt;But hey, I would have never known any of this if I hadn&amp;rsquo;t tried,&amp;nbsp;right?&lt;/p&gt;
&lt;h2 id="aside-chromebook-keyboard-quirks-on-kde"&gt;Aside: Chromebook keyboard quirks on &lt;span class="caps"&gt;KDE&lt;/span&gt;&lt;a class="headerlink" href="#aside-chromebook-keyboard-quirks-on-kde" title="Permanent link"&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;The most glaring issue is the absence of the &lt;code&gt;windows&lt;/code&gt; key (aka &lt;code&gt;super&lt;/code&gt;,
&lt;code&gt;hyper&lt;/code&gt;, or &lt;code&gt;meta&lt;/code&gt;). It&amp;rsquo;s not a huge problem for me: I always make &lt;code&gt;capslock&lt;/code&gt;
act as a &lt;code&gt;ctrl&lt;/code&gt; key, so I can turn the original &lt;code&gt;ctrl&lt;/code&gt; into &lt;code&gt;windows&lt;/code&gt; instead:&lt;/p&gt;
&lt;p&gt;&lt;img alt="changed-modifier-keys" src="/images/voxel_keys_mod.jpg"&gt;&lt;/p&gt;
&lt;p&gt;Another problem is that the F1-12 keys are not usable: they are &lt;a href="https://github.com/MrChromebox/firmware/issues/349"&gt;mapped to
function keys&lt;/a&gt; in MrChromebox &lt;span class="caps"&gt;UEFI&lt;/span&gt; firmware, and there&amp;rsquo;s no modifier to use
them as F-keys either. That means no F11 to toggle fullscreen, no Alt-F4, no F9
to toggle drop-down terminal, etc. Fortunately such global shortcuts can be
configured trivially from &lt;span class="caps"&gt;KDE&lt;/span&gt;&amp;rsquo;s system preferences. On the other hand,
application-specific features that are hardwired to use F-keys are simply
unreachable: &lt;code&gt;htop&lt;/code&gt; is one such&amp;nbsp;example.&lt;/p&gt;
&lt;p&gt;&lt;img alt="htop-fkeys-unusable" src="/images/voxel_keys_f.png"&gt;&lt;/p&gt;</content><category term="consoom"></category></entry><entry><title>Go, Postgres, Caddy, systemd: a simple, highly portable, Docker-free web stack</title><link href="https://old.hi.imnhan.com/posts/go-postgres-caddy-systemd-stack/" rel="alternate"></link><published>2023-02-12T14:24:00+07:00</published><updated>2023-02-12T14:24:00+07:00</updated><author><name>Bùi Thành Nhân</name></author><id>tag:old.hi.imnhan.com,2023-02-12:/posts/go-postgres-caddy-systemd-stack/</id><summary type="html">&lt;p&gt;I&amp;rsquo;ve &lt;a href="/posts/i-made-my-python-webapp-pip-installable/"&gt;mentioned&lt;/a&gt; before that I&amp;rsquo;m not a fan of Docker as a deployment
strategy. In that same post I briefly mentioned that Go could simplify
deployment compared to Python. Today I&amp;rsquo;ll &lt;em&gt;go&lt;/em&gt; (haha get it?) into detail,
warts and all, how I recently set up a publicly …&lt;/p&gt;</summary><content type="html">&lt;p&gt;I&amp;rsquo;ve &lt;a href="/posts/i-made-my-python-webapp-pip-installable/"&gt;mentioned&lt;/a&gt; before that I&amp;rsquo;m not a fan of Docker as a deployment
strategy. In that same post I briefly mentioned that Go could simplify
deployment compared to Python. Today I&amp;rsquo;ll &lt;em&gt;go&lt;/em&gt; (haha get it?) into detail,
warts and all, how I recently set up a publicly accessible Go web service,
backed by a Postgres database, fronted by Caddy which does &lt;span class="caps"&gt;TLS&lt;/span&gt; termination &lt;span class="amp"&gt;&amp;amp;&lt;/span&gt;
automatic Let&amp;rsquo;s Encrypt cert renewal, supervised &lt;span class="amp"&gt;&amp;amp;&lt;/span&gt; isolated by&amp;nbsp;systemd.&lt;/p&gt;
&lt;h2 id="go"&gt;Go&lt;a class="headerlink" href="#go" title="Permanent link"&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;If you&amp;rsquo;re new to Go like me, you may find it helpful to skim the book &lt;a href="https://lets-go.alexedwards.net/"&gt;Let&amp;rsquo;s
Go&lt;/a&gt; by Alex Edwards. It demonstrates helpful patterns so you can quickly put
together a web service with little more than the Go standard library. However,
it&amp;rsquo;s cumbersome to define routes using only &lt;code&gt;net/http&lt;/code&gt;, so I recommend using
the very minimal &lt;a href="https://www.alexedwards.net/blog/introducing-flow"&gt;flow&lt;/a&gt; routing library written by the same author: it
offers a cleaner &lt;span class="caps"&gt;API&lt;/span&gt; while having very little code itself. Heck, you should
probably vendor it and later customize whichever way you&amp;nbsp;want.&lt;/p&gt;
&lt;p&gt;As for the PostgreSQL driver, I chose &lt;a href="https://github.com/lib/pq"&gt;github.com/lib/pq&lt;/a&gt; simply because
it&amp;rsquo;s a pure Go library that implements the standard &lt;code&gt;database/sql&lt;/code&gt; interface.
I preferred to learn the most common &lt;span class="caps"&gt;API&lt;/span&gt; before branching into more
special-purpose stuff. It quickly became tedious and error-prone to write all
that boilerplate for reading data into Go structs though. I heard good things
about &lt;a href="https://sqlc.dev/"&gt;sqlc&lt;/a&gt;, which generates Go code from &lt;span class="caps"&gt;SQL&lt;/span&gt; queries. I&amp;rsquo;ll most likely try
that&amp;nbsp;next.&lt;/p&gt;
&lt;p&gt;Sticking to pure Go code brings 2 big benefits: &lt;strong&gt;independence from glibc&lt;/strong&gt; and
&lt;strong&gt;effortless cross-compilation&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;Not depending on glibc means our compiled executable for, say, Linux, will run,
not only on any Linux distro regardless of its glibc version, but also on
distros that use alternative libc implementations e.g. musl. Coming from
Python, it&amp;rsquo;s incredibly liberating to no longer have to find an ancient distro
with the oldest possible glibc to build my executables on (most Python projects
that do anything useful use C extensions, sadly). It&amp;rsquo;s not without caveat
though: some of Go&amp;rsquo;s own standard libraries, namely &lt;code&gt;net&lt;/code&gt; and &lt;code&gt;os/user&lt;/code&gt;, use cgo
by default. We can set &lt;code&gt;CGO_ENABLED=0&lt;/code&gt; to avoid that, which tells the Go
compiler to use their alternative pure Go implementations, but those are not as
full-featured. If your code or dependency requires those, make sure to check if
they work correctly with the pure Go version. The easiet way to confirm that
your compiled executable is truly static is using either &lt;code&gt;ldd&lt;/code&gt; or &lt;code&gt;file&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;$&lt;span class="w"&gt; &lt;/span&gt;ldd&lt;span class="w"&gt; &lt;/span&gt;mybinary
&lt;span class="c1"&gt;#        not a dynamic executable&lt;/span&gt;

$&lt;span class="w"&gt; &lt;/span&gt;file&lt;span class="w"&gt; &lt;/span&gt;mybinary&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;|&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;tr&lt;span class="w"&gt; &lt;/span&gt;,&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;\n&amp;#39;&lt;/span&gt;
&lt;span class="c1"&gt;# mybinary: ELF 64-bit LSB executable&lt;/span&gt;
&lt;span class="c1"&gt;#  x86-64&lt;/span&gt;
&lt;span class="c1"&gt;#  version 1 (SYSV)&lt;/span&gt;
&lt;span class="c1"&gt;#  statically linked&lt;/span&gt;
&lt;span class="c1"&gt;#  Go BuildID=[...]&lt;/span&gt;
&lt;span class="c1"&gt;#  with debug_info&lt;/span&gt;
&lt;span class="c1"&gt;#  not stripped&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Cross-compilation is self-explanatory: out of the box, you can compile to any
architecture/&lt;span class="caps"&gt;OS&lt;/span&gt; combination that Go supports. No more looking for the right &lt;span class="caps"&gt;CI&lt;/span&gt;
service or docker container to build your stuff&amp;nbsp;in.&lt;/p&gt;
&lt;p&gt;See&amp;nbsp;also:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://dave.cheney.net/2016/01/18/cgo-is-not-go"&gt;cgo is not Go&lt;/a&gt;: a more exhaustive argument for staying in pure&amp;nbsp;Go-land.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.arp242.net/static-go.html"&gt;Statically compile Go programs&lt;/a&gt;: a deep dive into static Go compilation
  and its quirks, complete with examples on how to statically link against
  SQLite with musl libc, if you&amp;nbsp;must.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="postgres"&gt;Postgres&lt;a class="headerlink" href="#postgres" title="Permanent link"&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;While SQLite is a fine choice for small-to-medium sites, it does have its own
quirks: so-called &lt;a href="https://www.sqlite.org/flextypegood.html"&gt;flexible type checking&lt;/a&gt; and &lt;a href="https://www.sqlite.org/lang_altertable.html#making_other_kinds_of_table_schema_changes"&gt;limited &lt;span class="caps"&gt;ALTER&lt;/span&gt; &lt;span class="caps"&gt;TABLE&lt;/span&gt;
capabilities&lt;/a&gt; are my two pet&amp;nbsp;peeves.&lt;/p&gt;
&lt;p&gt;Postgres has none of those quirks, but causes extra operational complexity, not
only for deployment, but also for development: you now need to erect a Postgres
server with the right db/user/password combination for each&amp;nbsp;project.&lt;/p&gt;
&lt;p&gt;From the local development perspective, this is actually one of the few cases
where Docker rightfully shines: whip up a tiny docker-compose.yml, hit that
&lt;code&gt;docker-compose up&lt;/code&gt; command, and you&amp;rsquo;ve got yourself a nicely isolated,
delightfully disposable postgres server with your desired user/password/db
combination, exposed at the exact port you&amp;nbsp;want:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="c1"&gt;# docker-compose.yml&lt;/span&gt;
&lt;span class="nt"&gt;version&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;#39;3.9&amp;#39;&lt;/span&gt;
&lt;span class="nt"&gt;services&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nt"&gt;db&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nt"&gt;image&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;postgres:15&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nt"&gt;ports&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;127.0.0.1:5432:5432&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nt"&gt;environment&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="nt"&gt;POSTGRES_USER&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;example&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="nt"&gt;POSTGRES_PASSWORD&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;example&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="nt"&gt;POSTGRES_DB&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;example&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Since a developer&amp;rsquo;s computer is typically not lacking in resources, we can get
away with docker&amp;rsquo;s storage overhead, and, in MacOS&amp;rsquo;s case, &lt;span class="caps"&gt;VM&lt;/span&gt;&amp;nbsp;overhead.&lt;/p&gt;
&lt;p&gt;But what if we want to stick to our anti-docker guns? Good news: it&amp;rsquo;s still
possible to have &lt;a href="https://jamey.thesharps.us/2019/05/29/per-project-postgres/"&gt;Per-project Postgres&lt;/a&gt; instances. Here&amp;rsquo;s the&amp;nbsp;gist:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="nb"&gt;cd&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;my-project
mkdir&lt;span class="w"&gt; &lt;/span&gt;.pgres&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="c1"&gt;# postgres data dir&lt;/span&gt;

&lt;span class="c1"&gt;# These envars tell postgres cli tools to:&lt;/span&gt;
&lt;span class="c1"&gt;# a) put data files in .pgres&lt;/span&gt;
&lt;span class="c1"&gt;# b) connect to server via a socket inside .pgres&lt;/span&gt;
&lt;span class="nb"&gt;export&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;PGDATA&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="nv"&gt;$PWD&lt;/span&gt;&lt;span class="s2"&gt;/.pgres&amp;quot;&lt;/span&gt;
&lt;span class="nb"&gt;export&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;PGHOST&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="nv"&gt;$PWD&lt;/span&gt;&lt;span class="s2"&gt;/.pgres&amp;quot;&lt;/span&gt;

initdb&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="c1"&gt;# populate .pgres/&lt;/span&gt;

&lt;span class="nb"&gt;echo&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;listen_addresses = &amp;#39;&amp;#39;&amp;quot;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&amp;gt;&amp;gt;&lt;span class="w"&gt; &lt;/span&gt;.pgres/postgresql.conf
&lt;span class="nb"&gt;echo&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;unix_socket_directories = &amp;#39;&lt;/span&gt;&lt;span class="nv"&gt;$PGHOST&lt;/span&gt;&lt;span class="s2"&gt;&amp;#39;&amp;quot;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&amp;gt;&amp;gt;&lt;span class="w"&gt; &lt;/span&gt;.pgres/postgresql.conf

&lt;span class="nb"&gt;echo&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;CREATE DATABASE &lt;/span&gt;&lt;span class="nv"&gt;$USER&lt;/span&gt;&lt;span class="s2"&gt;;&amp;quot;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;|&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;postgres&lt;span class="w"&gt; &lt;/span&gt;--single&lt;span class="w"&gt; &lt;/span&gt;-E&lt;span class="w"&gt; &lt;/span&gt;postgres
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;em&gt;(I also made a &lt;a href="https://github.com/nhanb/neodots/blob/f79713b4e79c5da4fa92f75b1537b73b4c114d03/fish/scripts/standalone-postgres"&gt;python script&lt;/a&gt; to automate this&amp;nbsp;process)&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Now whenever you develop on this project, just cd into the project dir, make
sure $&lt;span class="caps"&gt;PGDATA&lt;/span&gt; and $&lt;span class="caps"&gt;PGHOST&lt;/span&gt; point to the correct dir, then run &lt;code&gt;postgres&lt;/code&gt;. You can
save those environment variables into a &lt;code&gt;setenv.sh&lt;/code&gt; script to source every
time, or use tools like &lt;a href="https://direnv.net/"&gt;direnv&lt;/a&gt; to automatically set them on cd. When you
no longer need it, cleaning up is as simple as removing the .pgres&amp;nbsp;dir.&lt;/p&gt;
&lt;p&gt;On the server side, if you&amp;rsquo;re on, say, Debian, the Postgres developers maintain
an &lt;a href="https://www.postgresql.org/download/linux/debian/"&gt;Apt repo&lt;/a&gt; that provides any currently supported version of Postgres, so
you can always use the latest and greatest &lt;span class="caps"&gt;DB&lt;/span&gt; while still enjoying the
stability of Debian. Just follow the instructions to add the repo, install your
preferred postgres version, then enable &lt;span class="amp"&gt;&amp;amp;&lt;/span&gt; start the postgresql service using
&lt;code&gt;systemctl&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;You&amp;rsquo;ll then need to follow the distro&amp;rsquo;s &lt;a href="https://wiki.debian.org/PostgreSql"&gt;convention&lt;/a&gt; to create a &lt;span class="caps"&gt;DB&lt;/span&gt; with
its dedicated username/password combination. Here&amp;rsquo;s how I set up&amp;nbsp;mine:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;$&lt;span class="w"&gt; &lt;/span&gt;su&lt;span class="w"&gt; &lt;/span&gt;-&lt;span class="w"&gt; &lt;/span&gt;postgres
&lt;span class="o"&gt;(&lt;/span&gt;as&lt;span class="w"&gt; &lt;/span&gt;postgres&lt;span class="o"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;$&lt;span class="w"&gt; &lt;/span&gt;createuser&lt;span class="w"&gt; &lt;/span&gt;--pwprompt&lt;span class="w"&gt; &lt;/span&gt;mypguser
&lt;span class="o"&gt;(&lt;/span&gt;as&lt;span class="w"&gt; &lt;/span&gt;postgres&lt;span class="o"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;$&lt;span class="w"&gt; &lt;/span&gt;createdb&lt;span class="w"&gt; &lt;/span&gt;-O&lt;span class="w"&gt; &lt;/span&gt;mypguser&lt;span class="w"&gt; &lt;/span&gt;mypgdatabase
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;I didn&amp;rsquo;t bother to create a dedicated &lt;span class="caps"&gt;OS&lt;/span&gt; user, because I&amp;rsquo;ll later use systemd&amp;rsquo;s
DynamicUser feature to run my service on its own dynamically created user
anyway. This brings us&amp;nbsp;to&amp;hellip;&lt;/p&gt;
&lt;h2 id="systemd"&gt;systemd&lt;a class="headerlink" href="#systemd" title="Permanent link"&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Inevitably you&amp;rsquo;ll need something to manage your service process: autostart on
boot, report/restart when it goes down, piping logs to the right place, that
sort of thing. People used to install things like &lt;a href="http://supervisord.org/"&gt;supervisord&lt;/a&gt; for that.
(Docker Compose would kinda work too, but we&amp;rsquo;re trying to see if we can avoid
gratuitous container usage here,&amp;nbsp;remember?)&lt;/p&gt;
&lt;p&gt;Nowadays though, systemd is already pervasive in mainstream Linux distros, and
comes tightly integrated with supporting services e.g. journald, so it makes
little sense to use anything else for service&amp;nbsp;management.&lt;/p&gt;
&lt;p&gt;To limit the blast radius if (when?) a service gets pwn&amp;rsquo;ed, it&amp;rsquo;s recommended to
run each service as its own &lt;span class="caps"&gt;OS&lt;/span&gt; user that only has access to what it actually
needs. In the past I used to create 1 system user to run each service as, but
this time I realized I could use systemd&amp;rsquo;s &lt;a href="https://0pointer.net/blog/dynamic-users-with-systemd.html"&gt;DynamicUser&lt;/a&gt;&amp;nbsp;instead:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="c1"&gt;# /etc/systemd/system/myservice.service&lt;/span&gt;
&lt;span class="k"&gt;[Service]&lt;/span&gt;
&lt;span class="na"&gt;ExecStart&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;/usr/local/bin/myservice&lt;/span&gt;
&lt;span class="na"&gt;Environment&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;MYSERVICE_DB=postgres://db-user:db-password@localhost/db-name&lt;/span&gt;
&lt;span class="na"&gt;Environment&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;MYSERVICE_ADDR=localhost:8000&lt;/span&gt;
&lt;span class="na"&gt;DynamicUser&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;1&lt;/span&gt;
&lt;span class="na"&gt;Restart&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;always&lt;/span&gt;

&lt;span class="k"&gt;[Install]&lt;/span&gt;
&lt;span class="na"&gt;WantedBy&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;multi-user.target&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;It&amp;rsquo;s just a little less work compared to creating a system user with the
correct restrictions and running the service under that user, but hey, less
work is less work! Also that&amp;rsquo;s one fewer thing that I have to worry about
messing&amp;nbsp;up.&lt;/p&gt;
&lt;p&gt;You may have noticed the &lt;code&gt;ExecStart=/usr/local/bin/myservice&lt;/code&gt; line, which
assumes my service&amp;rsquo;s executable is in /usr/local/bin/. Since my service is only
1 binary with no support files, this, and postgres credentials (provided via
the &lt;code&gt;MYSERVICE_DB&lt;/code&gt; envar), are all that&amp;rsquo;s needed to run the service. It also
means for subsequent deployments, this will be my entire deployment&amp;nbsp;procedure:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="c1"&gt;# compile:&lt;/span&gt;
&lt;span class="nv"&gt;CGO_ENABLED&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;go&lt;span class="w"&gt; &lt;/span&gt;build&lt;span class="w"&gt; &lt;/span&gt;-o&lt;span class="w"&gt; &lt;/span&gt;dist/myservice
&lt;span class="c1"&gt;# copy binary to server (scp works too):&lt;/span&gt;
rsync&lt;span class="w"&gt; &lt;/span&gt;-av&lt;span class="w"&gt; &lt;/span&gt;dist/myservice&lt;span class="w"&gt; &lt;/span&gt;myserver:/usr/local/bin/myservice
&lt;span class="c1"&gt;# restart service:&lt;/span&gt;
ssh&lt;span class="w"&gt; &lt;/span&gt;myserver&lt;span class="w"&gt; &lt;/span&gt;systemctl&lt;span class="w"&gt; &lt;/span&gt;restart&lt;span class="w"&gt; &lt;/span&gt;myservice
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h2 id="caddy"&gt;Caddy&lt;a class="headerlink" href="#caddy" title="Permanent link"&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Nowadays I prefer &lt;a href="https://caddyserver.com/"&gt;Caddy&lt;/a&gt; as the &lt;span class="caps"&gt;TLS&lt;/span&gt;-terminating reverse proxy instead of
nginx, since it transparently performs Let&amp;rsquo;s Encrypt&amp;rsquo;s &lt;span class="caps"&gt;ACME&lt;/span&gt; challenge behind
the scene. With my web service listening at localhost:8000, it literally takes
2 lines of config&amp;nbsp;to:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Serve &lt;span class="caps"&gt;HTTPS&lt;/span&gt; at port 443, with a valid cert provided by Let&amp;rsquo;s Encrypt, using
  reasonable default cryptographic settings&amp;mdash;I just ran my site through the
  &lt;a href="https://www.ssllabs.com/ssltest/"&gt;ssllabs.com test&lt;/a&gt; and it handily scored an&amp;nbsp;A.&lt;/li&gt;
&lt;li&gt;Serve &lt;span class="caps"&gt;HTTP&lt;/span&gt; at port 80 that simply redirects to the &lt;span class="caps"&gt;HTTPS&lt;/span&gt;&amp;nbsp;port&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="c1"&gt;# /etc/caddy/Caddyfile&lt;/span&gt;
&lt;span class="k"&gt;my-domain.com&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="kn"&gt;reverse_proxy&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;localhost&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;8000&lt;/span&gt;
&lt;span class="err"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;There are many interesting problems to solve when running a web service, and
&lt;span class="caps"&gt;HTTPS&lt;/span&gt; cert bookkeeping is not one of them, so I&amp;rsquo;m more than happy to stop
fiddling with certbot cron&amp;nbsp;jobs.&lt;/p&gt;
&lt;h2 id="closing-remarks"&gt;Closing remarks&lt;a class="headerlink" href="#closing-remarks" title="Permanent link"&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;For a proper production-grade service, there&amp;rsquo;s more to be done:
personally I&amp;rsquo;m using &lt;code&gt;ufw&lt;/code&gt; to lock down everything except for the &lt;span class="caps"&gt;HTTP&lt;/span&gt;(S) ports
and wireguard (I&amp;rsquo;m doing ssh over wireguard only too). Enabling unattended
upgrades is also a good idea. But of course these depend heavily on each
person&amp;rsquo;s requirements and&amp;nbsp;tastes.&lt;/p&gt;
&lt;p&gt;Of course I&amp;rsquo;m not advocating for manual &amp;ldquo;pet&amp;rdquo; server maintenance everywhere.
Nothing from this setup prevents you from doing proper automated provisioning,
configuration management, so on and so forth. In fact, it is easier to e.g.
write an ansible playbook for this setup, because it&amp;rsquo;s simpler: you don&amp;rsquo;t have
to worry about setting up the correct python virtual environment, or making
nginx and certbot play well with each other. Hell, you can dockerize parts of
this setup, and your Dockerfiles will be simpler thanks to it. I&amp;rsquo;ve &lt;a href="/posts/i-made-my-python-webapp-pip-installable/"&gt;said it
before&lt;/a&gt;, and I&amp;rsquo;ll say it&amp;nbsp;again:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Throwing abstractions over complex procedures is simply shifting the costs
elsewhere. Shipping your software in a Dockerfile is fine, but making your
distribution so simple that people can easily write a couple of lines of
Dockerfile for it by themselves is more valuable. Simple distribution is
simple to deploy regardless of whether you&amp;rsquo;re using docker, packer, ansible,
pyinfra, podman, nomad, k8s, k3s, an impenetrable shell script some dude
wrote 2 years ago who just left the company last month&amp;hellip; or any combination
of the above. The point is &lt;strong&gt;you shouldn&amp;rsquo;t be forced to use more heavyweight
solutions just because the software is a pain in the butt to setup
manually&lt;/strong&gt;.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Sooner or later we&amp;rsquo;ll all have to peek under the hood to diagnose problems, and
the fewer moving pieces you have to learn and understand, the more grateful
you&amp;rsquo;ll be to your predecessors (and, let&amp;rsquo;s be honest, the fewer profanities
you&amp;rsquo;ll have to utter to&amp;nbsp;yourself).&lt;/p&gt;</content><category term="posts"></category></entry><entry><title>Working with SQLite in Python without an ORM or migration framework</title><link href="https://old.hi.imnhan.com/posts/working-with-sqlite-in-python-without-an-orm-or-migration-framework/" rel="alternate"></link><published>2022-01-30T14:11:00+07:00</published><updated>2022-01-30T14:11:00+07:00</updated><author><name>Bùi Thành Nhân</name></author><id>tag:old.hi.imnhan.com,2022-01-30:/posts/working-with-sqlite-in-python-without-an-orm-or-migration-framework/</id><summary type="html">&lt;p&gt;Some notes on handling migrations, linking the latest SQLite,
and sane driver&amp;nbsp;defaults.&lt;/p&gt;</summary><content type="html">&lt;p&gt;&lt;img alt="byte-magazine-databases" src="/images/byte_databases.jpg"&gt;
&lt;em&gt;&lt;a href="https://archive.org/details/byte-magazine"&gt;(seriously though, &lt;span class="caps"&gt;BYTE&lt;/span&gt; covers are the&amp;nbsp;best)&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;I learned about SQLite&amp;rsquo;s user_version pragma some time ago from a comment on
Hacker News (as one does). Not sure which comment it was specifically, but it
went something &lt;a href="https://news.ycombinator.com/item?id=23510382"&gt;like this&lt;/a&gt;:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;One thing you can look into using is the SQLite user_version pragma.
We use this right now to roll our own migrators and it&amp;rsquo;s light years
better than how migrators work for Entity Framework, et.&amp;nbsp;al.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://www.sqlite.org/pragma.html#pragma_user_version"&gt;https://www.sqlite.org/pragma.html#pragma_user_version&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;I&amp;rsquo;d wanted to try working without an &lt;span class="caps"&gt;ORM&lt;/span&gt; for a while, and this comment gave me
the final missing piece: a straightforward approach to &lt;span class="caps"&gt;SQL&lt;/span&gt; migrations that I
can trivially implement. Obviously, I had to try it out on my latest &lt;a href="https://sr.ht/~nhanb/pytaku/"&gt;pet
project&lt;/a&gt;. Here I&amp;rsquo;ll outline some of my&amp;nbsp;findings.&lt;/p&gt;
&lt;h2 id="apsw-as-the-driver"&gt;&lt;span class="caps"&gt;APSW&lt;/span&gt; as the driver&lt;a class="headerlink" href="#apsw-as-the-driver" title="Permanent link"&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Using &lt;a href="https://rogerbinns.github.io/apsw/"&gt;apsw&lt;/a&gt; instead of the standard library&amp;rsquo;s sqlite3 package has a couple
of&amp;nbsp;advantages:&lt;/p&gt;
&lt;h3 id="its-easy-to-link-against-the-latest-sqlite3-version"&gt;It&amp;rsquo;s easy to link against the latest sqlite3 version&lt;a class="headerlink" href="#its-easy-to-link-against-the-latest-sqlite3-version" title="Permanent link"&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;I originally ran pytaku on a cheap Vietnamese &lt;span class="caps"&gt;VPS&lt;/span&gt; provider, which only offered
Ubuntu 12.04. This came with a relatively old sqlite3 version that lacked
&lt;span class="caps"&gt;UPSERT&lt;/span&gt; support (probably among other things that I forgot). I guess it&amp;rsquo;s
possible to compile a custom python version that links to a newer sqlite, but
that would defeat the purpose of pytaku being an easy-to-deploy program. Apsw,
on the other hand, provides a pip &lt;a href="https://rogerbinns.github.io/apsw/download.html#i-really-want-to-use-pip"&gt;one-liner&lt;/a&gt; that compiles and links to the
latest sqlite. (still kinda bad, but it&amp;rsquo;s less bad than compiling custom&amp;nbsp;python)&lt;/p&gt;
&lt;h3 id="it-has-the-same-defaults-as-upstream-sqlite"&gt;It has the same defaults as upstream sqlite&lt;a class="headerlink" href="#it-has-the-same-defaults-as-upstream-sqlite" title="Permanent link"&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Python stdlib&amp;rsquo;s &lt;code&gt;sqlite3&lt;/code&gt; has a few default configurations that deviate from
sqlite&amp;rsquo;s. A couple of things that actually bit me&amp;nbsp;are:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;autocommit mode is off by&amp;nbsp;default&lt;/li&gt;
&lt;li&gt;&lt;code&gt;executescript()&lt;/code&gt; automatically issues a &lt;code&gt;COMMIT&lt;/code&gt; statement&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;To be fair, both of them are written in the docs, and these custom defaults are
probably to maintain consistency with &lt;a href="https://www.python.org/dev/peps/pep-0249/"&gt;&lt;span class="caps"&gt;PEP&lt;/span&gt; 249&lt;/a&gt;. Still, as I was learning
sqlite, it&amp;rsquo;s frustrating to jump between sqlite docs and python docs to
interpret the correct behavior at times. Apsw does none of those things: it&amp;rsquo;s
simply an unopinionated, honest-to-god python binding to&amp;nbsp;sqlite.&lt;/p&gt;
&lt;p&gt;To be completely honest though, in the long run it seems more reasonable to
learn the pysqlite3 &lt;span class="caps"&gt;API&lt;/span&gt; so that I can avoid an extra dependency. I&amp;rsquo;m also now
using Debian 11 which has a reasonably recent sqlite, so the compilation
advantange is no longer that&amp;nbsp;great.&lt;/p&gt;
&lt;h2 id="a-minimum-viable-db-migration-scheme"&gt;A minimum viable &lt;span class="caps"&gt;DB&lt;/span&gt; migration scheme&lt;a class="headerlink" href="#a-minimum-viable-db-migration-scheme" title="Permanent link"&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;With &lt;a href="https://github.com/nhanb/pytaku/blob/65a6c08128ebbc2b7d33a6b043798c69ac7dfebe/src/pytaku/database/migrator.py"&gt;&amp;lt;100 lines&lt;/a&gt; of python, I ended up with a migrator&amp;nbsp;that:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Finds migration files in the form of &lt;code&gt;./migrations/mXXXX.sql&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Uses &lt;code&gt;user_version&lt;/code&gt; pragma to figure out what migrations are&amp;nbsp;pending&lt;/li&gt;
&lt;li&gt;Is forward-only&amp;mdash;I did say that this is minimally viable didn&amp;rsquo;t I&amp;nbsp;;)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Coming from Django, I missed a definitive place to see the latest definition of
the whole db (which, in Django, is the models file). That&amp;rsquo;s why I set up the
migrator to always write the latest db definition out to a file using
&lt;a href="https://github.com/nhanb/pytaku/blob/65a6c08128ebbc2b7d33a6b043798c69ac7dfebe/src/pytaku/database/migrator.py#L44-L51"&gt;&lt;code&gt;sqlite3 &amp;lt;db_file&amp;gt; .schema &amp;gt; latest_schema.sql&lt;/code&gt;&lt;/a&gt;, and keep that file &lt;a href="https://github.com/nhanb/pytaku/blob/65a6c08128ebbc2b7d33a6b043798c69ac7dfebe/src/pytaku/database/migrations/latest_schema.sql"&gt;in
version control&lt;/a&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="c1"&gt;-- This file is auto-generated by the migration script&lt;/span&gt;
&lt;span class="c1"&gt;-- for reference purposes only. DO NOT EDIT.&lt;/span&gt;
&lt;span class="k"&gt;CREATE&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;TABLE&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;title&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;id&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;text&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;text&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;site&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;text&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;cover_ext&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;text&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;chapters&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;text&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;alt_names&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;text&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;descriptions&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;text&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;updated_at&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;text&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;default&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;datetime&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;now&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)),&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;is_webtoon&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;boolean&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;not&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;null&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;default&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;false&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;descriptions_format&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;text&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;not&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;null&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;default&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;text&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;unique&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;id&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;site&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="k"&gt;CREATE&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;TABLE&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;user&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;id&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;integer&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;primary&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;key&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;username&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;text&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;unique&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;password&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;text&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;created_at&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;text&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;default&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;datetime&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;now&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;[...]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Now to address the elephant in the room: SQLite has&amp;hellip; limited &lt;span class="caps"&gt;ALTER&lt;/span&gt; &lt;span class="caps"&gt;TABLE&lt;/span&gt;
capabilities. The upside is it&amp;rsquo;s &lt;a href="https://www.sqlite.org/lang_altertable.html"&gt;well-documented&lt;/a&gt;. What this means in
practice is that sometimes an otherwise simple &lt;code&gt;ALTER TABLE&lt;/code&gt; in other &lt;span class="caps"&gt;RDBMS&lt;/span&gt;-es
will require more manual gymnastics in SQLite: you&amp;rsquo;ll need to create a new
table with the desired properties, copy existing data over to the new table,
then drop the old table. There are subtle bear traps in the specific order of
steps to take, but thankfully the docs, again, deliver: as long as you
follow the &lt;a href="https://www.sqlite.org/lang_altertable.html#otheralter"&gt;12 steps&lt;/a&gt; correctly, you won&amp;rsquo;t mess up your data. It sounds
intimidating but it&amp;rsquo;s not &lt;em&gt;that&lt;/em&gt; bad. Here&amp;rsquo;s a specific example from pytaku
where I removed a &lt;span class="caps"&gt;FOREIGN&lt;/span&gt; &lt;span class="caps"&gt;KEY&lt;/span&gt;&amp;nbsp;constraint:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="c1"&gt;-- Remove foreign key from &amp;quot;read&amp;quot; table pointing to &amp;quot;chapter&amp;quot;.&lt;/span&gt;
&lt;span class="c1"&gt;-- So we can, say, mark all chapters of a title as read even if some of those&lt;/span&gt;
&lt;span class="c1"&gt;-- chapters haven&amp;#39;t been created.&lt;/span&gt;

&lt;span class="n"&gt;pragma&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;foreign_keys&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;off&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="c1"&gt;-- to let us do anything at all&lt;/span&gt;
&lt;span class="k"&gt;begin&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;transaction&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;create&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;table&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;new_read&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;user_id&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;integer&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;not&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;null&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;site&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;text&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;not&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;null&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;title_id&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;text&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="c1"&gt;-- nullable to accomodate existing mangadex rows, urgh.&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;chapter_id&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;text&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;not&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;null&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;updated_at&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;text&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;default&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;datetime&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;now&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)),&lt;/span&gt;

&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;foreign&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;key&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;user_id&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;references&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;user&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;id&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;unique&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;user_id&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;site&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;title_id&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;chapter_id&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="k"&gt;insert&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;into&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;new_read&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;select&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;from&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;read&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;drop&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;table&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;read&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;alter&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;table&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;new_read&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;rename&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;to&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;read&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="n"&gt;pragma&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;foreign_key_check&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;commit&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="n"&gt;pragma&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;foreign_keys&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;on&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Besides the boilerplaty dance with foreign_key pragmas and transactions, all I
had to do was copy the existing table definition from the aforementioned
latest_schema.sql file, tweak it to my desired state, then do the table
switcheroo. Again, the specific ordering of steps is important. I won&amp;rsquo;t go into
details, but I had actually tripped on a failure mode, which I then realized
was already nicely warned against in the docs. &lt;span class="caps"&gt;RTFM&lt;/span&gt; is actually fine advice for
projects that have good documentation, who would have&amp;nbsp;thought?&lt;/p&gt;
&lt;h2 id="recommended-sane-defaults"&gt;Recommended sane defaults&lt;a class="headerlink" href="#recommended-sane-defaults" title="Permanent link"&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;SQLite comes with some default settings that may be surprising for people
coming from e.g. Postgres. Here are some tweaks that worked better for&amp;nbsp;me.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://sqlite.org/wal.html"&gt;Enable &lt;span class="caps"&gt;WAL&lt;/span&gt; mode&lt;/a&gt;. This allows for concurrent readers, which is usually
what you want from a web&amp;nbsp;service.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://www.sqlite.org/pragma.html#pragma_foreign_keys"&gt;Enforce foreign key constraints&lt;/a&gt;. Yep, you read that right: SQLite
doesn&amp;rsquo;t enforce foreign key constraints by default. This is just one of the
various consequences of SQLite being veeeeery lax about what you store. Another
potential surprise is column types not being enforced, whose alternative only
landed recently in the form of &lt;a href="https://www.sqlite.org/stricttables.html"&gt;&lt;span class="caps"&gt;STRICT&lt;/span&gt; Tables&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://www.sqlite.org/c3ref/busy_timeout.html"&gt;Set a non-zero busytimeout&lt;/a&gt;. Otherwise if a query is blocked, it will
crash immediately instead of waiting for the blocking query to finish, no
matter how short the wait&amp;nbsp;is.&lt;/p&gt;
&lt;h2 id="a-quick-note-on-sql-injection"&gt;A quick note on &lt;span class="caps"&gt;SQL&lt;/span&gt; injection&lt;a class="headerlink" href="#a-quick-note-on-sql-injection" title="Permanent link"&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;em&gt;(or how to move on from the late&amp;nbsp;90s)&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;You don&amp;rsquo;t need a full blown &lt;span class="caps"&gt;ORM&lt;/span&gt; to protect yourself against &lt;span class="caps"&gt;SQL&lt;/span&gt; injections. In
fact, SQLite (and any sane &lt;span class="caps"&gt;RDBMS&lt;/span&gt; really) has built-in support for it called
parameterized queries. Python&amp;rsquo;s sqlite3 documentation also covers this, but the
tl;dr&amp;nbsp;is:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="c1"&gt;# Never compose your query with string interpolation like this:&lt;/span&gt;
&lt;span class="n"&gt;cursor&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;execute&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sa"&gt;f&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;SELECT foo FROM bar WHERE stuff = &amp;#39;&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;user_input&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;&amp;#39;;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c1"&gt;# Use the parameter substitution API instead:&lt;/span&gt;
&lt;span class="n"&gt;cursor&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;execute&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;SELECT foo FROM bar WHERE stuff = ?;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;user_input&lt;/span&gt;&lt;span class="p"&gt;,))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Congratulations! You now have better security hygiene than &lt;a href="https://vnhacker.blogspot.com/2021/08/bkav-bi-hack-nhu-nao.html"&gt;Vietnam&amp;rsquo;s &amp;ldquo;leading&amp;rdquo;
cybersecurity firm&lt;/a&gt;.&lt;/p&gt;</content><category term="posts"></category></entry><entry><title>I made my python webapp installable via pip</title><link href="https://old.hi.imnhan.com/posts/i-made-my-python-webapp-pip-installable/" rel="alternate"></link><published>2021-10-02T19:49:00+07:00</published><updated>2021-10-02T19:49:00+07:00</updated><author><name>Bùi Thành Nhân</name></author><id>tag:old.hi.imnhan.com,2021-10-02:/posts/i-made-my-python-webapp-pip-installable/</id><summary type="html">&lt;p&gt;Running &lt;code&gt;pip3 install pytaku&lt;/code&gt; now gives you all the tools you need &lt;sup id="fnref:1"&gt;&lt;a class="footnote-ref" href="#fn:1"&gt;1&lt;/a&gt;&lt;/sup&gt; &lt;sup id="fnref:2"&gt;&lt;a class="footnote-ref" href="#fn:2"&gt;2&lt;/a&gt;&lt;/sup&gt; to
deploy &lt;a href="https://sr.ht/~nhanb/pytaku/"&gt;pytaku&lt;/a&gt; - a hobby webapp of mine - on a fresh Debian 11&amp;nbsp;server:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;pytaku-generate-config&lt;span class="w"&gt; &lt;/span&gt;&amp;gt;&lt;span class="w"&gt; &lt;/span&gt;pytaku.conf.json&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="c1"&gt;# generate config file&lt;/span&gt;
pytaku-migrate&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="c1"&gt;# generate initial sqlite3 db, or migrate to new version&lt;/span&gt;
pytaku&lt;span class="w"&gt; &lt;/span&gt;-w&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;5&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="c1"&gt;# run main …&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</summary><content type="html">&lt;p&gt;Running &lt;code&gt;pip3 install pytaku&lt;/code&gt; now gives you all the tools you need &lt;sup id="fnref:1"&gt;&lt;a class="footnote-ref" href="#fn:1"&gt;1&lt;/a&gt;&lt;/sup&gt; &lt;sup id="fnref:2"&gt;&lt;a class="footnote-ref" href="#fn:2"&gt;2&lt;/a&gt;&lt;/sup&gt; to
deploy &lt;a href="https://sr.ht/~nhanb/pytaku/"&gt;pytaku&lt;/a&gt; - a hobby webapp of mine - on a fresh Debian 11&amp;nbsp;server:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;pytaku-generate-config&lt;span class="w"&gt; &lt;/span&gt;&amp;gt;&lt;span class="w"&gt; &lt;/span&gt;pytaku.conf.json&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="c1"&gt;# generate config file&lt;/span&gt;
pytaku-migrate&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="c1"&gt;# generate initial sqlite3 db, or migrate to new version&lt;/span&gt;
pytaku&lt;span class="w"&gt; &lt;/span&gt;-w&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;5&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="c1"&gt;# run main webapp using gunicorn on localhost:8000&lt;/span&gt;
pytaku-scheduler&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="c1"&gt;# daemon that executes scheduled background tasks&lt;/span&gt;

&lt;span class="c1"&gt;# Optionally, run this to copy all static assets to a designated dir so your&lt;/span&gt;
&lt;span class="c1"&gt;# web server (nginx/caddy/etc.) can serve them directly instead of through&lt;/span&gt;
&lt;span class="c1"&gt;# the less performant gunicorn:&lt;/span&gt;
pytaku-collect-static&lt;span class="w"&gt; &lt;/span&gt;/var/www/pytaku
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;So how does that work? Let&amp;rsquo;s break it&amp;nbsp;down.&lt;/p&gt;
&lt;h2 id="the-pytaku-executables"&gt;The pytaku-* executables&lt;a class="headerlink" href="#the-pytaku-executables" title="Permanent link"&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;a href="https://python-poetry.org/"&gt;Poetry&lt;/a&gt; is awesome. Not only does it offer sane dependency management that
plays well with the pyenv + virtualenv combo, but it also vastly simplifies
building and publishing python libraries. Telling pip to install executables
alongside my library is as simple as writing a few lines in my
&lt;a href="https://git.sr.ht/~nhanb/pytaku/tree/ff20e51f8c178bf981d80aa3737bf31a1059a506/item/pyproject.toml#L15-21"&gt;pyproject.toml&lt;/a&gt;&amp;nbsp;file:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="k"&gt;[tool.poetry.scripts]&lt;/span&gt;
&lt;span class="n"&gt;pytaku&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;pytaku:serve&amp;quot;&lt;/span&gt;
&lt;span class="n"&gt;pytaku-dev&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;pytaku:dev&amp;quot;&lt;/span&gt;
&lt;span class="n"&gt;pytaku-migrate&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;pytaku:migrate&amp;quot;&lt;/span&gt;
&lt;span class="n"&gt;pytaku-generate-config&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;pytaku:generate_config&amp;quot;&lt;/span&gt;
&lt;span class="n"&gt;pytaku-scheduler&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;pytaku:scheduler&amp;quot;&lt;/span&gt;
&lt;span class="n"&gt;pytaku-collect-static&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;pytaku:collect_static&amp;quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;The left hand side indicates the executable file name, while the right hand
side declares which function to call. In my example, &amp;ldquo;pytaku:serve&amp;rdquo; points to
the serve() function inside&amp;nbsp;src/pytaku/__init__.py.&lt;/p&gt;
&lt;p&gt;Now that we have easy access to &lt;span class="caps"&gt;CLI&lt;/span&gt; entry points, let&amp;rsquo;s quickly go over
&lt;a href="https://git.sr.ht/~nhanb/pytaku/tree/ff20e51f8c178bf981d80aa3737bf31a1059a506/item/src/pytaku/__init__.py"&gt;how&lt;/a&gt; each command&amp;nbsp;works:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;pytaku&lt;/code&gt; and &lt;code&gt;pytaku-dev&lt;/code&gt; simply exec gunicorn and flask respectively
  behind the&amp;nbsp;scene.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;pytaku-migrate&lt;/code&gt; runs my bespoke migrator script (which is extremely
  primitive but hey it was a good learning&amp;nbsp;experience).&lt;/li&gt;
&lt;li&gt;&lt;code&gt;pytaku-generate-config&lt;/code&gt; uses &lt;a href="https://github.com/lincolnloop/goodconf"&gt;goodconf&lt;/a&gt; to generate a config template,
  pre-filling as many values as it&amp;nbsp;can.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;pytaku-scheduler&lt;/code&gt; is just a dead simple single-threaded scheduler that I
  don&amp;rsquo;t recommend for any service that has more than a handful of&amp;nbsp;users.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;pytaku-collect-static&lt;/code&gt; leverages importlib.resources.path to get the
  package&amp;rsquo;s installation path. From there it copies the bundled static assets
  to wherever you want your nginx to serve. It&amp;rsquo;s basically a simplified version
  of Django&amp;rsquo;s collectstatic&amp;nbsp;command.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="but-why-bother"&gt;But why bother?&lt;a class="headerlink" href="#but-why-bother" title="Permanent link"&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Lincoln Loop&amp;rsquo;s series of Django-related blog posts were my main inspiration.
Central to this idea is &lt;a href="https://lincolnloop.com/blog/using-setuppy-your-django-project/"&gt;Using setup.py in Your (Django) Project&lt;/a&gt;, which
explains both how and why you would want to make your python project
pip-friendly. The &amp;ldquo;why&amp;rdquo; boils down to 2&amp;nbsp;points:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;You don&amp;rsquo;t want to reinvent package management. Let pip handle the minute
  details of packaging, distributing, versioning, etc. for&amp;nbsp;you.&lt;/li&gt;
&lt;li&gt;You no longer need to run python from the source code&amp;rsquo;s path. In pytaku&amp;rsquo;s
  case, the working dir now only stores the sqlite database file and the
  json config file, i.e. purely data, completely separate from the source&amp;nbsp;code.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;More broadly, the idea of simple distributing/deployment is, in my opinion,
often overlooked these days. Fiddly deployment procedures are largely why
Docker flourished: our industry just collectively gave up on self-contained
software distribution and decided to ship a whole rootfs for each application
process instead. Okay, I may be overreacting here, but I think it&amp;rsquo;s at least
fair to say that if every webdev shop standardized on shipping Go binaries
statically compiled with musl libc, we&amp;rsquo;d probably reach out for Docker less
often. When I showed pytaku to a colleague of mine, his first question was
essentially &amp;ldquo;Dockerfile when?&amp;rdquo;. Sure, Docker is neat and solves real problems,
but how about we strive to avoid, or at least minimize, those problems in the
first place? Remember, while container evangelists love harping on about
negligible &lt;span class="caps"&gt;CPU&lt;/span&gt; overhead, they tend to gloss over the storage&amp;nbsp;overhead:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;$&lt;span class="w"&gt; &lt;/span&gt;docker&lt;span class="w"&gt; &lt;/span&gt;image&lt;span class="w"&gt; &lt;/span&gt;ls
REPOSITORY&lt;span class="w"&gt;   &lt;/span&gt;TAG&lt;span class="w"&gt;        &lt;/span&gt;IMAGE&lt;span class="w"&gt; &lt;/span&gt;ID&lt;span class="w"&gt;       &lt;/span&gt;CREATED&lt;span class="w"&gt;       &lt;/span&gt;SIZE
python&lt;span class="w"&gt;       &lt;/span&gt;&lt;span class="m"&gt;3&lt;/span&gt;-alpine&lt;span class="w"&gt;   &lt;/span&gt;bcf864391ba1&lt;span class="w"&gt;   &lt;/span&gt;&lt;span class="m"&gt;3&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;weeks&lt;span class="w"&gt; &lt;/span&gt;ago&lt;span class="w"&gt;   &lt;/span&gt;&lt;span class="m"&gt;45&lt;/span&gt;.1MB
python&lt;span class="w"&gt;       &lt;/span&gt;&lt;span class="m"&gt;3&lt;/span&gt;-slim&lt;span class="w"&gt;     &lt;/span&gt;66f4843b721f&lt;span class="w"&gt;   &lt;/span&gt;&lt;span class="m"&gt;3&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;weeks&lt;span class="w"&gt; &lt;/span&gt;ago&lt;span class="w"&gt;   &lt;/span&gt;122MB
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;And the operational complexity overhead. Did you know that by default Docker
&lt;a href="https://www.jeffgeerling.com/blog/2020/be-careful-docker-might-be-exposing-ports-world"&gt;completely sidesteps your firewall&lt;/a&gt;? That even if you specifically tell it
to only listen to a port on localhost, it may or may not still expose it to the
whole world? That this remains an &lt;a href="https://github.com/moby/moby/issues/22054"&gt;open bug since 2016&lt;/a&gt;? This isn&amp;rsquo;t one of
those security bogeyman stories either, actual people have been &lt;a href="https://blog.newsblur.com/2021/06/28/story-of-a-hacking/"&gt;bitten by
it&lt;/a&gt;. At this point cloud apologists would probably jump in and point out
how this isn&amp;rsquo;t an issue if you&amp;rsquo;re running on &lt;span class="caps"&gt;GCP&lt;/span&gt; or &lt;span class="caps"&gt;AWS&lt;/span&gt; because they have
another layer of firewall that locks down every port by default that you can
setup on their totally usable web console or infrastructure-as-code it in your
cloudformations or your terraformses or, actually, do you have a moment to talk
about our lord and savior&amp;nbsp;Cthulhubernetes&amp;ndash;&lt;/p&gt;
&lt;p&gt;But I&amp;nbsp;digress.&lt;/p&gt;
&lt;p&gt;I guess what I was trying to say is, throwing abstractions over complex
procedures is simply shifting the costs elsewhere. Shipping your software in a
Dockerfile is fine, but making your distribution so simple that people can
easily write a couple of lines of Dockerfile for it by themselves is more
valuable. Simple distribution is simple to deploy regardless of whether you&amp;rsquo;re
using docker, packer, ansible, pyinfra, podman, nomad, k8s, k3s, an
impenetrable shell script some dude wrote 2 years ago who just left the company
last month&amp;hellip; or any combination of the above. The point is &lt;strong&gt;you shouldn&amp;rsquo;t be
forced to use more heavyweight solutions just because the software is a pain in
the butt to setup manually&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;And other people &lt;em&gt;have&lt;/em&gt; been trying to make python application distribution&amp;nbsp;simpler:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://shiv.readthedocs.io/en/latest/"&gt;shiv&lt;/a&gt; bundles everything but the python&amp;nbsp;interpreter&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/indygreg/PyOxidizer"&gt;PyOxidizer&lt;/a&gt; bundles everything &lt;em&gt;including&lt;/em&gt; the python&amp;nbsp;interpreter&lt;/li&gt;
&lt;li&gt;&lt;a href="https://nuitka.net/"&gt;nuika&lt;/a&gt; actually compiles your python application into an executable,
  unlike PyInstaller which just generates a self-extracting&amp;nbsp;archive.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;We&amp;rsquo;ll get there.&amp;nbsp;Someday.&lt;/p&gt;
&lt;div class="footnote"&gt;
&lt;hr&gt;
&lt;ol&gt;
&lt;li id="fn:1"&gt;
&lt;p&gt;Well actually you still need to &lt;code&gt;apt install python3-apsw&lt;/code&gt;, but that&amp;rsquo;s
  only because apsw &lt;a href="https://rogerbinns.github.io/apsw/download.html#easy-install-pip-pypi"&gt;refuses&lt;/a&gt; to provide a binary wheel on pypi. It can be
  replaced by the standard library sqlite3 module anyway - I only picked apsw
  because it exposes essentially the same &lt;span class="caps"&gt;API&lt;/span&gt; as the SQLite C library, which
  helped when I was learning to use SQLite properly for the first time.&amp;#160;&lt;a class="footnote-backref" href="#fnref:1" title="Jump back to footnote 1 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id="fn:2"&gt;
&lt;p&gt;Even with the above, pytaku still won&amp;rsquo;t run out of the box because it
  needs a &lt;a href="https://github.com/nhanb/gae-proxy/"&gt;crappy proxy&lt;/a&gt; in order to
  bypass mangasee&amp;rsquo;s strict cloudflare protection. I know it&amp;rsquo;s lame but pytaku
  is practically a web scraper project and there&amp;rsquo;s no way to make it work
  reliably without a proxy pool anyway. I hope this doesn&amp;rsquo;t distract you from
  the point of the article though.&amp;#160;&lt;a class="footnote-backref" href="#fnref:2" title="Jump back to footnote 2 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;</content><category term="posts"></category></entry><entry><title>Opening http link under the cursor in vim</title><link href="https://old.hi.imnhan.com/posts/opening-http-link-under-the-cursor-in-vim/" rel="alternate"></link><published>2021-08-07T11:37:00+07:00</published><updated>2021-08-07T11:37:00+07:00</updated><author><name>Bùi Thành Nhân</name></author><id>tag:old.hi.imnhan.com,2021-08-07:/posts/opening-http-link-under-the-cursor-in-vim/</id><summary type="html">&lt;p&gt;Mr. &lt;a href="https://www.walterbright.com/"&gt;Walter Bright&lt;/a&gt;, creator of the D
programming language, recently
&lt;a href="https://news.ycombinator.com/item?id=28090272"&gt;commented&lt;/a&gt; on Hacker&amp;nbsp;News:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;And for bug fixes, reference the issue which often gives a detailed
explanation for why the code is a certain&amp;nbsp;way:&lt;/p&gt;
&lt;p&gt;&lt;a href="https://github.com/dlang/dmd/blob/master/src/dmd/backend/cgxmm.d#L1210"&gt;https://github.com/dlang/dmd/blob/master/src/dmd/backend/cgxmm.d#L1210&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Ever since …&lt;/p&gt;&lt;/blockquote&gt;</summary><content type="html">&lt;p&gt;Mr. &lt;a href="https://www.walterbright.com/"&gt;Walter Bright&lt;/a&gt;, creator of the D
programming language, recently
&lt;a href="https://news.ycombinator.com/item?id=28090272"&gt;commented&lt;/a&gt; on Hacker&amp;nbsp;News:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;And for bug fixes, reference the issue which often gives a detailed
explanation for why the code is a certain&amp;nbsp;way:&lt;/p&gt;
&lt;p&gt;&lt;a href="https://github.com/dlang/dmd/blob/master/src/dmd/backend/cgxmm.d#L1210"&gt;https://github.com/dlang/dmd/blob/master/src/dmd/backend/cgxmm.d#L1210&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Ever since I enhanced the editor I use to open the browser on links, this
sort of thing has proven to be very, very&amp;nbsp;handy.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;I&amp;rsquo;ve never had any issue with opening links from vim: I have &lt;code&gt;&amp;lt;leader&amp;gt;y&lt;/code&gt; set up
in Visual mode to yank stuff into the system-wide clipboard which I can then
paste into the browser. However, ever since I mapped &lt;code&gt;&amp;lt;leader&amp;gt;gh&lt;/code&gt; to trigger
&lt;a href="https://github.com/tpope/vim-fugitive/blob/2dc08dfe354ed5400f5cdb3d5009dcd4024aac8a/doc/fugitive.txt#L213"&gt;&lt;code&gt;:GBrowse&lt;/code&gt;&lt;/a&gt; that opens a browser tab instantly, the old &amp;ldquo;select, copy,
alt-tab to browser, ctrl+t, ctrl+v&amp;rdquo; flow started to feel&amp;hellip; prehistoric. Mr.
Bright&amp;rsquo;s comment gave me the final nudge to actually go ahead and set it&amp;nbsp;up.&lt;/p&gt;
&lt;p&gt;The good folks from the &lt;a href="https://stackoverflow.com/questions/9458294/open-url-under-cursor-in-vim-with-browser"&gt;developer encyclopedia&lt;/a&gt; suggested &lt;code&gt;gx&lt;/code&gt; but for some
reason, setting &lt;code&gt;g:netrw_browsex_viewer&lt;/code&gt; &lt;a href="https://github.com/vim/vim/issues/4738"&gt;didn&amp;rsquo;t seem to do anything&lt;/a&gt; so the
command would always &lt;code&gt;wget&lt;/code&gt; the link then tell the browser to open that
downloaded file. Therefore, I cobbled together this snippet which was adapted
from those stackoverflow &lt;span class="amp"&gt;&amp;amp;&lt;/span&gt; github&amp;nbsp;threads:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="k"&gt;function&lt;/span&gt;&lt;span class="nf"&gt;! OpenURL&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="n"&gt;let&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;l&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;url&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;matchstr&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;expand&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&amp;lt;cWORD&amp;gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;#39;https\=:\/\/[^ &amp;gt;,;()]*&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;l&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;url&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;!&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&amp;quot;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;let&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;l&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;url&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;shellescape&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;l&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;url&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;let&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;l&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;command&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;!xdg-open &amp;quot;&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;l&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;url&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nb"&gt;echo&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;l&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;command&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;silent&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;exec&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;l&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;command&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="k"&gt;else&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nb"&gt;echo&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;No URL found under cursor.&amp;quot;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="n"&gt;endif&lt;/span&gt;
&lt;span class="n"&gt;endfunction&lt;/span&gt;

&lt;span class="s"&gt;nnoremap&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;gl&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;:call&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;OpenURL()&amp;lt;cr&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;em&gt;(if you&amp;rsquo;re on a Mac, replacing &lt;code&gt;xdg-open&lt;/code&gt; with &lt;code&gt;open&lt;/code&gt; will probably
do the same&amp;nbsp;thing)&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Now whenever I have my cursor on an http(s) url, I can type &lt;code&gt;gl&lt;/code&gt; from normal
mode and xdg-open will use my default browser to open it up. This could be
extended to any other scheme like &lt;code&gt;mailto&lt;/code&gt; or &lt;code&gt;ftp&lt;/code&gt; but I don&amp;rsquo;t have any
practical use for them right now so that will&amp;nbsp;do.&lt;/p&gt;
&lt;p&gt;One drawback is if there&amp;rsquo;s a whitespace in the &lt;span class="caps"&gt;URL&lt;/span&gt; (which is bad practice
anyway), my regex won&amp;rsquo;t match the whole thing. In such cases I&amp;rsquo;d rather resort
to good old manual visual mode than try to be clever and make my &lt;span class="caps"&gt;URL&lt;/span&gt; detecting
logic exponentially more complex. I&amp;rsquo;d take simple software with obvious, easily
understood behavior over overcomplicated, (possibly) subtly broken balls of mud
any&amp;nbsp;day.&lt;/p&gt;
&lt;p&gt;By the way, if you looked at my script and got spooked by the idea of executing
a shell command composed from arbitrary, potentially unsafe input (i.e. text
file content), don&amp;rsquo;t worry: that&amp;rsquo;s what &lt;a href="https://learnvimscriptthehardway.stevelosh.com/chapters/32.html#escaping-shell-command-arguments"&gt;&lt;code&gt;shellescape()&lt;/code&gt;&lt;/a&gt; is&amp;nbsp;for.&lt;/p&gt;
&lt;h2 id="but-why-stop-there"&gt;But why stop there?&lt;a class="headerlink" href="#but-why-stop-there" title="Permanent link"&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;We&amp;rsquo;re using Jira at work (I know, don&amp;rsquo;t ask), and we have a convention to
include the Jira ticket in all top-level git commit messages like this (French&amp;nbsp;optional):&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;[SRE-123456] Finally fix the goddamn pipeline
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;That&amp;rsquo;s no &lt;span class="caps"&gt;URL&lt;/span&gt;, but the jira ticket &lt;span class="caps"&gt;ID&lt;/span&gt; pattern is pretty simple, so I simply
altered the regexp a bit like&amp;nbsp;this:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="k"&gt;function&lt;/span&gt;&lt;span class="nf"&gt;! OpenJira&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="n"&gt;let&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;l&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;jira_id&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;toupper&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;matchstr&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;expand&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&amp;lt;cWORD&amp;gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;#39;\c\(id2\|sre\|csi\)-[0-9]\+&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;l&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;jira_id&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;!&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&amp;quot;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;let&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;l&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;command&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;!xdg-open https://my-company.atlassian.net/browse/&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;l&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;jira_id&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nb"&gt;echo&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;l&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;command&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;silent&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;exec&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;l&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;command&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="k"&gt;else&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nb"&gt;echo&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;No Jira ticket found under cursor.&amp;quot;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="n"&gt;endif&lt;/span&gt;
&lt;span class="n"&gt;endfunction&lt;/span&gt;
&lt;span class="s"&gt;nnoremap&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;gj&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;:call&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;OpenJira()&amp;lt;cr&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Voila! Now I can press &lt;code&gt;gj&lt;/code&gt; to open any atlassian ticket from just its &lt;span class="caps"&gt;ID&lt;/span&gt;.&lt;/p&gt;
&lt;p&gt;Some interesting&amp;nbsp;points:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;ID2/SRE/CSI&lt;/code&gt; are the prefixes that I know of. No idea if there are any
  other. Would be trivial to add later&amp;nbsp;anyway.&lt;/li&gt;
&lt;li&gt;Because the pattern of l:jira_id is very simple, I don&amp;rsquo;t even need to
  shellescape() this&amp;nbsp;one.&lt;/li&gt;
&lt;li&gt;I didn&amp;rsquo;t even bother to refactor common stuff between the OpenURL() and&amp;nbsp;OpenJira().&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;On a more big-picture note, I can afford to make seemingly sloppy decisions
precisely because this serves only myself, and my specific use cases are
usually narrow. It&amp;rsquo;s not very general, but it works, and works precisely the
way I want it. This is one of the reasons I&amp;rsquo;ve always preferred simple tooling
that I can build upon, rather than following the prescribed workflows of more
full-fledged&amp;nbsp;IDEs.&lt;/p&gt;
&lt;p&gt;I&amp;rsquo;m not bashing IDEs, and I&amp;rsquo;m in no way promoting vim or &lt;a href="https://github.com/DigitalMars/med"&gt;rolling your own
emacs&lt;/a&gt;. I&amp;rsquo;m firmly in the &amp;ldquo;use whatever
you&amp;rsquo;re comfortable with&amp;rdquo; camp. I think the whole idea of editor/&lt;span class="caps"&gt;IDE&lt;/span&gt; wars is
juvenile, dumb and counterproductive (all software sucks in some way anyway,
fight me). Showing nifty tricks you can do with your tools, inspiring others to
either check them out or implement those on their own tools, just like how Mr.
Bright has done with his little comment, is a much better use of everyone&amp;rsquo;s
time. I&amp;nbsp;think.&lt;/p&gt;</content><category term="posts"></category></entry><entry><title>Simplest possible stepmania soft-to-hard pad mod</title><link href="https://old.hi.imnhan.com/posts/simplest-possible-stepmania-soft-to-hard-pad-mod/" rel="alternate"></link><published>2021-02-08T12:47:00+07:00</published><updated>2021-02-08T12:47:00+07:00</updated><author><name>Bùi Thành Nhân</name></author><id>tag:old.hi.imnhan.com,2021-02-08:/posts/simplest-possible-stepmania-soft-to-hard-pad-mod/</id><summary type="html">&lt;p&gt;I&amp;rsquo;ve been playing Stepmania on and off for years now, but only recently tried
taping the soft dancepad to the floor. It blew my mind how much better it
felt, since I no longer had to worry about the pad sliding or curling&amp;nbsp;up:&lt;/p&gt;
&lt;p&gt;&lt;img alt="mach 0" src="/images/padmod/01_before.jpg"&gt;&lt;/p&gt;
&lt;p&gt;However, taping &lt;span class="amp"&gt;&amp;amp;&lt;/span&gt; untaping every time …&lt;/p&gt;</summary><content type="html">&lt;p&gt;I&amp;rsquo;ve been playing Stepmania on and off for years now, but only recently tried
taping the soft dancepad to the floor. It blew my mind how much better it
felt, since I no longer had to worry about the pad sliding or curling&amp;nbsp;up:&lt;/p&gt;
&lt;p&gt;&lt;img alt="mach 0" src="/images/padmod/01_before.jpg"&gt;&lt;/p&gt;
&lt;p&gt;However, taping &lt;span class="amp"&gt;&amp;amp;&lt;/span&gt; untaping every time I play is too much of a hurdle (and
I want &lt;em&gt;zero&lt;/em&gt; friction for my cardio sessions). Therefore, the hard pad&amp;nbsp;mod.&lt;/p&gt;
&lt;p&gt;Of course people on the internet have done this a gazillion times, such as
&lt;a href="https://www.angelfire.com/pro2/softpadmod/"&gt;this one&lt;/a&gt; or &lt;a href="https://www.youtube.com/watch?v=Soem9tnzeG0"&gt;this
one&lt;/a&gt;. Those guys did way more
fiddly stuff that I personally don&amp;rsquo;t need though, such as putting thick
vinyl under each button for better feedback, or covering the whole top with
more vinyl. My plan is simple: cut out a piece of plywood, double-sided-tape
the bottom with a yoga mat for slip protection, then tape the softpad on&amp;nbsp;top.&lt;/p&gt;
&lt;p&gt;Luckily, my uncle had a spare piece of plywood that somehow had the perfect&amp;nbsp;width:&lt;/p&gt;
&lt;p&gt;&lt;img alt="sizing" src="/images/padmod/02_sizing.jpg"&gt;&lt;/p&gt;
&lt;p&gt;So my job is sawing &lt;em&gt;one single line&lt;/em&gt;. How hard could it&amp;nbsp;be?&lt;/p&gt;
&lt;p&gt;&lt;img alt="cut 1" src="/images/padmod/03_cut.jpg"&gt;&lt;/p&gt;
&lt;p&gt;Turns out, the saw was blunt, and my sawing technique was so bad (read:
non-existent) so the cut keeps leaning to the right. Since I had no idea how to
fix it, I just continued until the halfway point then flipped the whole thing
over, hoping that at least my right-leaning sawing was&amp;nbsp;consistent.&lt;/p&gt;
&lt;p&gt;&lt;img alt="cut 2" src="/images/padmod/05_cut.jpg"&gt;&lt;/p&gt;
&lt;p&gt;What do you know, it&amp;nbsp;worked!&lt;/p&gt;
&lt;p&gt;Since I also had an old unused yoga mat, I checked how well it worked as a
non-slip&amp;nbsp;solution:&lt;/p&gt;
&lt;p&gt;&lt;img alt="nonslip_1" src="/images/padmod/06_nonslip.jpg"&gt;&lt;/p&gt;
&lt;p&gt;Then cut it into shape and slapped on some double tape. The board itself was
heavy enough so just putting it on top of the mat was enough to make it stay in
place, so the tape&amp;rsquo;s only job was to keep the mat from falling off whenever I
need to pick up &lt;span class="amp"&gt;&amp;amp;&lt;/span&gt; move the whole thing&amp;nbsp;around.&lt;/p&gt;
&lt;p&gt;&lt;img alt="nonslip_2" src="/images/padmod/07_nonslip.jpg"&gt;&lt;/p&gt;
&lt;p&gt;Finally, taping the soft pad on the other side. I used this roll that I bought
from the nearby &lt;a href="https://www.emart.com.vn/"&gt;Emart&lt;/a&gt;, which was hand-tearable, so
I could work without scissors, and also easily removable, just in case I need
to replace the soft pad in the&amp;nbsp;future:&lt;/p&gt;
&lt;p&gt;&lt;img alt="nonslip_2" src="/images/padmod/07a_tape.jpg"&gt;&lt;/p&gt;
&lt;p&gt;And with that, we&amp;rsquo;ve got the end product. It ain&amp;rsquo;t pretty, but it works. Very
well at that. A nice bonus that I didn&amp;rsquo;t expect is that thanks to the mat
underneath, the board just feels softer, therefore more comfortable, to step&amp;nbsp;on.&lt;/p&gt;
&lt;p&gt;&lt;img alt="tada" src="/images/padmod/08_finished.jpg"&gt;&lt;/p&gt;
&lt;p&gt;I know serious &lt;span class="caps"&gt;DDR&lt;/span&gt; enthusiasts will &lt;a href="https://youtu.be/sEWj2_BNG_0?t=263"&gt;scoff
at&lt;/a&gt; the idea of using a soft pad at all,
but really I&amp;rsquo;m just a fat dude trying to lose weight and have fun in the
process, not trying to impress anyone in the Stamina Nation Discord or
whatever. With that use case, I think this specific setup offers the best
bang-for-your-buck, considering how even the lowest tiers of premade hard pads
sell for exorbitant prices (and that&amp;rsquo;s before shipping, if they even ship to
Vietnam at all), and &lt;span class="caps"&gt;DIY&lt;/span&gt;-ing a hard pad from scratch is way more&amp;nbsp;effort.&lt;/p&gt;
&lt;p&gt;Between this and working through &lt;a href="https://pages.cs.wisc.edu/~remzi/OSTEP/"&gt;the comet
book&lt;/a&gt;, I think I&amp;rsquo;ll keep myself
entertained enough during Saigon&amp;rsquo;s potential second &lt;span class="caps"&gt;COVID&lt;/span&gt;-19 lockdown.
I&amp;rsquo;d prefer it didn&amp;rsquo;t happen&amp;nbsp;though.&lt;/p&gt;
&lt;p&gt;P/s here it is in&amp;nbsp;action:&lt;/p&gt;
&lt;video controls&gt;
  &lt;source src="https://junk.imnhan.com/softpadmod.mp4" type="video/mp4"&gt;
  &lt;a href="https://junk.imnhan.com/softpadmod.mp4"&gt;
    Video: https://junk.imnhan.com/softpadmod.mp4
  &lt;/a&gt;
&lt;/video&gt;

&lt;p&gt;&lt;strike&gt;(man I wonder if we&amp;rsquo;ll ever get a Melty Blood 2)&lt;/strike&gt;&lt;br&gt;
Hot damn they&amp;rsquo;re actually &lt;a href="https://meltyblood.typelumina.com/en/"&gt;doing it&lt;/a&gt;!&lt;/p&gt;</content><category term="side projects"></category></entry><entry><title>The video streaming finale, or why put.io is awesome</title><link href="https://old.hi.imnhan.com/posts/the-video-streaming-finale-or-why-putio-is-awesome/" rel="alternate"></link><published>2020-10-21T11:45:00+07:00</published><updated>2020-10-21T11:45:00+07:00</updated><author><name>Bùi Thành Nhân</name></author><id>tag:old.hi.imnhan.com,2020-10-21:/posts/the-video-streaming-finale-or-why-putio-is-awesome/</id><summary type="html">&lt;p&gt;&lt;a href="/posts/streaming-videos-from-google-drive-a-second-attempt/"&gt;Previously&lt;/a&gt;,
&lt;a href="/posts/towards-an-acceptable-video-playing-experience/"&gt;previously&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;I ditched the whole self hosted mess and just bought a &lt;a href="https://put.io"&gt;put.io&lt;/a&gt;
subscription instead. This has become the smoothest, most no-nonsense video
streaming experience I&amp;rsquo;ve ever&amp;nbsp;had.&lt;/p&gt;
&lt;p&gt;It&amp;rsquo;s a&amp;nbsp;seedbox.&lt;/p&gt;
&lt;p&gt;It&amp;nbsp;transcodes.&lt;/p&gt;
&lt;p&gt;It&amp;nbsp;streams.&lt;/p&gt;
&lt;p&gt;It has a web-based video player that lets me pick&amp;nbsp;subtitles …&lt;/p&gt;</summary><content type="html">&lt;p&gt;&lt;a href="/posts/streaming-videos-from-google-drive-a-second-attempt/"&gt;Previously&lt;/a&gt;,
&lt;a href="/posts/towards-an-acceptable-video-playing-experience/"&gt;previously&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;I ditched the whole self hosted mess and just bought a &lt;a href="https://put.io"&gt;put.io&lt;/a&gt;
subscription instead. This has become the smoothest, most no-nonsense video
streaming experience I&amp;rsquo;ve ever&amp;nbsp;had.&lt;/p&gt;
&lt;p&gt;It&amp;rsquo;s a&amp;nbsp;seedbox.&lt;/p&gt;
&lt;p&gt;It&amp;nbsp;transcodes.&lt;/p&gt;
&lt;p&gt;It&amp;nbsp;streams.&lt;/p&gt;
&lt;p&gt;It has a web-based video player that lets me pick&amp;nbsp;subtitles.&lt;/p&gt;
&lt;p&gt;In cases when the subtitles aren&amp;rsquo;t recognized, or when I want to switch between
audio tracks, I can always drag-n-drop the original file&amp;rsquo;s streaming &lt;span class="caps"&gt;URL&lt;/span&gt; from
the browser straight to an mpv launcher like&amp;nbsp;this:&lt;/p&gt;
&lt;video controls&gt;
  &lt;source src="/images/put.io_01_mpv.mp4" type="video/mp4"&gt;
  &lt;a href="/images/put.io_01_mpv.mp4"&gt;Video: /images/put.io_01_mpv.mp4&lt;/a&gt;
&lt;/video&gt;

&lt;p&gt;It also has a open source third-party &lt;a href="https://github.com/DSteve595/Put.io"&gt;Android app&lt;/a&gt; that lets me browse and
stream via mpv-android. As icing on the cake, this app supports casting to
Chromecast-enabled TVs - everything Just Works&amp;nbsp;(tm).&lt;/p&gt;
&lt;p&gt;The above is only possible because put.io exposes a powerful, well-documented
&lt;span class="caps"&gt;API&lt;/span&gt; for everyone to play&amp;nbsp;with.&lt;/p&gt;
&lt;p&gt;The web player is clean, snappy (see that, Google Drive team?) and has
autoplay disabled by default (screw you,&amp;nbsp;Netflix).&lt;/p&gt;
&lt;p&gt;It&amp;rsquo;s refreshing to find software that works &lt;em&gt;for&lt;/em&gt; instead of &lt;em&gt;against&lt;/em&gt; its
users these&amp;nbsp;days.&lt;/p&gt;</content><category term="posts"></category></entry><entry><title>Streaming videos from Google Drive: a second attempt</title><link href="https://old.hi.imnhan.com/posts/streaming-videos-from-google-drive-a-second-attempt/" rel="alternate"></link><published>2020-06-10T08:25:00+07:00</published><updated>2020-06-10T08:25:00+07:00</updated><author><name>Bùi Thành Nhân</name></author><id>tag:old.hi.imnhan.com,2020-06-10:/posts/streaming-videos-from-google-drive-a-second-attempt/</id><summary type="html">&lt;p&gt;&lt;strong&gt;&lt;span class="caps"&gt;TL&lt;/span&gt;;&lt;span class="caps"&gt;DR&lt;/span&gt;:&lt;/strong&gt; I improved the Google Drive video streaming experience mentioned in
an &lt;a href="/posts/towards-an-acceptable-video-playing-experience/"&gt;earlier blog post&lt;/a&gt;. It now works like this on an Android phone with
mpv-android&amp;nbsp;installed:&lt;/p&gt;
&lt;video controls&gt;
  &lt;source src="https://junk.imnhan.com/gflick-phone-demo.mp4" type="video/mp4"&gt;
  &lt;a href="https://junk.imnhan.com/gflick-phone-demo.mp4"&gt;
    Video: https://junk.imnhan.com/gflick-phone-demo.mp4
  &lt;/a&gt;
&lt;/video&gt;

&lt;p&gt;The longer version&amp;nbsp;follows.&lt;/p&gt;
&lt;p&gt;&lt;a href="/posts/towards-an-acceptable-video-playing-experience/"&gt;Previously&lt;/a&gt; I was writing a proxy of sorts that adapted Google …&lt;/p&gt;</summary><content type="html">&lt;p&gt;&lt;strong&gt;&lt;span class="caps"&gt;TL&lt;/span&gt;;&lt;span class="caps"&gt;DR&lt;/span&gt;:&lt;/strong&gt; I improved the Google Drive video streaming experience mentioned in
an &lt;a href="/posts/towards-an-acceptable-video-playing-experience/"&gt;earlier blog post&lt;/a&gt;. It now works like this on an Android phone with
mpv-android&amp;nbsp;installed:&lt;/p&gt;
&lt;video controls&gt;
  &lt;source src="https://junk.imnhan.com/gflick-phone-demo.mp4" type="video/mp4"&gt;
  &lt;a href="https://junk.imnhan.com/gflick-phone-demo.mp4"&gt;
    Video: https://junk.imnhan.com/gflick-phone-demo.mp4
  &lt;/a&gt;
&lt;/video&gt;

&lt;p&gt;The longer version&amp;nbsp;follows.&lt;/p&gt;
&lt;p&gt;&lt;a href="/posts/towards-an-acceptable-video-playing-experience/"&gt;Previously&lt;/a&gt; I was writing a proxy of sorts that adapted Google Drive&amp;rsquo;s
&amp;ldquo;bearer token&amp;rdquo; auth to the more widely supported &amp;ldquo;basic auth&amp;rdquo; so I could watch
movies. I was stuck at the point where desktop video players could stream just
fine while their android ports would do&amp;nbsp;nothing.&lt;/p&gt;
&lt;p&gt;Turns out it was a &lt;span class="caps"&gt;TLS&lt;/span&gt; issue: I configured nginx to use TLSv1.3 which is the
latest and greatest, but mpv/vlc on android came bundled with older &lt;span class="caps"&gt;TLS&lt;/span&gt;
libraries which only supported up to v1.2. This led me to another surprise: the
nginx config generated by &lt;a href="https://ssl-config.mozilla.org/#server=nginx&amp;amp;version=1.17.7&amp;amp;config=intermediate&amp;amp;openssl=1.1.1d&amp;amp;guideline=5.4"&gt;Mozilla&amp;rsquo;s &lt;span class="caps"&gt;SSL&lt;/span&gt; Configuration Generator&lt;/a&gt;, while
advertised to support older TLSes (in either &lt;code&gt;Intermediate&lt;/code&gt; or &lt;code&gt;Old&lt;/code&gt; mode),
didn&amp;rsquo;t actually work in practice. &lt;a href="https://www.ssllabs.com/ssltest/"&gt;&lt;span class="caps"&gt;SSL&lt;/span&gt; tests&lt;/a&gt; always reported that the only
working &lt;span class="caps"&gt;SSL&lt;/span&gt;/&lt;span class="caps"&gt;TLS&lt;/span&gt; protocol was&amp;nbsp;TLSv1.3.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;The issue was pinpointed thanks to reading the android device&amp;rsquo;s logcat
output. Did you know that in order to read logcat you only need to install
some &lt;a href="https://pkgs.org/search/?q=android-tools"&gt;8-megabyte package&lt;/a&gt; instead of the whole android studio behemoth? I
do&amp;nbsp;now!&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;As luck would have it, &lt;a href="https://caddyserver.com/v2"&gt;Caddy v2&lt;/a&gt; was recently released and they even
provided a Debian repo! I had used Caddy v1 in the past but my impression was
that despite their pitch of a &amp;ldquo;download and run&amp;rdquo; experience, actual &lt;a href="https://github.com/caddyserver/caddy/tree/v1.0.4/dist/init/linux-systemd"&gt;extra
work&lt;/a&gt; was required - it was straightforward and well-documented, but it was
still extra busywork. This combined with the hassle of having to compile my own
binary bounced me back to nginx. Both of these issues have been addressed in
v2, so there&amp;rsquo;s really no reason to keep wrestling with nginx + certbot&amp;nbsp;anymore.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;On that note, to this day I still haven&amp;rsquo;t figured out how to make the
nginx/certbot combo play nice with ansible. Problem is, certbot&amp;rsquo;s nginx
plugin wants to mutate the nginx config file itself, so the nginx configs
before vs after certbot runs are decidedly different. This requires
ridiculous gymnastics to mold into an ansible play - and don&amp;rsquo;t even get me
started on multi-site setups. A &lt;a href="https://github.com/nhanb/gflick/blob/4dd3dbdbdfe8de66337ed0a2fe420dd0e1d72f39/caddy/gflick"&gt;Caddyfile&lt;/a&gt;, on the other hand, simply
gets out of your&amp;nbsp;way.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Now that &lt;span class="caps"&gt;TLS&lt;/span&gt; is settled, I also made some changes to the usage&amp;nbsp;flow:&lt;/p&gt;
&lt;h3 id="authentication"&gt;Authentication&lt;a class="headerlink" href="#authentication" title="Permanent link"&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;The authentication responsibility has been moved from nginx/caddy to the python
application itself to enable more fine-grained&amp;nbsp;control:&lt;/p&gt;
&lt;p&gt;Every route, except for the video-serving &lt;code&gt;/v/*&lt;/code&gt;, requires a user_token cookie.
If it doesn&amp;rsquo;t exist, redirect to &lt;code&gt;/login&lt;/code&gt;, which will let user submit a
password in order to get the user token back. User token is a 128-byte string
that&amp;rsquo;s regenerated every time the python script restarts. I should probably
write a janitor script to periodically regenerate it&amp;nbsp;instead.&lt;/p&gt;
&lt;p&gt;When user navigates to a video, a unique 128-byte slug is generated just for it
and the video can now be directly streamed at &lt;code&gt;/v/&amp;lt;slug&amp;gt;&lt;/code&gt;, with no
authentication required. Currently slugs older than 1 day are wiped on python
application startup, but then, like user token, I should probably stop relying
on the script restarting to do cleanup&amp;nbsp;operations.&lt;/p&gt;
&lt;p&gt;With this setup I can freely share the &lt;code&gt;/v/&amp;lt;slug&amp;gt;&lt;/code&gt; url to other people without
leaking any auth credentials, and they eventually expire too. There&amp;rsquo;s tuning to
be done for expiration mechanisms but the foundations are&amp;nbsp;there.&lt;/p&gt;
&lt;h3 id="aesthetics"&gt;Aesthetics&lt;a class="headerlink" href="#aesthetics" title="Permanent link"&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;The web interface has been revamped to make it easier for &lt;strike&gt;fat-fingered
people on $current_year&amp;rsquo;s trendy stupidly thin&lt;/strike&gt; phones. Also present
are folder icons and thumbnails, so it finally gives me everything I want from
Google Drive&amp;rsquo;s web &lt;span class="caps"&gt;UI&lt;/span&gt; and nothing that I don&amp;rsquo;t. Fun fact: it works on
&lt;a href="https://www.netsurf-browser.org/"&gt;NetSurf&lt;/a&gt; too (but then again why wouldn&amp;rsquo;t&amp;nbsp;it?).&lt;/p&gt;
&lt;p&gt;&lt;img alt="gflick screenshot" src="/images/gflick_01_mobile.png"&gt;&lt;/p&gt;
&lt;h2 id="whats-the-catch"&gt;What&amp;rsquo;s the catch?&lt;a class="headerlink" href="#whats-the-catch" title="Permanent link"&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;Client device is solely responsible for decoding the raw file.&lt;/strong&gt; This is both
a blessing and a curse: We are guaranteed original quality but if the file was
encoded with newer codecs (h265, av1, etc.) we&amp;rsquo;re stuck with inefficient
software decoding and some devices are just too weak to do so smoothly. My
Amazon Fire &lt;span class="caps"&gt;HD&lt;/span&gt; 10 tablet suffers greatly when playing 1080p 10bit anime.
Curiously, my crappy Mi A3 phone yields better performance, although stutters
still happen here and there. More modest h264 movies play flawlessly, for what
it&amp;rsquo;s&amp;nbsp;worth.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;This is a proof of concept and the codebase quality reflects that.&lt;/strong&gt; I&amp;rsquo;m in
the middle of cleaning it up for pypi friendliness and xdg compliance, but
currently stuck when porting from std&amp;rsquo;s http server to bottlepy. The current
dirty codebase is working fine for me so I&amp;rsquo;m in no hurry&amp;nbsp;though&amp;hellip;&lt;/p&gt;
&lt;h2 id="in-conclusion"&gt;In conclusion&lt;a class="headerlink" href="#in-conclusion" title="Permanent link"&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;I&amp;rsquo;m happy with how things turned out: I have &lt;a href="https://drive.google.com/"&gt;zero-maintenance unlimited cloud
storage&lt;/a&gt; for movies and an effortless streaming experience that requires
virtually no client-side setup - just install a browser and streaming-capable
video player, then everything works out of the box. This is &lt;em&gt;almost&lt;/em&gt; as
convenient as Netflix, but without the stupid quality restriction on
non-sanctioned devices. I probably need to upgrade to a beefier tablet&amp;nbsp;though.&lt;/p&gt;</content><category term="side projects"></category></entry><entry><title>Introducing McRoss—a minimal gemini browser</title><link href="https://old.hi.imnhan.com/posts/introducing-mcross-a-minimal-gemini-browser/" rel="alternate"></link><published>2020-05-29T09:44:00+07:00</published><updated>2020-05-29T09:44:00+07:00</updated><author><name>Bùi Thành Nhân</name></author><id>tag:old.hi.imnhan.com,2020-05-29:/posts/introducing-mcross-a-minimal-gemini-browser/</id><summary type="html">&lt;p&gt;The last couple of months saw the first &amp;ldquo;&lt;span class="caps"&gt;PR&lt;/span&gt;&amp;rdquo; wave of &lt;a href="https://gemini.circumlunar.space/"&gt;the gemini protocol&lt;/a&gt;
on the usual online &lt;a href="https://lobste.rs/s/79pu7o/gemini_protocol_inbetween_gopher_web"&gt;tech&lt;/a&gt;&lt;a href="https://news.ycombinator.com/item?id=23042424"&gt;(bro)&lt;/a&gt; forums. Its pitch is simple: the web
has gone out of hand, gopher is too barebones and insecure by default, here&amp;rsquo;s a
new thing that sits in the&amp;nbsp;middle …&lt;/p&gt;</summary><content type="html">&lt;p&gt;The last couple of months saw the first &amp;ldquo;&lt;span class="caps"&gt;PR&lt;/span&gt;&amp;rdquo; wave of &lt;a href="https://gemini.circumlunar.space/"&gt;the gemini protocol&lt;/a&gt;
on the usual online &lt;a href="https://lobste.rs/s/79pu7o/gemini_protocol_inbetween_gopher_web"&gt;tech&lt;/a&gt;&lt;a href="https://news.ycombinator.com/item?id=23042424"&gt;(bro)&lt;/a&gt; forums. Its pitch is simple: the web
has gone out of hand, gopher is too barebones and insecure by default, here&amp;rsquo;s a
new thing that sits in the&amp;nbsp;middle.&lt;/p&gt;
&lt;p&gt;Personally I&amp;rsquo;m skeptical if this thing will take off any time soon (or ever).
Sure I agree the web is &lt;a href="https://idlewords.com/talks/website_obesity.htm"&gt;comically bloated&lt;/a&gt;, &lt;a href="https://neustadt.fr/essays/against-a-user-hostile-web/"&gt;openly user-hostile&lt;/a&gt;, and
the big players are only &lt;a href="https://developers.google.com/amp"&gt;adding to the problem&lt;/a&gt;, but the fact remains that
the web is the most convenient thing there is, both from a user&amp;rsquo;s and
developer&amp;rsquo;s perspective. Gemini is a fun experiment. It may even be a hit among
&lt;strike&gt;nerds&lt;/strike&gt; power users and the overly privacy-concious, but that&amp;rsquo;s&amp;nbsp;it.&lt;/p&gt;
&lt;p&gt;But then again, I consider myself among the &amp;ldquo;&lt;strike&gt;nerds&lt;/strike&gt; power users
and the overly privacy-concious&amp;rdquo; demographic, so I naturally want to see what
cool stuff people on the gemini-verse are up to. Therefore, I need a gemini
browser. &lt;em&gt;Naturally&lt;/em&gt;, I &lt;a href="https://sr.ht/~nhanb/mcross/"&gt;wrote one&lt;/a&gt;:&lt;/p&gt;
&lt;p&gt;&lt;img alt="McRoss Browser screenshot" src="/images/mcross_01_screenshot.png" title=""&gt;&lt;/p&gt;
&lt;p&gt;At this stage it can browse plaintext and gemini content, but not binary yet.
It also doesn&amp;rsquo;t verify &lt;span class="caps"&gt;TLS&lt;/span&gt; certificates, because turns out &lt;a href="https://todo.sr.ht/~nhanb/mcross/1"&gt;in the gemini
world&lt;/a&gt; it&amp;rsquo;s preferable for browser to use self-signed certs and expect
clients to trust on first use (&lt;span class="caps"&gt;TOFU&lt;/span&gt;), just like how basic &lt;span class="caps"&gt;SSH&lt;/span&gt; works. I haven&amp;rsquo;t
implemented &lt;span class="caps"&gt;TOFU&lt;/span&gt; yet so the browser trusts whatever and is vulnerable to &lt;span class="caps"&gt;MITM&lt;/span&gt;
attacks for every request. It&amp;rsquo;s highly unlikely that anyone would bother to,
but take everything you read with a pinch of salt&amp;nbsp;anyway.&lt;/p&gt;
&lt;p&gt;Why not use one of the existing browsers you ask? Sure enough there are a bunch
of existing browsers, with &lt;a href="https://sr.ht/~julienxx/Castor/"&gt;Castor&lt;/a&gt; appearing to be the furthest along in
development, but it didn&amp;rsquo;t work &lt;em&gt;quite&lt;/em&gt; the way I would like. This made me want
to find out for myself just how hard it is to build a reasonably user-friendly
desktop &lt;span class="caps"&gt;GUI&lt;/span&gt; application. For the rest of this blog post I try to elaborate on
my idea of a &lt;em&gt;user-friendly desktop &lt;span class="caps"&gt;GUI&lt;/span&gt; application&lt;/em&gt;.&lt;/p&gt;
&lt;h3 id="visual-feedback"&gt;Visual feedback:&lt;a class="headerlink" href="#visual-feedback" title="Permanent link"&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;When I click a button, visit a link, or press Enter on the address bar, I
expect some kind of visual feedback that tells me my input registered
correctly, and the browser is working on my request, not hanging. This sounds
ridiculously elementary considering that&amp;rsquo;s how, say, all Windows 95 programs
worked, but here we are two decades and a half later and the Castor browser
just completely freezes the &lt;span class="caps"&gt;GUI&lt;/span&gt; during every network&amp;nbsp;request.&lt;/p&gt;
&lt;p&gt;With McRoss I intentionally put the &lt;span class="caps"&gt;GUI&lt;/span&gt; and I/O event loops in their separate
threads to make sure the program&amp;rsquo;s always responsive. I also paid attention to
small details like the loading cursor and real-time status bar. At no point
should the program hang or crash without displaying a proper&amp;nbsp;message.&lt;/p&gt;
&lt;h3 id="aesthetics"&gt;Aesthetics:&lt;a class="headerlink" href="#aesthetics" title="Permanent link"&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Call me picky but I don&amp;rsquo;t like how in Castor links are presented as buttons and
they don&amp;rsquo;t even have breathing room between&amp;nbsp;them:&lt;/p&gt;
&lt;p&gt;&lt;img alt="Castor links" src="/images/mcross_02_castor.png"&gt;&lt;/p&gt;
&lt;p&gt;Another admittedly petty issue I have is that it&amp;rsquo;s &lt;span class="caps"&gt;GTK&lt;/span&gt; while I&amp;rsquo;m using &lt;span class="caps"&gt;KDE&lt;/span&gt;
Plasma, and although &lt;span class="caps"&gt;KDE&lt;/span&gt; has a compatibility layer that tries to render &lt;span class="caps"&gt;GTK&lt;/span&gt;
widgets as close to &lt;span class="caps"&gt;KDE&lt;/span&gt; counterparts as possible, the result is still&amp;hellip;&amp;nbsp;subpar.&lt;/p&gt;
&lt;p&gt;McRoss on the other hand uses the tk gui toolkit, and as of tk 8.6, it
automatically gives you the native look and feel on Windows and Mac &lt;span class="caps"&gt;OS&lt;/span&gt; (well,
not automatically but it takes trivial work anyway). Linux however doesn&amp;rsquo;t have
such a thing, but the bundled &lt;code&gt;clam&lt;/code&gt; theme looks pleasing enough for me. Yes, I
do think a retro looking theme fares better than the gtk-on-kde look, and its
simple scrollbar looks and, more importantly, &lt;em&gt;works&lt;/em&gt; way better than those
nigh-unclickable abominations that &lt;span class="caps"&gt;KDE&lt;/span&gt; and &lt;span class="caps"&gt;GTK&lt;/span&gt; call their &amp;ldquo;modern scrollbar&amp;rdquo;,
fight&amp;nbsp;me.&lt;/p&gt;
&lt;p&gt;Another explicit design decision in McRoss is that while custom styling is
applied to special lines (heading, list, code block&amp;hellip;), their textual content
is kept the same as source, with the special characters (&lt;code&gt;#&lt;/code&gt;, &lt;code&gt;*&lt;/code&gt;, etc.)
intact. This way when someone has read a gemini page, they already know how to
write one. I lifted this idea off of &lt;a href="https://4chan.org/"&gt;imageboards&lt;/a&gt; and &lt;a href="https://textboard.org/"&gt;textboards&lt;/a&gt;.&lt;/p&gt;
&lt;h3 id="installation"&gt;Installation:&lt;a class="headerlink" href="#installation" title="Permanent link"&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Castor is written in Rust. One of Rust&amp;rsquo;s strong points is the ability to
compile to a single statically linked executable that users can just download
and run. Unfortunately, Castor doesn&amp;rsquo;t currently provide those compiled
executables so users are supposed to install the Rust toolchain then build
Castor themselves. Compiling a gtk-enabled Rust project is&amp;hellip; not a quick&amp;nbsp;affair.&lt;/p&gt;
&lt;p&gt;McRoss is currently packaged as a well-behaved PyPI package and can be
installed with &lt;code&gt;pip3 install mcross&lt;/code&gt;. Its only dependencies are the standard
library and &lt;code&gt;curio&lt;/code&gt; so installation should be super fast. I know I know,
requiring python in the first place is its own can of worms. I do plan to
improve the situation with &amp;ldquo;frozen&amp;rdquo; executables some time down the&amp;nbsp;line.&lt;/p&gt;
&lt;h1 id="closing-thoughts"&gt;Closing thoughts&lt;a class="headerlink" href="#closing-thoughts" title="Permanent link"&gt;#&lt;/a&gt;&lt;/h1&gt;
&lt;p&gt;To me the whole gemini ecosystem represents the long-lost naive optimism of an
earlier web ecosystem. It was not even as far as the &amp;ldquo;good old
gopher/bbs days&amp;rdquo; those boomers keep ranting about - it was the days of early
MMORPGs, of crappy Yahoo! 360 blogs riced up with copy-pasted html/css all over
the place, of numerous Vietnamese warez forums powered by pirated vBulletin
running on shady free shared CPanel hosts, of monthly Drupal/Joomla &lt;span class="caps"&gt;SQL&lt;/span&gt;
injection zero-days. It was truly the wild wild web, insanely accessible,
insanely unsafe, and insanely fun. It was the web where a young clueless
teenage me could find fun random stuff everyday, put fun random stuff out
there for everyone to see, no matter how shitty and unsecure they are, because
it didn&amp;rsquo;t matter if I get pwn&amp;rsquo;d: my life back then wasn&amp;rsquo;t that much dependent
on the&amp;nbsp;web.&lt;/p&gt;
&lt;p&gt;Can I get all that back? I think not. The web, or more broadly, the internet
grew up (to be a nasty adult, but an adult nevertheless), just like anything
where there&amp;rsquo;s enough profit to be made. I&amp;rsquo;m not saying it&amp;rsquo;s a bad thing (hell,
I make a living out of building webstuff), but it is undeniably a sad thing.
Gemini may be a spark that begins a push back against unjustified complexity,
or it may end up being just another niche tech curiosity. I&amp;rsquo;m leaning towards
the latter, but in the meantime, I&amp;rsquo;ll keep peeking at the geminiverse with my
comfy trusty&amp;nbsp;browser.&lt;/p&gt;</content><category term="side projects"></category></entry><entry><title>Towards an acceptable video playing experience</title><link href="https://old.hi.imnhan.com/posts/towards-an-acceptable-video-playing-experience/" rel="alternate"></link><published>2020-04-26T10:06:00+07:00</published><updated>2020-04-26T10:06:00+07:00</updated><author><name>Bùi Thành Nhân</name></author><id>tag:old.hi.imnhan.com,2020-04-26:/posts/towards-an-acceptable-video-playing-experience/</id><summary type="html">&lt;p&gt;I watch movies and &lt;span class="caps"&gt;TV&lt;/span&gt; shows.
Naturally, I have some strong preferences on how to view&amp;nbsp;them:&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;English subtitles&lt;/strong&gt;. Most things I watch are in English.
Although I&amp;rsquo;m perfectly comfortable with face-to-face English conversations, I
just can&amp;rsquo;t keep up with English dialogue in movies.
I also don&amp;rsquo;t …&lt;/p&gt;</summary><content type="html">&lt;p&gt;I watch movies and &lt;span class="caps"&gt;TV&lt;/span&gt; shows.
Naturally, I have some strong preferences on how to view&amp;nbsp;them:&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;English subtitles&lt;/strong&gt;. Most things I watch are in English.
Although I&amp;rsquo;m perfectly comfortable with face-to-face English conversations, I
just can&amp;rsquo;t keep up with English dialogue in movies.
I also don&amp;rsquo;t want to put up with badly translated subs, so English subtitles
they must be. This rules out most Vietnamese&amp;nbsp;&amp;ldquo;netflixes&amp;rdquo;.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;1080p&lt;/strong&gt;, unless it&amp;rsquo;s ancient or super rare&amp;nbsp;stuff.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Streamable from tablets&lt;/strong&gt;. I shouldn&amp;rsquo;t need to turn on my &lt;span class="caps"&gt;PC&lt;/span&gt; just to catch up
on the latest Better Call Saul&amp;nbsp;episode.&lt;/p&gt;
&lt;p&gt;In 2020, there sure are a variety of options available, all of which fall short
in some&amp;nbsp;ways:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Shady ad-infested Vietnamese movie streaming sites (phimmoi etc): Obnoxious
  pop-up tabs aside, they always &lt;a href="https://kipalog.com/posts/Cac-web-phim-da-giam-99-99--chi-phi-bang-google-drive-nhu-the-nao"&gt;abuse Google Drive&lt;/a&gt; (or even Facebook?)
  storage behind the scene. Problem is Google Drive encoding is lossy as hell,
  so even at 1080p they look noticeably worse than the original. Also they
  almost always come with hardcoded Vietnamese&amp;nbsp;subs.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Netflix clones by big ISPs: Pathetic catalogues. Vietnamese&amp;nbsp;subs.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Netflix itself: Actually quite good thanks to usable Android app, but besides
  the increasingly shitty catalogue, it&amp;rsquo;s &lt;a href="https://help.netflix.com/en/node/23742"&gt;impossible to get 1080p from
  Linux&lt;/a&gt;. Also I hate that I can&amp;rsquo;t manually set the video quality: even if
  my current connection gets slow I&amp;rsquo;d rather pause and wait for buffering
  instead of putting up with a pixelated 480p mess. I still have my Netflix
  subscription today, but only&amp;nbsp;grudgingly.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;span class="dquo"&gt;&amp;ldquo;&lt;/span&gt;dude, like, just torrent it&amp;rdquo;. Solid advice since torrents usually come with
  embedded English sub, but it requires actually downloading the thing first,
  and can&amp;rsquo;t easily switch devices without moving the file&amp;nbsp;along.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Setting up a torrent + plex server? That would require (1) ample disk space,
  (2) generous network bandwidth, (3) actual horsepower for transcoding and (4)
  fast enough network access from home or wherever I watch movies&amp;nbsp;from.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;A local &lt;span class="caps"&gt;NAS&lt;/span&gt;-style server satisfies (1), (3) &lt;span class="amp"&gt;&amp;amp;&lt;/span&gt; (4) but struggles with (2),
  and I don&amp;rsquo;t want it to hog my home internet&amp;nbsp;pipes.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Finding a &lt;span class="caps"&gt;VPS&lt;/span&gt; service with (1) &lt;span class="amp"&gt;&amp;amp;&lt;/span&gt; (2) is doable, but (3) gets expensive
  fast and usually they&amp;rsquo;re in the &lt;span class="caps"&gt;US&lt;/span&gt; or &lt;span class="caps"&gt;EU&lt;/span&gt; which can never have (4). I&amp;rsquo;m
  actually running a seedbox on Ramnode but can&amp;rsquo;t run plex on it because of
  lack of (3) and (4). If I&amp;rsquo;m willing to pay more I can get a Hetzner
  dedicated server which can probably do (3) but (4) gets even&amp;nbsp;worse.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="remote-seedbox-google-drive"&gt;Remote seedbox + Google Drive&lt;a class="headerlink" href="#remote-seedbox-google-drive" title="Permanent link"&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;I settled on Netflix and torrented stuff that&amp;rsquo;s not available there.
For the seedbox, I installed Transmission-web on a Ramnode &lt;span class="caps"&gt;VPS&lt;/span&gt; that has &lt;span class="caps"&gt;320GB&lt;/span&gt;
of &lt;span class="caps"&gt;HDD&lt;/span&gt; at $50/year. The network bandwidth is meh but it gets the job&amp;nbsp;done.&lt;/p&gt;
&lt;p&gt;Since Transmission supports hooks via external scripts, I set it up so that
downloaded torrents get uploaded to my Google Drive using &lt;code&gt;rclone&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Now whenever I find something interesting that&amp;rsquo;s not on Netflix, I look for a
working torrent file and tell my seedbox to get it. Thanks to the web interface
I can do it from both my &lt;span class="caps"&gt;PC&lt;/span&gt; and tablet. I don&amp;rsquo;t have to keep my devices running
so it doesn&amp;rsquo;t matter if the torrent is not well-seeded and takes a long&amp;nbsp;time.&lt;/p&gt;
&lt;p&gt;Once the file lands on Google Drive, I can&amp;nbsp;either:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;watch it directly from GDrive&amp;rsquo;s web/Android app if I don&amp;rsquo;t care about
  subtitles or original quality,&amp;nbsp;or&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;download the file first and watch&amp;nbsp;properly&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The latter is not&amp;nbsp;ideal.&lt;/p&gt;
&lt;h2 id="enter-gflick"&gt;Enter gflick&lt;a class="headerlink" href="#enter-gflick" title="Permanent link"&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Turns out advanced video players like &lt;code&gt;mpv&lt;/code&gt; and &lt;code&gt;vlc&lt;/code&gt; can directly stream &lt;span class="caps"&gt;HTTP&lt;/span&gt;
videos with full support for seeking and audio / text(a.k.a subtitles) tracks.
See, well-formed video container formats will have metadata at the beginning of
the file telling where each track lies within the file. The player can download
just the metadata first, then the subtitle track, then the actual video track
starting from a specific position. This is only possible if the http server
supports partial content download &lt;a href="https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Range"&gt;via the &lt;code&gt;Range&lt;/code&gt; header&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Google Drive does have a &amp;ldquo;direct link&amp;rdquo; &lt;span class="caps"&gt;API&lt;/span&gt; in the form of
&lt;code&gt;https://www.googleapis.com/drive/v3/files/&amp;lt;fileId&amp;gt;?alt=media&lt;/code&gt;, which luckily
supports partial download. The bad news is downloading private files requires
authentication via a bearer token. The only &lt;span class="caps"&gt;HTTP&lt;/span&gt; authentication scheme that
these players support, as far as I know, is &lt;a href="https://developer.mozilla.org/en-US/docs/Web/HTTP/Authentication#Basic_authentication_scheme"&gt;Basic auth&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;So I wrote &lt;a href="https://github.com/nhanb/gflick"&gt;gflick&lt;/a&gt;, which is practically an &lt;span class="caps"&gt;HTTP&lt;/span&gt; proxy that does Google
authentication behind the scene, exposing a plain &lt;span class="caps"&gt;HTTP&lt;/span&gt; streaming endpoint so
&lt;code&gt;mpv&lt;/code&gt; and the like can use without&amp;nbsp;modification.&lt;/p&gt;
&lt;p&gt;Here&amp;rsquo;s what it looks like in&amp;nbsp;action:&lt;/p&gt;
&lt;video controls&gt;
  &lt;source src="https://junk.imnhan.com/gflick.mp4" type="video/mp4"&gt;
  &lt;a href="https://junk.imnhan.com/gflick.mp4"&gt;
    Video: https://junk.imnhan.com/gflick.mp4
  &lt;/a&gt;
&lt;/video&gt;

&lt;p&gt;It can run just fine as a local server, but cumbersome and not practical on
tablets, so I put it on a publicly accessible server, protected by nginx which
does &lt;span class="caps"&gt;TLS&lt;/span&gt; and Basic Auth. As mentioned earlier, good video players can do basic
auth out of the box. Gflick also exposes a simple web interface to browse my
Google Drives, so now I can browse my drive on any pc/tablet, and watch things
with full seek, subtitle/audio track support,&amp;nbsp;right?&lt;/p&gt;
&lt;p&gt;Not quite. While desktop versions of these players work fine, their Android
versions won&amp;rsquo;t play it. Now I regret selling my Surface Go!&amp;nbsp;:(&lt;/p&gt;
&lt;p&gt;And&amp;hellip; that&amp;rsquo;s where I&amp;rsquo;m stuck at the moment. Not sure if I should buy one of
those Chinese Surface knock-offs or&amp;nbsp;what.&lt;/p&gt;
&lt;h2 id="other-failed-attempts"&gt;Other failed attempts&lt;a class="headerlink" href="#other-failed-attempts" title="Permanent link"&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/nhanb/mpv-gdrive"&gt;mpv-gdrive&lt;/a&gt;: Using mpv&amp;rsquo;s lua scripting &lt;span class="caps"&gt;API&lt;/span&gt; to automatically set the
  correct bearer auth headers. Worked fine on desktop, failed miserably on&amp;nbsp;android.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/nhanb/drivein"&gt;drivein&lt;/a&gt;: Uses &lt;code&gt;rclone mount&lt;/code&gt;. Worked fine on desktop, android wouldn&amp;rsquo;t
  allow mounting without&amp;nbsp;root.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Also both of those required setting up each client device. Not&amp;nbsp;ideal.&lt;/p&gt;
&lt;h3 id="update-june-10-2020"&gt;Update June 10, 2020&lt;a class="headerlink" href="#update-june-10-2020" title="Permanent link"&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;The sequel is out: &lt;a href="/posts/streaming-videos-from-google-drive-a-second-attempt/"&gt;Streaming videos from Google Drive - a second&amp;nbsp;attempt&lt;/a&gt;&lt;/p&gt;</content><category term="side projects"></category></entry><entry><title>I did NOT sign that online petition!</title><link href="https://old.hi.imnhan.com/posts/i-did-not-sign-that-rmit-sc-petition/" rel="alternate"></link><published>2016-03-12T01:13:00+07:00</published><updated>2016-03-12T01:13:00+07:00</updated><author><name>Bùi Thành Nhân</name></author><id>tag:old.hi.imnhan.com,2016-03-12:/posts/i-did-not-sign-that-rmit-sc-petition/</id><summary type="html">&lt;p&gt;This evening I received a rather strange&amp;nbsp;email:&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="/images/rmitsc_01_wtf.png"&gt;&lt;/p&gt;
&lt;p&gt;Um&amp;hellip; I don&amp;rsquo;t remember signing any petition recently (or ever, for that&amp;nbsp;matter)?&lt;/p&gt;
&lt;h2 id="what-happened"&gt;What happened?&lt;a class="headerlink" href="#what-happened" title="Permanent link"&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Apparently someone used my &lt;span class="caps"&gt;RMIT&lt;/span&gt; student email address to sign some petition for disbanding the
university&amp;rsquo;s Student Council. Said petition was apparently started by some …&lt;/p&gt;</summary><content type="html">&lt;p&gt;This evening I received a rather strange&amp;nbsp;email:&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="/images/rmitsc_01_wtf.png"&gt;&lt;/p&gt;
&lt;p&gt;Um&amp;hellip; I don&amp;rsquo;t remember signing any petition recently (or ever, for that&amp;nbsp;matter)?&lt;/p&gt;
&lt;h2 id="what-happened"&gt;What happened?&lt;a class="headerlink" href="#what-happened" title="Permanent link"&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Apparently someone used my &lt;span class="caps"&gt;RMIT&lt;/span&gt; student email address to sign some petition for disbanding the
university&amp;rsquo;s Student Council. Said petition was apparently started by some Ms. Trần Ngọc Tuệ Mẫn -
Student Council&amp;rsquo;s vice president. Well&amp;hellip; yay for free speech, I guess? Anyway, my name was really
among the signers&amp;nbsp;list:&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="/images/rmitsc_02_names.png"&gt;&lt;/p&gt;
&lt;p&gt;How did this happen? Well, turns out &lt;strong&gt;iPetition does not require email confirmation upon
signing&lt;/strong&gt;, so anyone can effectively enter any email and name they want and the stupid website will
happily accept that as an absolutely definitely most positively legit supporter of your cause. Cool&amp;nbsp;huh?&lt;/p&gt;
&lt;p&gt;Upon further inspection, almost all of the signer names are in one same format: the one that &lt;span class="caps"&gt;RMIT&lt;/span&gt;
uses for its student names. So apparently a very motivated supporter of Ms. Mẫn&amp;rsquo;s&amp;hellip; interesting
campaign has been helpful enough to go through &lt;span class="caps"&gt;RMIT&lt;/span&gt; students&amp;rsquo; IDs and names and sign us up, without
us even having to know what it&amp;rsquo;s all about. Gee,&amp;nbsp;thanks!&lt;/p&gt;
&lt;h2 id="why-do-i-even-care"&gt;Why do I even care?&lt;a class="headerlink" href="#why-do-i-even-care" title="Permanent link"&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;I just don&amp;rsquo;t like people using my name without my consent. More importantly, I have my reasons to
disagree with the sentiments expressed in her petition description. Also I thought this could be a
somewhat useful public service announcement, or a mildly entertaining daily wtf story. I don&amp;rsquo;t&amp;nbsp;know.&lt;/p&gt;
&lt;p&gt;Hell, let&amp;rsquo;s throw in some of my own random thoughts to make this more like a blog&amp;nbsp;post:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;What&amp;rsquo;s with these petition websites? Have people actually achieved anything using these? Even if
  a petition website does send confirmation emails, what&amp;rsquo;s stopping me from using trash addresses?
  The signers&amp;rsquo; email addresses are not displayed anyway so president@rmit.edu.vn won&amp;rsquo;t be too
  different from lol0042@spam.me now, will it? If you&amp;rsquo;re an official co-leader of something
  official who wants to do something official about it, maybe try a more, I don&amp;rsquo;t know, official&amp;nbsp;channel?&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The number of signers keep going up steadily, but slowly. Maybe our friendly neighborhood
  signerman is doing it all by hand instead of a script? If it&amp;rsquo;s the former&amp;hellip; let&amp;rsquo;s say I do
  admire the dedication &lt;strike&gt;and abhor the absolute stupidity&lt;/strike&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Is it normal for a student council to be this full of&amp;nbsp;drama?&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;That concludes my mostly pointless blog post. Hopefully I&amp;rsquo;ll come up with something actually worth
sharing soon. Until then, have an awesome&amp;nbsp;weekend!&lt;/p&gt;</content><category term="posts"></category></entry><entry><title>My first DIY fightstick: Part 2</title><link href="https://old.hi.imnhan.com/posts/my-first-diy-fightstick-part-2/" rel="alternate"></link><published>2016-01-23T17:10:00+07:00</published><updated>2016-01-23T17:10:00+07:00</updated><author><name>Bùi Thành Nhân</name></author><id>tag:old.hi.imnhan.com,2016-01-23:/posts/my-first-diy-fightstick-part-2/</id><summary type="html">&lt;p&gt;It&amp;rsquo;s been a while since I &lt;a href="https://old.hi.imnhan.com/posts/my-first-diy-fightstick-part-1/"&gt;started&lt;/a&gt; my arcade stick project. To be honest I got lazy and paused
the whole thing for a while, but yesterday I needed a distraction so&amp;hellip; everything came together
much more nicely than I&amp;nbsp;thought!&lt;/p&gt;
&lt;h2 id="i-did-it"&gt;I did it!&lt;a class="headerlink" href="#i-did-it" title="Permanent link"&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;I was almost done in …&lt;/p&gt;</summary><content type="html">&lt;p&gt;It&amp;rsquo;s been a while since I &lt;a href="https://old.hi.imnhan.com/posts/my-first-diy-fightstick-part-1/"&gt;started&lt;/a&gt; my arcade stick project. To be honest I got lazy and paused
the whole thing for a while, but yesterday I needed a distraction so&amp;hellip; everything came together
much more nicely than I&amp;nbsp;thought!&lt;/p&gt;
&lt;h2 id="i-did-it"&gt;I did it!&lt;a class="headerlink" href="#i-did-it" title="Permanent link"&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;I was almost done in Part 1, except for the fact that button holes on the top panels didn&amp;rsquo;t align,
and the topmost panel flexed a bit because of imprecise screw&amp;nbsp;holes:&lt;/p&gt;
&lt;p&gt;&lt;img alt="Ewww" src="/images/fightstick_24_gap.jpg"&gt;&lt;/p&gt;
&lt;p&gt;To fix the button holes, I simply wrapped my roughest sandpaper around the drill bit and used it as
a poor man&amp;rsquo;s sander to make the holes slightly bigger, just enough for buttons to fit. This took a
while because the sandpaper pieces kept failing on me. Good thing I stock a huge roll in the first
place!&amp;nbsp;:-)&lt;/p&gt;
&lt;p&gt;The flexing panel was surprisingly trivial to fix: I simply made one corner&amp;rsquo;s hole a bit bigger to
allow its screw to go all the way in properly. No more stupid&amp;nbsp;gaps!&lt;/p&gt;
&lt;p&gt;Now that every piece was how it should be, the fun part began: assembling. The inside looked like&amp;nbsp;this:&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="/images/fightstick2_01_wires.jpg"&gt;&lt;/p&gt;
&lt;p&gt;Notice the knot where the &lt;span class="caps"&gt;USB&lt;/span&gt; cable poked out? It was there as a safeguard against pulling so that
the &lt;span class="caps"&gt;PCB&lt;/span&gt; doesn&amp;rsquo;t get yanked around. Later on I actually labeled every pair of wires for each button
and secured the &lt;span class="caps"&gt;PCB&lt;/span&gt; better with more resilient tape, but I forgot to take photos and I&amp;rsquo;m now too
lazy to open up the whole thing again so&amp;hellip; you get the&amp;nbsp;idea.&lt;/p&gt;
&lt;p&gt;As for the top panel artwork, I planned quite a few colored designs, but was too lazy to go to a
printing shop. As luck would have it, I had a black and white printer at home, so I grabbed some
random Galford image on the internet and printed out one sheet just to see how it would look. It
turned out much better than expected so I kept it that&amp;nbsp;way.&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="/images/fightstick2_02_top.jpg"&gt;&lt;/p&gt;
&lt;p&gt;Note that I bought translucent buttons. These are worth the higher price tag because it is possible
to take them apart and &lt;a href="http://forums.shoryuken.com/discussion/25926/guide-how-to-put-art-under-clear-seimitsu-buttons"&gt;insert artwork pieces&lt;/a&gt; under the cover. Just google custom fightsticks
and you&amp;rsquo;ll find people making use of these buttons with &lt;a href="http://static.giantbomb.com/uploads/original/2/25628/2658140-photo+oct+04,+7+24+53+pm.jpg"&gt;stunning&lt;/a&gt; &lt;a href="http://technabob.com/blog/wp-content/uploads/2011/09/custom-steampunk-fight-stick-by-sam-kurd-aka-b15sdm-designs.jpg"&gt;results&lt;/a&gt;. But then again,
I&amp;rsquo;m a lazy butt so my minimalistic design actually saved me from some tedious button modding.
Maybe when I get better inspirations,&amp;nbsp;maybe.&lt;/p&gt;
&lt;p&gt;Following the monochrome theme, the placeholder &amp;ldquo;Ken Flowchart&amp;rdquo; bottom piece from last post became
official (I also trimmed the excess paper&amp;nbsp;later):&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="/images/fightstick_23_bottom.jpg"&gt;&lt;/p&gt;
&lt;p&gt;Oh, and here&amp;rsquo;s a front shot for completeness&amp;rsquo;&amp;nbsp;sake:&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="/images/fightstick2_03_front.jpg"&gt;&lt;/p&gt;
&lt;h2 id="thoughts"&gt;Thoughts&lt;a class="headerlink" href="#thoughts" title="Permanent link"&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;All in all, this turned out much better than I expected. The whole thing feels solid to play with,
and the plexiglass top panel makes a nice feeling palm rest. However, since I went a bit liberal on
panel layers, it&amp;rsquo;s a tad heavier than my previous stick (which is already heavier than your average
big brand sticks). On the flip side, I can be more aggressive with my joystick spinning sessions
thanks to the extra&amp;nbsp;weight.&lt;/p&gt;
&lt;p&gt;I&amp;rsquo;m also thinking of adding non-slip padding to the bottom. I almost exclusively play with the
fightstick on my lap so it&amp;rsquo;s not actually necessary gameplay-wise, but without padding, the bottom
screw heads stick out and would definitely scratch my table whenever I place the stick on it.
Better be safe than&amp;nbsp;sorry!&lt;/p&gt;
&lt;p&gt;That&amp;rsquo;s it! This project has been fun, and to me it served as an awesome gateway drug to the &lt;span class="caps"&gt;DIY&lt;/span&gt;
world. Hopefully I inspired some of you to start your own projects too. Let me know how it&amp;nbsp;goes!&lt;/p&gt;</content><category term="posts"></category></entry><entry><title>My first DIY fightstick: Part 1</title><link href="https://old.hi.imnhan.com/posts/my-first-diy-fightstick-part-1/" rel="alternate"></link><published>2015-12-08T12:50:00+07:00</published><updated>2015-12-08T12:50:00+07:00</updated><author><name>Bùi Thành Nhân</name></author><id>tag:old.hi.imnhan.com,2015-12-08:/posts/my-first-diy-fightstick-part-1/</id><summary type="html">&lt;p&gt;Ever since I started practicing Street Fighter seriously (albeit with modest results), I&amp;rsquo;ve
always wanted to make myself a custom fightstick. Now that I&amp;rsquo;m not working full-time for anyone,
there&amp;rsquo;s no better time to Just Do&amp;nbsp;It.&lt;/p&gt;
&lt;p&gt;If you&amp;rsquo;ve done any research on &lt;span class="caps"&gt;DIY&lt;/span&gt; fightsticks, you …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Ever since I started practicing Street Fighter seriously (albeit with modest results), I&amp;rsquo;ve
always wanted to make myself a custom fightstick. Now that I&amp;rsquo;m not working full-time for anyone,
there&amp;rsquo;s no better time to Just Do&amp;nbsp;It.&lt;/p&gt;
&lt;p&gt;If you&amp;rsquo;ve done any research on &lt;span class="caps"&gt;DIY&lt;/span&gt; fightsticks, you&amp;rsquo;ll know that the 2 best places to find guides
are &lt;a href="http://www.slagcoin.com/"&gt;Slagcoin&lt;/a&gt; and &lt;a href="http://forums.shoryuken.com/categories/tech-talk"&gt;Shoryuken Tech Talk&lt;/a&gt;. I decided to follow the &lt;a href="http://www.slagcoin.com/joystick/example2.html"&gt;basic
design&lt;/a&gt; on&amp;nbsp;Slagcoin:&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="http://www.slagcoin.com/joystick/example2/simple1.jpg"&gt;&lt;/p&gt;
&lt;h2 id="materials-and-tools"&gt;Materials and tools&lt;a class="headerlink" href="#materials-and-tools" title="Permanent link"&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;If you live in Hồ Chí Minh City like me, you can probably get everything you need from shops on
Bạch Đằng Street. The only hard part for me was convincing a small wood shop to sell &lt;span class="caps"&gt;MDF&lt;/span&gt; panels cut
to my specifications in small&amp;nbsp;quantity:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;4 pieces x 30cm x 20cm x 1cm&amp;nbsp;*&lt;/li&gt;
&lt;li&gt;2 pieces x 20cm x 4cm x&amp;nbsp;2cm&lt;/li&gt;
&lt;li&gt;2 pieces x 20cm x 7cm x&amp;nbsp;2cm&lt;/li&gt;
&lt;li&gt;1 piece x 26cm x 4cm x&amp;nbsp;2cm&lt;/li&gt;
&lt;li&gt;4 pieces x 34cm x 7cm x 2cm&amp;nbsp;*&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;All that set me back 120,000 &lt;span class="caps"&gt;VND&lt;/span&gt;. The cost was mostly for cutting labor instead of actual material.
The items with asterisks (*) are those I bought in abundance to make room for drilling&amp;nbsp;errors.&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="/images/fightstick_01_mdf.jpg"&gt;&lt;/p&gt;
&lt;p&gt;The top panel would be layered with 1 &lt;span class="caps"&gt;MDF&lt;/span&gt; and 2 plexiglass pieces (mad illustrating skillz, I&amp;nbsp;know):&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="/images/fightstick_02_top_plan.jpg"&gt;&lt;/p&gt;
&lt;p&gt;The bottom would simply be 1 &lt;span class="caps"&gt;MDF&lt;/span&gt; and 1 plexiglass so I could also insert bottom&amp;nbsp;artwork.&lt;/p&gt;
&lt;p&gt;Since I had zero woodworking experience, I joined the &lt;span class="caps"&gt;MDF&lt;/span&gt; pieces with simple butt joints and good
old wood glue. You&amp;rsquo;ll notice that there&amp;rsquo;s a significant gap on one corner - turns out the shop
wasn&amp;rsquo;t too accurate with their cutting. It&amp;rsquo;s not shown here but eventually I had to saw a longer
&lt;span class="caps"&gt;MDF&lt;/span&gt; piece to replace&amp;nbsp;it.&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="/images/fightstick_03_glue.jpg"&gt;&lt;/p&gt;
&lt;p&gt;I already had a hand drill laying around so all it took was buying a couple of hole saws - 24mm and
30mm in diameter respectively. The bigger one was used for drilling main button holes while the
other was for joystick hole and smaller front side&amp;nbsp;buttons.&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="/images/fightstick_04_hole_saw.jpg"&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Don&amp;rsquo;t buy&lt;/strong&gt; hole saws like the one below - you will not be able to drill through thick panels
(like the 20mm thick one I&amp;nbsp;bought):&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="/images/fightstick_05_nope_saw.jpg"&gt;&lt;/p&gt;
&lt;p&gt;As for the actual parts, I ordered the joystick and buttons from &lt;a href="https://www.akishop.jp/"&gt;Akishop&lt;/a&gt;. It ships from
Japan so the shipping cost to Vietnam is much more reasonable than if I buy from the &lt;span class="caps"&gt;US&lt;/span&gt;. I also
bought a &lt;a href="http://www.ebay.com/itm/Zero-Delay-USB-Encoder-to-PC-Joystick-For-Arcade-DIY-KIT-Sanwa-Parts-MAME-/191558265304?hash=item2c99c329d8#shpCntId"&gt;Zero Delay &lt;span class="caps"&gt;PCB&lt;/span&gt; kit&lt;/a&gt; from ebay. This one even offers free shipping since it&amp;rsquo;s from
China. This kit offers easy solder-free wires too so it saved me from a lot of trouble (I still
can&amp;rsquo;t find where to quick-disconnect terminals to this date). I connected everything to my &lt;span class="caps"&gt;PC&lt;/span&gt; to
test if things worked as&amp;nbsp;expected:&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="/images/fightstick_26_electronics.jpg"&gt;&lt;/p&gt;
&lt;p&gt;Quick note: the popular wisdom is to buy screw-in buttons for thick panels and scap-in for thin
ones. However, as my panel is &lt;em&gt;way&lt;/em&gt; too thick even for screw-ins, snap-ins are actually the better
choice: you just need to put the buttons in normally - the 2 sides of the button will push against
the hole and keep it there fairly firmly. I never had a problem with my previous stick which was
build this&amp;nbsp;way.&lt;/p&gt;
&lt;h2 id="actually-making-it"&gt;Actually making it&lt;a class="headerlink" href="#actually-making-it" title="Permanent link"&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;I drilled holes in the front side: first using the 30mm bit to drill halfway, then went all the way
with the 24mm bit. This allows a small button to be placed deep into the case, avoiding
accidentally button&amp;nbsp;presses.&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="/images/fightstick_06_front_holes.jpg"&gt;&lt;/p&gt;
&lt;p&gt;Then I glued the case body together. I didn&amp;rsquo;t have big clamps laying around so I had to make do
with an elastic string. It worked terribly&amp;nbsp;though.&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="/images/fightstick_07_glue_body.jpg"&gt;&lt;/p&gt;
&lt;p&gt;Note that the bottom panel was just there to keep the whole thing in shape. I took it out&amp;nbsp;later:&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="/images/fightstick_08_glue_body2.jpg"&gt;&lt;/p&gt;
&lt;p&gt;See the gap in the top left corner? That&amp;rsquo;s the gap I was talking about earlier. Good thing I had a
spare piece laying around, so I sawed it to the correct length to use as a&amp;nbsp;replacement:&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="/images/fightstick_09_saw_side.jpg"&gt;&lt;/p&gt;
&lt;p&gt;Now everything fitted together but there was some excess on one long side. Much sanding&amp;nbsp;awaits!&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="/images/fightstick_10_excess.jpg"&gt;&lt;/p&gt;
&lt;p&gt;Initial sanding effort with 140 grit&amp;nbsp;sandpaper:&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="/images/fightstick_11_sanded.jpg"&gt;&lt;/p&gt;
&lt;p&gt;By the way, I recommend using a sanding block. It helps you apply more pressure evenly. I simply
wrapped my sandpaper around a spare piece of &lt;span class="caps"&gt;MDF&lt;/span&gt;:&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="/images/fightstick_12_sanding_block.jpg"&gt;&lt;/p&gt;
&lt;p&gt;Now on to the inner sides. These would support the top and bottom panels. I used a long piece of
scrap plexiglass to apply pressure instead of a clamp. This time I put one 10mm-thick wood panel
and one 3mm-thick plexiglass panel under it to make sure the inner supports are glued at the
correct&amp;nbsp;position.&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="/images/fightstick_13_inner_support.jpg"&gt;&lt;/p&gt;
&lt;p&gt;With all 3 inner sides&amp;nbsp;glued:&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="/images/fightstick_14_inner_support2.jpg"&gt;&lt;/p&gt;
&lt;p&gt;Now you must be wondering why I had 2 inner pieces on the left side. I originally wanted to save
some space and weight by sawing those into shorter support bits instead of long whole pieces that
covered the full length. After sawing the first piece I decided that it wasn&amp;rsquo;t worth the effort
anyway so&amp;hellip; there you have&amp;nbsp;it.&lt;/p&gt;
&lt;p&gt;Here comes the next challenge: putting paint on the &lt;span class="caps"&gt;MDF&lt;/span&gt;. There is an &lt;a href="http://forums.shoryuken.com/discussion/67501/how-to-paint-mdf-to-a-mirror-finish-worklog"&gt;extremely elaborate
method&lt;/a&gt; explained on Shoryuken Tech Talk that helps you achieve a mirror-like glossy
finish. Of course I don&amp;rsquo;t have the tools and patience to follow all that, but I followed the first
few steps (cover edges with non-absorbent material, sand and spray paint multiple times) to achieve
an acceptably smooth&amp;nbsp;finish.&lt;/p&gt;
&lt;p&gt;Here&amp;rsquo;s the first step: cover edges with non-absorbent material. The tutorial suggested using
spackling, which I have no idea how to obtain from here. I settled with something Vietnamese people
&amp;ldquo;matic&amp;rdquo; (mastic, perhaps?) which my friends said was to be used for the same purpose. The thing was
yellow-ish and much more runny than spackling. It was also difficult as hell to work with: the
moment it&amp;rsquo;s spread on the &lt;span class="caps"&gt;MDF&lt;/span&gt; edge, it starts drying, at which point you can&amp;rsquo;t touch it again
unless you want an ugly grungy finish (is that even a&amp;nbsp;word?):&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="/images/fightstick_15_mastic.jpg"&gt;&lt;/p&gt;
&lt;p&gt;I waited for the yellow thing to dry, then sanded it again. After a first few coats with glossy
black spray paint, things didn&amp;rsquo;t look too&amp;nbsp;sexy:&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="/images/fightstick_16_first_coat.jpg"&gt;&lt;/p&gt;
&lt;p&gt;It did get better with sanding (1200 grit) and more coats though. But then I made the most stupid
decision: glueing the top panel on before&amp;nbsp;drilling:&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="/images/fightstick_17_top_panel.jpg"&gt;&lt;/p&gt;
&lt;p&gt;Now why was this bad? Because now I would be forced to drill top panel holes &lt;em&gt;with&lt;/em&gt; the whole body
attached, which will expose the whole thing to sawdust, which was generally &lt;span class="caps"&gt;PITA&lt;/span&gt; to clean up - the
top panel made it a closed shape with corners and spaces all over the place. Also, if I screwed up
the top &lt;span class="caps"&gt;MDF&lt;/span&gt; panel (which I eventually kinda did), the whole thing would be&amp;nbsp;ruined.&lt;/p&gt;
&lt;p&gt;As if that wasn&amp;rsquo;t enough, I did paint it too. The paint layer would later make disgusting drill&amp;nbsp;holes:&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="/images/fightstick_18_joystick_hole.jpg"&gt;&lt;/p&gt;
&lt;p&gt;But I&amp;rsquo;m getting ahead of myself. Here&amp;rsquo;s how the case looked after a few more black coats and one
clear coat (also put buttons in there to see how they&amp;nbsp;fit):&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="/images/fightstick_19_finished_coat.jpg"&gt;&lt;/p&gt;
&lt;p&gt;I did drill an extra button hole because I realized I&amp;rsquo;d need the &amp;ldquo;Playstation&amp;rdquo; button too if I want
to use a &lt;span class="caps"&gt;PS4&lt;/span&gt; controller &lt;span class="caps"&gt;PCB&lt;/span&gt; later (which I plan to do). Unfortunately I only ordered 2 small
buttons from Akishop so I had to use a green Chinese button I had laying&amp;nbsp;around.&lt;/p&gt;
&lt;p&gt;Now here comes the hard part: drilling the top panel. As mentioned earlier, the top panel would be&amp;nbsp;3-layer:&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="/images/fightstick_02_top_plan.jpg"&gt;&lt;/p&gt;
&lt;p&gt;I placed all 3 pieces onto the case, but with the 4mm plexiglass on top (in the plan it&amp;rsquo;s supposed
to be in the middle - I&amp;rsquo;ll explain later). Then I printed the Blast City button layout found on
Slagcoin and taped it onto the whole&amp;nbsp;thing:&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="/images/fightstick_20_top_layout.jpg"&gt;&lt;/p&gt;
&lt;p&gt;Notice the extra two holes I drew above and below the joystick hole. Those are for screw holes for
mounting the joystick. This is why I put the 4mm piece on top: I was going to drill these two holes
on the 4mm piece only to leave room for screw heads. This way I didn&amp;rsquo;t need to &amp;ldquo;route&amp;rdquo; the extra 2
holes on my &lt;span class="caps"&gt;MDF&lt;/span&gt; piece like the original plan (I was afraid the 10mm &lt;span class="caps"&gt;MDF&lt;/span&gt; thickness was already too&amp;nbsp;thin).&lt;/p&gt;
&lt;p&gt;After drilling the necessary holes, I removed the plexiglass pieces and drilled the aformentioned 2
joystick mounting holes into to &lt;span class="caps"&gt;MDF&lt;/span&gt;, then I placed the joystick mounting plate onto the surface to
plot the rectangular part that needed to be cut&amp;nbsp;off:&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="/images/fightstick_21_joystick_square.jpg"&gt;&lt;/p&gt;
&lt;p&gt;Since I don&amp;rsquo;t have any power tool, I used my handy hand drill with the circular hole saw to
gradually drill out the&amp;nbsp;shape:&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="/images/fightstick_22_joystick_drills.jpg"&gt;&lt;/p&gt;
&lt;p&gt;After much sanding and&amp;nbsp;cleaning:&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="/images/fightstick_18_joystick_hole.jpg"&gt;&lt;/p&gt;
&lt;p&gt;See the glorious tears? That&amp;rsquo;s what premature painting does to you. Friends don&amp;rsquo;t let friends paint&amp;nbsp;prematurely!&lt;/p&gt;
&lt;p&gt;Anyway, I also drilled 3 hole on the bottom to install the bottom pieces (1 &lt;span class="caps"&gt;MDF&lt;/span&gt; &lt;span class="amp"&gt;&amp;amp;&lt;/span&gt; 1 plexiglass). I
also printed a quick picture as a placeholder artwork to see how it would&amp;nbsp;look:&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="/images/fightstick_23_bottom.jpg"&gt;&lt;/p&gt;
&lt;p&gt;As I was excited to finish the putting the top panel together, I hit a wall: because I couldn&amp;rsquo;t
possibly drill perfectly perpendicular screw holes, they could not property&amp;nbsp;attach:&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="/images/fightstick_25_loose_screw.jpg"&gt;&lt;/p&gt;
&lt;p&gt;Also, thanks to the switching positions between the two plexiglass pieces, the button holes didn&amp;rsquo;t
align anymore. I had to waste a buttload of time sanding the lower piece&amp;rsquo;s holes to make them&amp;nbsp;bigger.&lt;/p&gt;
&lt;p&gt;But that&amp;rsquo;s not even the worst issue: because the screw holes were not aligned, once I screwed all
four corners, the top plexiglass piece flexed, creating a blatantly noticeable&amp;nbsp;gap:&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="/images/fightstick_24_gap.jpg"&gt;&lt;/p&gt;
&lt;h2 id="um-thats-it-for-now"&gt;Um&amp;hellip; that&amp;rsquo;s it (for now).&lt;a class="headerlink" href="#um-thats-it-for-now" title="Permanent link"&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;That&amp;rsquo;s all of my progress so far. I&amp;rsquo;m visiting my &lt;a href="http://fablabsaigon.org/"&gt;local Fablab&lt;/a&gt;, which is advertised to
have &lt;span class="caps"&gt;CNC&lt;/span&gt; machines and laser cutters so I&amp;rsquo;ll probably have a chance to produce more accurate panels.
Hell, I may even redo the whole thing using machine-cut pieces for absolute accuracy and save
myself from a world of&amp;nbsp;pain.&lt;/p&gt;
&lt;p&gt;I took a lot of photos as I went, so if you want to see more photos of my progress, just check out
my &lt;a href="https://www.flickr.com/photos/nhanb/albums/72157661059385592"&gt;flickr album&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Till next&amp;nbsp;time!&lt;/p&gt;</content><category term="posts"></category></entry><entry><title>Look ma, no stock theme!</title><link href="https://old.hi.imnhan.com/posts/look-ma-no-stock-theme/" rel="alternate"></link><published>2015-06-05T13:54:00+07:00</published><updated>2015-06-05T13:54:00+07:00</updated><author><name>Bùi Thành Nhân</name></author><id>tag:old.hi.imnhan.com,2015-06-05:/posts/look-ma-no-stock-theme/</id><summary type="html">&lt;p&gt;&lt;strong&gt;2023 Update&lt;/strong&gt;: I just realized that em dashes in certain default sans-serif
fonts look terrible (no space around the dash), so I now explicitly use Source
Sans Pro and Ubuntu Mono. Using specific fonts allow me to fine-tune my
typography again (e.g. making code block text a bit&amp;nbsp;smaller …&lt;/p&gt;</summary><content type="html">&lt;p&gt;&lt;strong&gt;2023 Update&lt;/strong&gt;: I just realized that em dashes in certain default sans-serif
fonts look terrible (no space around the dash), so I now explicitly use Source
Sans Pro and Ubuntu Mono. Using specific fonts allow me to fine-tune my
typography again (e.g. making code block text a bit&amp;nbsp;smaller).&lt;/p&gt;
&lt;p&gt;The extra http load is not that bad: each woff2 font variant averages at &lt;span class="caps"&gt;50KB&lt;/span&gt;,
and is only loaded if a page&amp;rsquo;s content actually calls for it. A particularly
&lt;a href="http://localhost:8000/posts/working-with-sqlite-in-python-without-an-orm-or-migration-framework/"&gt;bad case&lt;/a&gt; loads 6 variants, clocking in at ~&lt;span class="caps"&gt;300KB&lt;/span&gt;. I can live with&amp;nbsp;that.&lt;/p&gt;
&lt;p&gt;I also took this chance to go full black-on-white, which I think looks way
crisper than&amp;nbsp;black-on-cornsilk.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;2020 Update&lt;/strong&gt;: I bit the bullet and removed all web fonts, relying on the
browser&amp;rsquo;s configured sans-serif/monospace fonts instead. It&amp;rsquo;s probably fine,
since even stock fonts seem to cover Vietnamese glyphs well these days.
Otherwise, people who care enough to be bothered by fallback fonts are likely
to know how to configure their browser with proper fonts&amp;nbsp;anyway.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;2017 Update&lt;/strong&gt;: Now that I like high contrast more, I just updated the
theme to a black/white/red palette with a &lt;a href="https://github.com/adobe-fonts/source-serif-pro"&gt;high-quality serif font&lt;/a&gt;
instead. Thanks &lt;a href="https://practicaltypography.com/"&gt;Mr. Butterick&lt;/a&gt;!&lt;/p&gt;
&lt;p&gt;The original post&amp;nbsp;follows.&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;I just redesigned my&amp;nbsp;blog.&lt;/p&gt;
&lt;p&gt;To be totally honest, the previous design was not mine at all. I&amp;rsquo;ve always been using
&lt;a href="https://github.com/duilio/pelican-octopress-theme/"&gt;pelican-octopress-theme&lt;/a&gt;, which is a Pelican port of the default theme for Octopress. It&amp;rsquo;s not
that I have anything to complain about that theme: it was clean, readable and easy on the eyes. I
just want my site to look unique. Content is king, sure, but it wouldn&amp;rsquo;t hurt to stand out from the
crowd once in a&amp;nbsp;while.&lt;/p&gt;
&lt;p&gt;I&amp;rsquo;m not a professional designer, but everything turned out quite well if I could say so. In this
post I&amp;rsquo;ll explain my design goals and how I (hopefully) achieved&amp;nbsp;them.&lt;/p&gt;
&lt;h2 id="clean-and-lightweight"&gt;Clean and lightweight&lt;a class="headerlink" href="#clean-and-lightweight" title="Permanent link"&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;The web is messy. I&amp;rsquo;m not talking blinking-marquee-fire-animated-header messy (thank god we&amp;rsquo;re done
with that&amp;hellip; &lt;a href="https://developers.google.com/fonts/docs/getting_started#Effects"&gt;or are we?&lt;/a&gt;). I&amp;rsquo;m talking megabytes-of-useless-javascript-and-css messy. For
whatever reason, some people now think it&amp;rsquo;s cool to include Bootstrap/Foundation to every project,
or to include that new shiny parallax library to ruin scrolling for everybody. Oh, and don&amp;rsquo;t forget
the marvellous invention that is &lt;a href="https://xkcd.com/1309/"&gt;&amp;ldquo;infinite scrolling&amp;rdquo;&lt;/a&gt;:&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="https://imgs.xkcd.com/comics/infinite_scrolling.png"&gt;&lt;/p&gt;
&lt;p&gt;In fact, the main motivation of my new theme is &lt;a href="http://motherfuckingwebsite.com/"&gt;this satire page&lt;/a&gt; on the sad state of the web
we&amp;rsquo;re in&amp;nbsp;today.&lt;/p&gt;
&lt;p&gt;That&amp;rsquo;s why I decided to do no fancy cosmetic &lt;span class="caps"&gt;JS&lt;/span&gt; and try to keep my use of static assets to a&amp;nbsp;minimum:&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="/images/mofo_01_loads.png"&gt;&lt;/p&gt;
&lt;p&gt;I guess there&amp;rsquo;s nothing I can do about the font files though, since I need to make sure my
Vietnamese posts are rendered in a font that supports it. Oh well, at least it looks&amp;nbsp;awesome.&lt;/p&gt;
&lt;h2 id="content-is-king"&gt;Content is king&lt;a class="headerlink" href="#content-is-king" title="Permanent link"&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;No more distracting sidebar with &amp;ldquo;latest news&amp;rdquo;, &amp;ldquo;related posts&amp;rdquo;, etc. with thumbnails popping up
all over the place, just a good old article body from start to&amp;nbsp;finish.&lt;/p&gt;
&lt;h2 id="easy-on-the-eye"&gt;Easy on the eye&lt;a class="headerlink" href="#easy-on-the-eye" title="Permanent link"&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;While &lt;a href="http://bettermotherfuckingwebsite.com/"&gt;bettermotherfuckingwebsite&lt;/a&gt; does a good job at demonstrating how far you can go with a
few simple &lt;span class="caps"&gt;CSS&lt;/span&gt; rules (hint: very far), I found Tommi Kaikkonen&amp;rsquo;s &lt;a href="http://www.kaikkonendesign.fi/typography/"&gt;Interactive Guide to Blog
Typography&lt;/a&gt; much more comprehensive and informative. I implemented many of the ideas found
in that&amp;nbsp;guide:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Big body&amp;nbsp;font&lt;/li&gt;
&lt;li&gt;Constrained line width to aid&amp;nbsp;reading&lt;/li&gt;
&lt;li&gt;Generous line height, liberal whitespace to help with visual&amp;nbsp;hierarchy&lt;/li&gt;
&lt;li&gt;Lower background-foreground contrast. I also find the slightly yellow-ish background somewhat&amp;nbsp;soothing.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="thats-it"&gt;That&amp;rsquo;s it!&lt;a class="headerlink" href="#thats-it" title="Permanent link"&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;You can find the source code to my theme &lt;a href="https://github.com/nhanb/motherfucking-pelican-theme"&gt;on GitHub&lt;/a&gt;. I don&amp;rsquo;t recommend using it as-is though,
since I haven&amp;rsquo;t implemented many required templates (authors, tags, categories, etc.) because I
don&amp;rsquo;t use them. There&amp;rsquo;s also the hardcoded content in footer and probably a few more places. Maybe
someday I&amp;rsquo;ll stop being lazy and fix all that. &lt;em&gt;Maybe&lt;/em&gt;.&lt;/p&gt;</content><category term="posts"></category></entry><entry><title>How to install PyQt5 on a virtualenv on Ubuntu 14.04</title><link href="https://old.hi.imnhan.com/posts/how-to-install-pyqt5-on-virtualenv-on-ubuntu-14.04/" rel="alternate"></link><published>2015-02-14T22:33:00+07:00</published><updated>2015-02-14T22:33:00+07:00</updated><author><name>Bùi Thành Nhân</name></author><id>tag:old.hi.imnhan.com,2015-02-14:/posts/how-to-install-pyqt5-on-virtualenv-on-ubuntu-14.04/</id><summary type="html">&lt;p&gt;The official way to install PyQt5 for development is to download and compile &lt;span class="caps"&gt;SIP&lt;/span&gt; + PyQt5 from
source, which is painstakingly slow (compiling PyQt5 took like 10 minutes on my &lt;span class="caps"&gt;PC&lt;/span&gt;). If you&amp;rsquo;re
&lt;a href="https://michalcodes4life.wordpress.com/2014/03/16/pyqt5-python-3-3-in-virtualenv-on-ubuntu/"&gt;compiling it against a virtualenv&lt;/a&gt;, rinse and repeat for each new virtualenv you create.
Alhough it is …&lt;/p&gt;</summary><content type="html">&lt;p&gt;The official way to install PyQt5 for development is to download and compile &lt;span class="caps"&gt;SIP&lt;/span&gt; + PyQt5 from
source, which is painstakingly slow (compiling PyQt5 took like 10 minutes on my &lt;span class="caps"&gt;PC&lt;/span&gt;). If you&amp;rsquo;re
&lt;a href="https://michalcodes4life.wordpress.com/2014/03/16/pyqt5-python-3-3-in-virtualenv-on-ubuntu/"&gt;compiling it against a virtualenv&lt;/a&gt;, rinse and repeat for each new virtualenv you create.
Alhough it is doable, I prefer something&amp;nbsp;faster.&lt;/p&gt;
&lt;p&gt;And yes, there is something faster. Today I came across a &lt;a href="http://stackoverflow.com/a/1962076"&gt;Stack Overflow answer&lt;/a&gt; that suggested
a neat trick: installing PyQt globally, then copy the whole thing to your virtualenv
&lt;strong&gt;site-packages&lt;/strong&gt; directory. Here&amp;rsquo;s how I did it on Ubuntu 14.04, python3.4 and&amp;nbsp;PyQt5:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="c1"&gt;# assuming you already have virtualenv &amp;amp; virtualenvwrapper installed&lt;/span&gt;

&lt;span class="c1"&gt;# install pyqt5 globally&lt;/span&gt;
sudo&lt;span class="w"&gt; &lt;/span&gt;apt-get&lt;span class="w"&gt; &lt;/span&gt;install&lt;span class="w"&gt; &lt;/span&gt;python3-pyqt5

mkvirtualenv&lt;span class="w"&gt; &lt;/span&gt;-p&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="sb"&gt;`&lt;/span&gt;which&lt;span class="w"&gt; &lt;/span&gt;python3&lt;span class="sb"&gt;`&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;cookies
&lt;span class="c1"&gt;# (replace &amp;quot;cookies&amp;quot; with your actual virtualenv name, duh!)&lt;/span&gt;

&lt;span class="nv"&gt;LIBDIR&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="nv"&gt;$HOME&lt;/span&gt;&lt;span class="s2"&gt;/virtualenvs/cookies/lib/python3.4/site-packages&amp;quot;&lt;/span&gt;
cp&lt;span class="w"&gt; &lt;/span&gt;-r&lt;span class="w"&gt; &lt;/span&gt;/usr/lib/python3/dist-packages/PyQt5&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="nv"&gt;$LIBDIR&lt;/span&gt;&lt;span class="s2"&gt;/PyQt5&amp;quot;&lt;/span&gt;
cp&lt;span class="w"&gt; &lt;/span&gt;/usr/lib/python3/dist-packages/sip.cpython-*.so&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="nv"&gt;$LIBDIR&lt;/span&gt;&lt;span class="s2"&gt;/&amp;quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;And you&amp;rsquo;re done with no compiling involved. Isn&amp;rsquo;t that neat?&amp;nbsp;:)&lt;/p&gt;</content><category term="tutorials"></category></entry><entry><title>Dẹp ibus-unikey đi, dùng fcitx-unikey nhé!</title><link href="https://old.hi.imnhan.com/posts/ibus-is-dead-to-me-use-fcitx-instead-vi/" rel="alternate"></link><published>2015-01-29T20:41:00+07:00</published><updated>2015-01-29T20:41:00+07:00</updated><author><name>Bùi Thành Nhân</name></author><id>tag:old.hi.imnhan.com,2015-01-29:/posts/ibus-is-dead-to-me-use-fcitx-instead-vi/</id><summary type="html">&lt;p&gt;&lt;strong&gt;Cập nhật tháng 1/2021:&lt;/strong&gt; hiện tại mình dùng fcitx5 trên Arch + &lt;span class="caps"&gt;KDE&lt;/span&gt;, &lt;a href="https://wiki.archlinux.org/title/Fcitx5"&gt;cài đặt
và config&lt;/a&gt; không thể đơn giản&amp;nbsp;hơn:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;sudo&lt;span class="w"&gt; &lt;/span&gt;pacman&lt;span class="w"&gt; &lt;/span&gt;-S&lt;span class="w"&gt; &lt;/span&gt;fcitx5&lt;span class="w"&gt; &lt;/span&gt;fcitx5-qt&lt;span class="w"&gt; &lt;/span&gt;fcitx5-gtk&lt;span class="w"&gt; &lt;/span&gt;fcitx5-unikey&lt;span class="w"&gt; &lt;/span&gt;kcm-fcitx5
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Sau đó thêm đoạn này vào&amp;nbsp;/etc/environment:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="n"&gt;GTK_IM_MODULE&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;fcitx&lt;/span&gt;
&lt;span class="n"&gt;QT_IM_MODULE&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;fcitx&lt;/span&gt;
&lt;span class="n"&gt;XMODIFIERS&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nv"&gt;@im&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;fcitx&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Vào System Settings &amp;gt; Regional Settings …&lt;/p&gt;</summary><content type="html">&lt;p&gt;&lt;strong&gt;Cập nhật tháng 1/2021:&lt;/strong&gt; hiện tại mình dùng fcitx5 trên Arch + &lt;span class="caps"&gt;KDE&lt;/span&gt;, &lt;a href="https://wiki.archlinux.org/title/Fcitx5"&gt;cài đặt
và config&lt;/a&gt; không thể đơn giản&amp;nbsp;hơn:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;sudo&lt;span class="w"&gt; &lt;/span&gt;pacman&lt;span class="w"&gt; &lt;/span&gt;-S&lt;span class="w"&gt; &lt;/span&gt;fcitx5&lt;span class="w"&gt; &lt;/span&gt;fcitx5-qt&lt;span class="w"&gt; &lt;/span&gt;fcitx5-gtk&lt;span class="w"&gt; &lt;/span&gt;fcitx5-unikey&lt;span class="w"&gt; &lt;/span&gt;kcm-fcitx5
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Sau đó thêm đoạn này vào&amp;nbsp;/etc/environment:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="n"&gt;GTK_IM_MODULE&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;fcitx&lt;/span&gt;
&lt;span class="n"&gt;QT_IM_MODULE&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;fcitx&lt;/span&gt;
&lt;span class="n"&gt;XMODIFIERS&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nv"&gt;@im&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;fcitx&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Vào System Settings &amp;gt; Regional Settings &amp;gt; Input Method &amp;gt; Add Input Method,
chọn Unikey, tùy chỉnh tùy&amp;nbsp;ý.&lt;/p&gt;
&lt;p&gt;Fcitx5 khắc phục được lỗi crash renderer khi dùng facebook messenger trên
Firefox, và gõ được trên Telegram&amp;nbsp;🤷.&lt;/p&gt;
&lt;p&gt;Còn dưới đây là bài viết&amp;nbsp;cũ:&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;Sáng ra Netrunner bảo có vài chục cái update, mình chủ quan &lt;code&gt;dist-upgrade -y&lt;/code&gt; rồi để đó không màng
đến nữa. Nửa tiếng sau, ibus không thèm chơi với firefox!&amp;nbsp;:|&lt;/p&gt;
&lt;p&gt;Chuyện gõ tiếng Việt trên linux thì muôn đời trần ai rồi, mình không muốn bàn thêm nữa. Ngô &amp;ldquo;Chin&amp;rdquo;
- một trong những người phát triển chính của &lt;a href="http://ibus-bogo.readthedocs.org/"&gt;ibus-bogo&lt;/a&gt; - đã viết một bài blog rất hay về tình
trạng gõ tiếng Việt hiện nay trên linux nói chung, ai quan tâm có thể tham khảo thêm &lt;a href="http://ngochin.com/2014/07/31/uoc-mo-bo-go-kieu-unikey/"&gt;ở đây&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id="fcitx-unikey"&gt;fcitx-unikey&lt;a class="headerlink" href="#fcitx-unikey" title="Permanent link"&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Lọ mọ trên trang github của bogo, mình vô tình phát hiện ra &lt;a href="https://github.com/BoGoEngine/fcitx-bogo"&gt;fcitx-bogo&lt;/a&gt;: dự án này thực chất
cũng dùng bogo-engine nhưng chạy với &lt;a href="https://github.com/fcitx/fcitx"&gt;fcitx&lt;/a&gt; chứ không phải ibus như bình thường. Rất tiếc là
khi mình cài đặt và chạy thử fcitx-bogo thì nó luôn crash fcitx trước khi xử lý ra được chữ tiếng
Việt nào.&amp;nbsp;:P&lt;/p&gt;
&lt;p&gt;Dạo một vòng quanh trang github của fcitx, mình thấy dự án này vẫn được phát triển đều đặn chứ
không bị cảnh đem con bỏ chợ như ibus, và thứ làm mình ngạc nhiên và mừng nhất chính là một repo
với cái tên rất hứa hẹn: &lt;a href="https://github.com/fcitx/fcitx-unikey"&gt;fcitx-unikey&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Cách compile và cài đặt đã được nêu rõ trên &lt;span class="caps"&gt;README&lt;/span&gt; nên mình sẽ không nói lại ở đây nữa. Một vài
nhận xét sau khi dùng thử trên Netrunner 14 (em họ của&amp;nbsp;Kubuntu):&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Không hiện popup vô duyên khi chuyển method như&amp;nbsp;ibus.&lt;/li&gt;
&lt;li&gt;Không bật method tiếng Việt vô tội vạ như ibus. Trước đây khi dùng ibus, mặc dù đã tắt tính năng
  &amp;ldquo;Share same input method among all applications&amp;rdquo;, method tiếng Việt vẫn được kích hoạt mặc định
  trong các system dialog của &lt;span class="caps"&gt;KDE&lt;/span&gt;, rất khó chịu (bực nhất là nó bật preedit trên ô điền password
  nên mỗi khi khóa máy rồi login lại là password hiện lên hết). Fcitx không bị như vậy, vì method
  mặc định luôn là tiếng&amp;nbsp;Anh.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Một điểm trừ là khi dùng trên skype, phần text đang trong preedit bị hiển thị trong một ô riêng chứ
không chỉ là text bị gạch dưới như trong những chương trình khác. (xem hình&amp;nbsp;dưới)&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="/images/fcitx-skype.png"&gt;&lt;/p&gt;
&lt;h2 id="vim-fcitx"&gt;vim-fcitx&lt;a class="headerlink" href="#vim-fcitx" title="Permanent link"&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Những ai đã thử gõ tiếng Việt trên vim chắc chắn đều biết: không tài nào dùng normal mode khi
preedit đang bật được. Ngày xưa khi dùng ibus mình có thử viết &lt;a href="https://github.com/nhanb/vim-bogo"&gt;một plugin&lt;/a&gt; để bật tiếng Việt
khi vào insert mode và trở lại tiếng Anh khi ra normal mode, nhưng cuối cùng không dùng vì preedit
trong insert mode làm hư &lt;code&gt;inoremap jj &amp;lt;esc&amp;gt;&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Plugin &lt;a href="https://github.com/nhanb/vim-bogo"&gt;vim-fcitx&lt;/a&gt; hoạt động tương tự như trên, và vấn đề map jj nêu trên có thể được giải quyết
bằng cách sửa mã nguồn của&amp;nbsp;fcitx-unikey.&lt;/p&gt;
&lt;p&gt;Mình gõ tiếng Việt kiểu &lt;span class="caps"&gt;VNI&lt;/span&gt; nên bộ gõ chắc chắn không bao giờ xử lý ký tự &lt;code&gt;j&lt;/code&gt; =&amp;gt; có thể thêm ký tự
&lt;code&gt;j&lt;/code&gt; vào danh sách WordBreakSyms trong &lt;strong&gt;src/unikey-im.cpp&lt;/strong&gt;. (&lt;a href="https://github.com/nhanb/fcitx-unikey/commit/d976a64f560510125bfddf02bd892d42bc94e5b5"&gt;xem tại đây&lt;/a&gt;)&lt;/p&gt;
&lt;p&gt;Sau đó chỉ cần compile lại fcitx-unikey là&amp;nbsp;xong!&lt;/p&gt;</content><category term="tutorials"></category></entry><entry><title>Introducing Pytaku—the only online manga reader you’ll ever need</title><link href="https://old.hi.imnhan.com/posts/introducing-pytaku-the-only-online-manga-reader-youll-ever-need/" rel="alternate"></link><published>2015-01-02T21:19:00+07:00</published><updated>2015-01-02T21:19:00+07:00</updated><author><name>Bùi Thành Nhân</name></author><id>tag:old.hi.imnhan.com,2015-01-02:/posts/introducing-pytaku-the-only-online-manga-reader-youll-ever-need/</id><summary type="html">&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Heads up from 2021!&lt;/strong&gt; This post describes a previous incarnation of Pytaku
which is no longer alive.  The new Pytaku is a slightly different thing which
is being (relatively) actively developed &lt;a href="https://sr.ht/~nhanb/pytaku/"&gt;on
sourcehut&lt;/a&gt;.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;a href="https://pytaku.appspot.com"&gt;Pytaku&lt;/a&gt; is an online manga reader that scrapes data from multiple Vietnamese and English
manga sites, giving …&lt;/p&gt;</summary><content type="html">&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Heads up from 2021!&lt;/strong&gt; This post describes a previous incarnation of Pytaku
which is no longer alive.  The new Pytaku is a slightly different thing which
is being (relatively) actively developed &lt;a href="https://sr.ht/~nhanb/pytaku/"&gt;on
sourcehut&lt;/a&gt;.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;a href="https://pytaku.appspot.com"&gt;Pytaku&lt;/a&gt; is an online manga reader that scrapes data from multiple Vietnamese and English
manga sites, giving you one single place to keep track of your reading progress and watch for new
chapters with ease. Here are some of the features implemented so&amp;nbsp;far:&lt;/p&gt;
&lt;h2 id="lightning-fast-ad-free-reading-experience"&gt;Lightning fast, ad-free reading experience&lt;a class="headerlink" href="#lightning-fast-ad-free-reading-experience" title="Permanent link"&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;All pages in a chapter are loaded at once, unlike most other sites that only let you view one page
at a time, forcing you to reload their distracting advertisements and disrupt you flow (especially
for people with not-so-fast internet&amp;nbsp;connection).&lt;/p&gt;
&lt;p&gt;And it gets better: using state-of-the-art &lt;span class="caps"&gt;AJAX&lt;/span&gt; dark magic, even navigation between chapters is
lightning fast. Loaded pages are cached, so pressing &amp;ldquo;Back&amp;rdquo; or &amp;ldquo;Forward&amp;rdquo; on your browser happens&amp;nbsp;instantly.&lt;/p&gt;
&lt;h2 id="keep-track-of-your-reading-progress-automatically"&gt;Keep track of your reading progress. Automatically.&lt;a class="headerlink" href="#keep-track-of-your-reading-progress-automatically" title="Permanent link"&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Each logged in user will have a nice badge on each chapter showing their progress: (keeping a
chapter page open for a few seconds registers it as &amp;ldquo;reading&amp;rdquo;, and scrolling to the bottom marks it
as&amp;nbsp;&amp;ldquo;finished&amp;rdquo;)&lt;/p&gt;
&lt;p&gt;&lt;img alt="Chapter progress badge" src="/images/pytaku_01_chapter_progress.png"&gt;&lt;/p&gt;
&lt;h2 id="bookmark-series-to-watch-for-updates"&gt;Bookmark series to watch for updates&lt;a class="headerlink" href="#bookmark-series-to-watch-for-updates" title="Permanent link"&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Maintain a list of series so you can have one single place to find out whether there are new
chapters for the series you&amp;nbsp;love.&lt;/p&gt;
&lt;p&gt;&lt;img alt="Bookmarked series" src="/images/pytaku_02_bookmarked_series.png"&gt;&lt;/p&gt;
&lt;h2 id="english-vietnamese-and-support-for-other-languages"&gt;English, Vietnamese and support for other languages&lt;a class="headerlink" href="#english-vietnamese-and-support-for-other-languages" title="Permanent link"&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Pytaku comes in English by default and configurable to be in Vietnamese. If you want to translate
it to your own language, feel free to follow the example from the &lt;a href="https://github.com/nhanb/pytaku-old-gae/blob/master/frontend/languages/en.yaml"&gt;English language file&lt;/a&gt; and
send me a pull&amp;nbsp;request.&lt;/p&gt;
&lt;p&gt;&lt;img alt="Vietnamese interface" src="/images/pytaku_03_vietnamese.png"&gt;&lt;/p&gt;
&lt;h2 id="open-source-and-free-to-run-your-own-site"&gt;Open source and free to run your own site&lt;a class="headerlink" href="#open-source-and-free-to-run-your-own-site" title="Permanent link"&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Pytaku&amp;rsquo;s source code is released under the free-as-in-freedom &lt;a href="https://www.gnu.org/licenses/quick-guide-gplv3.html"&gt;GPLv3&lt;/a&gt; and &lt;a href="https://github.com/nhanb/pytaku-old-gae/"&gt;put on GitHub&lt;/a&gt;.
Since it&amp;rsquo;s written to be run on Google App Engine which is free for small sites, tech-savvy people
can set up their own private pytaku clone in a few minutes. Check out the &lt;a href="https://github.com/nhanb/pytaku-old-gae/blob/master/README.markdown"&gt;&lt;span class="caps"&gt;README&lt;/span&gt; file&lt;/a&gt; for&amp;nbsp;instructions.&lt;/p&gt;
&lt;h2 id="open-to-suggestions-and-hopefully-contructive-criticism"&gt;Open to suggestions and (hopefully contructive) criticism&lt;a class="headerlink" href="#open-to-suggestions-and-hopefully-contructive-criticism" title="Permanent link"&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Want another manga site to be included as source? Need a feature that you think many others can
benefit from? Feel free to open an issue on GitHub, or give me a shout on the official &lt;a href="https://gitter.im/nhanb/pytaku"&gt;support
chat room&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id="give-it-a-spin"&gt;Give it a spin&lt;a class="headerlink" href="#give-it-a-spin" title="Permanent link"&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;a href="https://pytaku.appspot.com"&gt;Click here&lt;/a&gt; to go to the app. Have fun!&amp;nbsp;:)&lt;/p&gt;</content><category term="side projects"></category><category term="pytaku"></category></entry><entry><title>Virtualenv(wrapper), python2 and python3</title><link href="https://old.hi.imnhan.com/posts/virtualenwrapper-python2-python3/" rel="alternate"></link><published>2014-12-16T21:35:00+07:00</published><updated>2014-12-16T21:35:00+07:00</updated><author><name>Bùi Thành Nhân</name></author><id>tag:old.hi.imnhan.com,2014-12-16:/posts/virtualenwrapper-python2-python3/</id><summary type="html">&lt;p&gt;&lt;span class="caps"&gt;TL&lt;/span&gt;;&lt;span class="caps"&gt;DR&lt;/span&gt;: Install virtualenv via &lt;code&gt;apt-get&lt;/code&gt;, not &lt;code&gt;pip&lt;/code&gt;, then &lt;code&gt;mkvirtualenv -p /path/to/python/executable&lt;/code&gt;.&lt;/p&gt;</summary><content type="html">&lt;p&gt;Virtualenv and virtualenvwrapper make it super easy to have a sandboxed python environment for each
of your projects, no doubt about it (if you&amp;rsquo;re not using them already, feel free to google how to
get&amp;nbsp;started).&lt;/p&gt;
&lt;p&gt;By default, &lt;code&gt;mkvirtualenv my-env-name&lt;/code&gt; will create a virtualenv using the &lt;span class="caps"&gt;OS&lt;/span&gt;&amp;rsquo;s default python
version (in Ubuntu&amp;rsquo;s case, that&amp;rsquo;s python2). If you want a virtualenv that has &lt;code&gt;python&lt;/code&gt; mapped to
python3 instead, use the &lt;code&gt;-p&lt;/code&gt; argument:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;$&lt;span class="w"&gt; &lt;/span&gt;mkvirtualenv&lt;span class="w"&gt; &lt;/span&gt;-p&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="sb"&gt;`&lt;/span&gt;which&lt;span class="w"&gt; &lt;/span&gt;python3&lt;span class="sb"&gt;`&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;my-env-name
&lt;span class="c1"&gt;# assumming you have python3 installed already, of course!&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;However, on Ubuntu this will fail if you installed virtualenv as a pip package. If that&amp;rsquo;s the case,
simply remove it and install the Ubuntu package instead. It goes like this for Ubuntu&amp;nbsp;14.04:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;$&lt;span class="w"&gt; &lt;/span&gt;sudo&lt;span class="w"&gt; &lt;/span&gt;pip&lt;span class="w"&gt; &lt;/span&gt;uninstall&lt;span class="w"&gt; &lt;/span&gt;virtualenv
$&lt;span class="w"&gt; &lt;/span&gt;sudo&lt;span class="w"&gt; &lt;/span&gt;apt-get&lt;span class="w"&gt; &lt;/span&gt;install&lt;span class="w"&gt; &lt;/span&gt;python-virtualenv
$&lt;span class="w"&gt; &lt;/span&gt;sudo&lt;span class="w"&gt; &lt;/span&gt;pip&lt;span class="w"&gt; &lt;/span&gt;install&lt;span class="w"&gt; &lt;/span&gt;virtualenvwrapper&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="c1"&gt;# yes, you can install virtualenvwrapper via pip&lt;/span&gt;
$&lt;span class="w"&gt; &lt;/span&gt;mkvirtualenv&lt;span class="w"&gt; &lt;/span&gt;-p&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="sb"&gt;`&lt;/span&gt;which&lt;span class="w"&gt; &lt;/span&gt;python3&lt;span class="sb"&gt;`&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;my-env-name
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Neat,&amp;nbsp;eh?&lt;/p&gt;</content><category term="tutorials"></category><category term="linux"></category><category term="vim"></category><category term="python"></category></entry><entry><title>Enable italic text inside vim inside tmux inside gnome-terminal</title><link href="https://old.hi.imnhan.com/posts/enable-italic-text-vim-tmux-gnome-terminal/" rel="alternate"></link><published>2014-08-02T16:46:00+07:00</published><updated>2014-08-02T16:46:00+07:00</updated><author><name>Bùi Thành Nhân</name></author><id>tag:old.hi.imnhan.com,2014-08-02:/posts/enable-italic-text-vim-tmux-gnome-terminal/</id><summary type="html">&lt;p&gt;&lt;strong&gt;Update&lt;/strong&gt;: As &lt;code&gt;egmont&lt;/code&gt; pointed out in the comments: setting &lt;code&gt;TERM=xterm&lt;/code&gt; inside tmux is
discouraged and will cause wrong behavior in some programs. Changing all instances of
&lt;code&gt;xterm-256color&lt;/code&gt; to &lt;code&gt;screen-256color&lt;/code&gt; in this tutorial should work, but I&amp;rsquo;m no longer using
gnome-terminal so I can&amp;rsquo;t test that. I&amp;rsquo;m …&lt;/p&gt;</summary><content type="html">&lt;p&gt;&lt;strong&gt;Update&lt;/strong&gt;: As &lt;code&gt;egmont&lt;/code&gt; pointed out in the comments: setting &lt;code&gt;TERM=xterm&lt;/code&gt; inside tmux is
discouraged and will cause wrong behavior in some programs. Changing all instances of
&lt;code&gt;xterm-256color&lt;/code&gt; to &lt;code&gt;screen-256color&lt;/code&gt; in this tutorial should work, but I&amp;rsquo;m no longer using
gnome-terminal so I can&amp;rsquo;t test that. I&amp;rsquo;m now a &lt;span class="caps"&gt;KDE&lt;/span&gt; convert by the way; italic text Just
Works&lt;sup&gt;tm&lt;/sup&gt; with Konsole. Neat,&amp;nbsp;eh?&lt;/p&gt;
&lt;p&gt;It has bothered me for a while what I can&amp;rsquo;t get terminal vim to display &lt;em&gt;italic&lt;/em&gt; text. It might
seem trivial but it makes a world of difference when I&amp;rsquo;m editing Markdown or &lt;span class="caps"&gt;HTML&lt;/span&gt;. Here&amp;rsquo;s what gvim
looks&amp;nbsp;like:&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="/images/italic_01_gvim.png"&gt;&lt;/p&gt;
&lt;p&gt;Neat, right? This is what terminal vim&amp;nbsp;shows:&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="/images/italic_02_vim.png"&gt;&lt;/p&gt;
&lt;p&gt;I don&amp;rsquo;t know about you, but the second one looks catastrophically messy and counterintuitive to me.
Let&amp;rsquo;s change that. My current setup is terminal vim running inside a tmux session on
gnome-terminal. Let&amp;rsquo;s go through these&amp;nbsp;things.&lt;/p&gt;
&lt;h2 id="gnome-terminal"&gt;gnome-terminal&lt;a class="headerlink" href="#gnome-terminal" title="Permanent link"&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Note that older versions of &lt;code&gt;gnome-terminal&lt;/code&gt; do not support italic text. To check if your terminal
does support it, run this&amp;nbsp;command:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;$&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;echo&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;-e&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;\e[3m foo \e[23m&amp;quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;If your version of gnome-terminal supports it, an italic &lt;em&gt;foo&lt;/em&gt; will appear. If not, upgrade it!&amp;nbsp;:)&lt;/p&gt;
&lt;h2 id="vim"&gt;vim&lt;a class="headerlink" href="#vim" title="Permanent link"&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;You may have noticed: &lt;code&gt;[3m&lt;/code&gt; and &lt;code&gt;[23m&lt;/code&gt; are the special sequences to start and stop printing
italic text. Unfortunately, vim doesn&amp;rsquo;t care about those. It expects &lt;code&gt;sitm&lt;/code&gt; and &lt;code&gt;ritm&lt;/code&gt; instead.
We&amp;rsquo;ll need to map them manually. Simply use these&amp;nbsp;commands:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="c1"&gt;# Download a custom terminfo that defines sitm and ritm&lt;/span&gt;
$&lt;span class="w"&gt; &lt;/span&gt;wget&lt;span class="w"&gt; &lt;/span&gt;https://gist.githubusercontent.com/sos4nt/3187620/raw/8e13c1fec5b72d415ed2917590348451de5f8e58/xterm-256color-italic.terminfo
&lt;span class="c1"&gt;# Compile it&lt;/span&gt;
$&lt;span class="w"&gt; &lt;/span&gt;tic&lt;span class="w"&gt; &lt;/span&gt;xterm-256color-italic.terminfo
&lt;span class="c1"&gt;# Activate xterm-256color-italic.terminfo automatically&lt;/span&gt;
&lt;span class="c1"&gt;# (edit filename accordingly if you&amp;#39;re using another shell)&lt;/span&gt;
$&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;echo&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;export TERM=xterm-256color-italic&amp;#39;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&amp;gt;&amp;gt;&lt;span class="w"&gt; &lt;/span&gt;~/.bashrc
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Open a new terminal window and try the first command again. You should now see an italic &lt;em&gt;foo&lt;/em&gt;. If
not, I can&amp;rsquo;t help you any further&amp;nbsp;:P&lt;/p&gt;
&lt;h2 id="tmux"&gt;tmux&lt;a class="headerlink" href="#tmux" title="Permanent link"&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;The only reason I use terminal vim instead of gvim is tmux integration, therefore I almost always
run vim inside a tmux session. Unfortunately tmux does some weird things to your terminal, one of
them is altering the &lt;code&gt;$TERM&lt;/code&gt; environment variable. When we open a tmux session, it will typically
reset &lt;code&gt;$TERM&lt;/code&gt; to &lt;code&gt;screen-256color&lt;/code&gt; or something like&amp;nbsp;that.&lt;/p&gt;
&lt;p&gt;If you did the previous step, the &lt;code&gt;export&lt;/code&gt; command in your &lt;code&gt;.bashrc&lt;/code&gt; should have overridden tmux&amp;rsquo;s
&lt;code&gt;$TERM&lt;/code&gt; value. If for some reason it doesn&amp;rsquo;t work, you can directly tell tmux to use the correct
value. Add this line to &lt;code&gt;~/.tmux.conf&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;set -g default-terminal &amp;quot;xterm-256color-italic&amp;quot;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h2 id="more-on-vim"&gt;More on vim&lt;a class="headerlink" href="#more-on-vim" title="Permanent link"&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;If you still can&amp;rsquo;t see any italic text in a markdown file, it might be because your colorscheme
deliberately disables it. Try using another colorscheme (I highly recommend &lt;a href="http://ethanschoonover.com/solarized"&gt;solarized&lt;/a&gt;). You
can also check if your markdown syntax plugin does use italics; I&amp;rsquo;m currently using &lt;a href="https://github.com/tpope/vim-markdown"&gt;Tim Pope&amp;rsquo;s
markdown plugin&lt;/a&gt; and it works&amp;nbsp;great!&lt;/p&gt;
&lt;h2 id="references"&gt;References:&lt;a class="headerlink" href="#references" title="Permanent link"&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href="http://superuser.com/questions/204743/terminal-that-supports-ansi-italic-escape-code"&gt;Terminal that supports &lt;span class="caps"&gt;ANSI&lt;/span&gt; italic escape&amp;nbsp;code?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://stackoverflow.com/a/21077380"&gt;gnome-terminal&amp;rsquo;s italic escape&amp;nbsp;codes&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://alexpearce.me/2014/05/italics-in-iterm2-vim-tmux/"&gt;Enabling italic fonts in iTerm2, tmux, and&amp;nbsp;vim&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;</content><category term="tutorials"></category><category term="linux"></category><category term="vim"></category></entry><entry><title>Setting up your development environment for a node-webkit project</title><link href="https://old.hi.imnhan.com/posts/setting-up-your-development-environment-for-a-node-webkit-project/" rel="alternate"></link><published>2014-05-01T08:23:00+07:00</published><updated>2014-05-01T08:23:00+07:00</updated><author><name>Bùi Thành Nhân</name></author><id>tag:old.hi.imnhan.com,2014-05-01:/posts/setting-up-your-development-environment-for-a-node-webkit-project/</id><summary type="html">&lt;p&gt;&lt;img alt="" src="/images/nw_xp.png" title="XP support y'all!"&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://github.com/rogerwang/node-webkit"&gt;Node-webkit&lt;/a&gt; lets you write cross-platform (Mac + Linux + Winbloze) desktop applications using
&lt;span class="caps"&gt;HTML5&lt;/span&gt; and nodejs. That&amp;rsquo;s a fancy way of saying &amp;ldquo;a webkit wrapper that also gives you filesystem
access, disables same-origin policy and has nodejs embedded&amp;rdquo;. It&amp;rsquo;s the lazy web developers&amp;rsquo; dream
come true. Who needs Qt, &lt;span class="caps"&gt;GTK …&lt;/span&gt;&lt;/p&gt;</summary><content type="html">&lt;p&gt;&lt;img alt="" src="/images/nw_xp.png" title="XP support y'all!"&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://github.com/rogerwang/node-webkit"&gt;Node-webkit&lt;/a&gt; lets you write cross-platform (Mac + Linux + Winbloze) desktop applications using
&lt;span class="caps"&gt;HTML5&lt;/span&gt; and nodejs. That&amp;rsquo;s a fancy way of saying &amp;ldquo;a webkit wrapper that also gives you filesystem
access, disables same-origin policy and has nodejs embedded&amp;rdquo;. It&amp;rsquo;s the lazy web developers&amp;rsquo; dream
come true. Who needs Qt, &lt;span class="caps"&gt;GTK&lt;/span&gt;, or any other legitimate battle-tested, performant cross-platform &lt;span class="caps"&gt;GUI&lt;/span&gt;
toolkit when you can slap in Bootstrap/Foundation with some hip JavaScript framework&amp;nbsp;instead?&lt;/p&gt;
&lt;p&gt;Joking aside, this is an interesting take on desktop development. Firefox &lt;span class="caps"&gt;OS&lt;/span&gt; is on the horizon, and
even Ubuntu is pushing the &amp;ldquo;&lt;span class="caps"&gt;HTML5&lt;/span&gt; apps as first-class citizens&amp;rdquo; paradigm. Why not give it a&amp;nbsp;try?&lt;/p&gt;
&lt;p&gt;If you already have experience in client-side web development tools, you can just clone
&lt;a href="https://github.com/Anonyfox/node-webkit-hipster-seed"&gt;node-webkit-hipster-seed&lt;/a&gt; and digest the code. That&amp;rsquo;s a project skeleton that integrates all
kinds of stuff: Jade/Coffescript/&lt;span class="caps"&gt;LESS&lt;/span&gt; automatic compiler, node-webkit, grunt&amp;nbsp;tasks&amp;hellip;&lt;/p&gt;
&lt;p&gt;This tutorial is like a stripped down version of that. In the end we&amp;rsquo;ll&amp;nbsp;have:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Automatic app reload when source code changes with &lt;code&gt;livereload&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Single command to build binaries for mac + linux + win with &lt;code&gt;grunt&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;That&amp;rsquo;s it,&amp;nbsp;really&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="install-node-webkit-on-your-machine"&gt;Install node-webkit on your machine&lt;a class="headerlink" href="#install-node-webkit-on-your-machine" title="Permanent link"&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Follow the &lt;span class="caps"&gt;README&lt;/span&gt; on &lt;a href="https://github.com/rogerwang/node-webkit"&gt;node-webkit&amp;rsquo;s GitHub page&lt;/a&gt; to download a precompiled &lt;code&gt;nw&lt;/code&gt; binary for your
platform. If you&amp;rsquo;re using Arch Linux, you&amp;rsquo;re in luck since there&amp;rsquo;s already an &lt;span class="caps"&gt;AUR&lt;/span&gt;&amp;nbsp;package:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;$&lt;span class="w"&gt; &lt;/span&gt;yaourt&lt;span class="w"&gt; &lt;/span&gt;-S&lt;span class="w"&gt; &lt;/span&gt;node-webkit
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;If you&amp;rsquo;re on Ubuntu or some other repo and you get some error about &lt;code&gt;libudev.so.0&lt;/code&gt;, &lt;a href="http://www.exponential.io/blog/install-node-webkit-on-ubuntu-linux"&gt;read this&lt;/a&gt;
for a&amp;nbsp;hotfix.&lt;/p&gt;
&lt;p&gt;The rest of this tutorial will assume that you have &lt;code&gt;nw&lt;/code&gt; accessible as an executable in your $&lt;span class="caps"&gt;PATH&lt;/span&gt;.&lt;/p&gt;
&lt;h2 id="running-an-app"&gt;Running an app&lt;a class="headerlink" href="#running-an-app" title="Permanent link"&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;First, take a look at nw&amp;rsquo;s &lt;a href="https://github.com/rogerwang/node-webkit#quick-start"&gt;quickstart guide&lt;/a&gt;. We&amp;rsquo;ll make a somewhat different structure,
allowing the &lt;strong&gt;dist&lt;/strong&gt; directory to store our binary&amp;nbsp;releases:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="err"&gt;├──&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;app&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;
&lt;span class="err"&gt;│&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="err"&gt;├──&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;css&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;
&lt;span class="err"&gt;│&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="err"&gt;├──&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;js&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;
&lt;span class="err"&gt;│&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="err"&gt;├──&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;index&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;html&lt;/span&gt;
&lt;span class="err"&gt;│&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="err"&gt;└──&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kn"&gt;package&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;json&lt;/span&gt;
&lt;span class="err"&gt;└──&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;dist&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;package.json&lt;/strong&gt; stores the information that &lt;code&gt;nw&lt;/code&gt; requires. Its content goes like&amp;nbsp;this:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nt"&gt;&amp;quot;name&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;your-project-name&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nt"&gt;&amp;quot;version&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;0.0.1&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nt"&gt;&amp;quot;main&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;index.html&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nt"&gt;&amp;quot;window&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="nt"&gt;&amp;quot;toolbar&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kc"&gt;true&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;code&gt;window.toolbar&lt;/code&gt; is &lt;code&gt;true&lt;/code&gt; by default so we don&amp;rsquo;t actually need it. Switch it to &lt;code&gt;false&lt;/code&gt; if you
want to hide the browser-like address&amp;nbsp;bar.&lt;/p&gt;
&lt;p&gt;To embed css/js files, don&amp;rsquo;t use absolute urls. Use relative ones like&amp;nbsp;this:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;link&lt;/span&gt; &lt;span class="na"&gt;href&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;css/style.css&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;rel&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;stylesheet&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;There&amp;rsquo;s no point in using CDNs because we&amp;rsquo;re distributing the whole app with its assets as a
one-time download. Things like automatic css/js minification or concatination aren&amp;rsquo;t needed either.
For simplicity&amp;rsquo;s sake, we&amp;rsquo;ll just download a minified version of whatever js/css library that we
need and stuff them into &lt;strong&gt;css&lt;/strong&gt; or &lt;strong&gt;js&lt;/strong&gt; dir. For example: (&lt;strong&gt;dist&lt;/strong&gt; directory&amp;nbsp;omitted)&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="nx"&gt;app&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;
&lt;span class="err"&gt;├──&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;css&lt;/span&gt;
&lt;span class="err"&gt;│&lt;/span&gt;&lt;span class="w"&gt;   &lt;/span&gt;&lt;span class="err"&gt;└──&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;bootstrap&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;min&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;css&lt;/span&gt;
&lt;span class="err"&gt;├──&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;js&lt;/span&gt;
&lt;span class="err"&gt;│&lt;/span&gt;&lt;span class="w"&gt;   &lt;/span&gt;&lt;span class="err"&gt;├──&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;bootstrap&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;min&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;js&lt;/span&gt;
&lt;span class="err"&gt;│&lt;/span&gt;&lt;span class="w"&gt;   &lt;/span&gt;&lt;span class="err"&gt;├──&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;knockout&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;min&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;js&lt;/span&gt;
&lt;span class="err"&gt;│&lt;/span&gt;&lt;span class="w"&gt;   &lt;/span&gt;&lt;span class="err"&gt;├──&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;jquery&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;min&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;js&lt;/span&gt;
&lt;span class="err"&gt;│&lt;/span&gt;&lt;span class="w"&gt;   &lt;/span&gt;&lt;span class="err"&gt;└──&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;js&lt;/span&gt;
&lt;span class="err"&gt;├──&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;index&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;html&lt;/span&gt;
&lt;span class="err"&gt;└──&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kn"&gt;package&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;json&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;If you&amp;rsquo;re experienced in front-end web development tools, feel free to go wild with bower,
grunt/gulp/whatever. Again, check out the &lt;a href="https://github.com/Anonyfox/node-webkit-hipster-seed"&gt;node-webkit-hipster-seed&lt;/a&gt; project if you know what
you&amp;rsquo;re&amp;nbsp;doing.&lt;/p&gt;
&lt;p&gt;You can now test run your app with the &lt;code&gt;nw &amp;lt;directory&amp;gt;&lt;/code&gt; command. In our case: &lt;code&gt;nw app&lt;/code&gt;. Notice the
weird url, which is why we can&amp;rsquo;t use absolute urls in the first&amp;nbsp;place:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;file:///home/nhanb/Dropbox/small_projects/ajmg-nw/app/index.html
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Once you&amp;rsquo;ve packaged your app to a single executable, the url will be something like&amp;nbsp;this:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;file:///tmp/.org.chromium.Chromium.IJWqkq/index.html
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;But let&amp;rsquo;s not get ahead of ourselves. Let&amp;rsquo;s solve the most obvious dev issue&amp;nbsp;first:&lt;/p&gt;
&lt;h2 id="automatic-reload"&gt;Automatic reload&lt;a class="headerlink" href="#automatic-reload" title="Permanent link"&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Sure enough, at first glance your app is just another html page. You may be tempted to run some
simple http server and open localhost in Google Chrome (&lt;code&gt;python2 -m SimpleHTTPServer 8080&lt;/code&gt;
anyone?). There are tons of ways to make Google Chrome automatically reload a page,&amp;nbsp;right?&lt;/p&gt;
&lt;p&gt;But then, the true strength of &lt;code&gt;node-webkit&lt;/code&gt; is the ability to use nodejs modules, which Google
Chrome certainly doesn&amp;rsquo;t offer. Therefore, the only way to check out how the app really works is
using &lt;code&gt;nw app&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;We&amp;rsquo;ll use &lt;code&gt;livereload&lt;/code&gt; to make automatic reloading possible. The idea is quite simple: we fire off
a &lt;code&gt;livereload&lt;/code&gt; daemon that watches for any change in our &lt;strong&gt;app/&lt;/strong&gt; directory. In our app, we embed a
certain piece of javascript that connects to that &lt;code&gt;livereload&lt;/code&gt; daemon and refreshes the page
whenever a &amp;ldquo;change&amp;rdquo; event is&amp;nbsp;broadcast.&lt;/p&gt;
&lt;p&gt;There are many &lt;code&gt;livereload&lt;/code&gt; daemon implementations. Considering the fact that most of us developers
have python and pip installed, let&amp;rsquo;s go with the &lt;code&gt;livereload&lt;/code&gt; pip package (it&amp;rsquo;s only compatible
with python2, by the way). If you&amp;rsquo;re on Ubuntu and don&amp;rsquo;t know what I&amp;rsquo;m talking&amp;nbsp;about:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;$&lt;span class="w"&gt; &lt;/span&gt;sudo&lt;span class="w"&gt; &lt;/span&gt;apt-get&lt;span class="w"&gt; &lt;/span&gt;install&lt;span class="w"&gt; &lt;/span&gt;python-pip
$&lt;span class="w"&gt; &lt;/span&gt;sudo&lt;span class="w"&gt; &lt;/span&gt;pip&lt;span class="w"&gt; &lt;/span&gt;install&lt;span class="w"&gt; &lt;/span&gt;livereload
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;There are ruby/javascript implementations too. Google them if you prefer those&amp;nbsp;things.&lt;/p&gt;
&lt;p&gt;Either way, we can now fire off a livereload&amp;nbsp;server:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="c1"&gt;# I don&amp;#39;t know why but seems like the python implementation doesn&amp;#39;t work&lt;/span&gt;
&lt;span class="c1"&gt;# when I type `livereload app`. Weird.&lt;/span&gt;
&lt;span class="o"&gt;$&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;cd&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;app&lt;/span&gt;
&lt;span class="o"&gt;$&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;livereload&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Now how do we inject the livereload javascript? On Google Chrome there is an official livereload
plugin, but we&amp;rsquo;re using node-webkit so that&amp;rsquo;s not possible. No problem! The &lt;code&gt;livereload&lt;/code&gt; daemon we
fired off earlier is actually a web server which also serves the necessary livereload client
JavaScript snippet too. Simply embed it to your &lt;strong&gt;index.html&lt;/strong&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;script&lt;/span&gt; &lt;span class="na"&gt;src&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;http://localhost:35729/livereload.js&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;script&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Fire off the app with &lt;code&gt;nw app&lt;/code&gt; again and you&amp;rsquo;ll have automatic reloading. Cool&amp;nbsp;eh?&lt;/p&gt;
&lt;p&gt;Another problem: we only want livereload in our development version, not in the released app. Let&amp;rsquo;s
modify our javascript snippet in &lt;strong&gt;index.html&lt;/strong&gt; to only load livereload when a certain environment
variable is set to &lt;code&gt;1&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;script&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="c1"&gt;// Load livereload if in dev environment&lt;/span&gt;
&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;process&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;env&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;NW_DEV_MY_AWESOME_PROJECT&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;==&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mf"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="kd"&gt;var&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;script&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;createElement&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;script&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nx"&gt;script&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;type&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;text/javascript&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nx"&gt;script&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;src&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;http://localhost:35729/livereload.js&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;body&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;appendChild&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;script&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;script&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Now to start the&amp;nbsp;app:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;$&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;export&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;NW_DEV_MY_AWESOME_PROJECT&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;
$&lt;span class="w"&gt; &lt;/span&gt;nw&lt;span class="w"&gt; &lt;/span&gt;app
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h2 id="simple-cross-platform-build-command"&gt;Simple cross-platform build command&lt;a class="headerlink" href="#simple-cross-platform-build-command" title="Permanent link"&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;To be honest, you can manually write shell scripts to build for each platform. Check out &lt;a href="https://github.com/rogerwang/node-webkit/wiki/How-to-package-and-distribute-your-apps"&gt;this wiki
article&lt;/a&gt; if you prefer the do-it-yourself&amp;nbsp;way.&lt;/p&gt;
&lt;p&gt;But if you&amp;rsquo;re lazy (like me) and don&amp;rsquo;t have a problem using nodejs/grunt, just use the excellent
&lt;a href="https://github.com/mllrsohn/grunt-node-webkit-builder"&gt;grunt-node-webkit-builder&lt;/a&gt;. Again, for newcomers using&amp;nbsp;Ubuntu:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;$&lt;span class="w"&gt; &lt;/span&gt;sudo&lt;span class="w"&gt; &lt;/span&gt;add-apt-repository&lt;span class="w"&gt; &lt;/span&gt;ppa:chris-lea/node.js
$&lt;span class="w"&gt; &lt;/span&gt;sudo&lt;span class="w"&gt; &lt;/span&gt;apt-get&lt;span class="w"&gt; &lt;/span&gt;update
$&lt;span class="w"&gt; &lt;/span&gt;sudo&lt;span class="w"&gt; &lt;/span&gt;apt-get&lt;span class="w"&gt; &lt;/span&gt;install&lt;span class="w"&gt; &lt;/span&gt;python-software-properties&lt;span class="w"&gt; &lt;/span&gt;python&lt;span class="w"&gt; &lt;/span&gt;g++&lt;span class="w"&gt; &lt;/span&gt;make&lt;span class="w"&gt; &lt;/span&gt;nodejs
$&lt;span class="w"&gt; &lt;/span&gt;sudo&lt;span class="w"&gt; &lt;/span&gt;npm&lt;span class="w"&gt; &lt;/span&gt;install&lt;span class="w"&gt; &lt;/span&gt;-g&lt;span class="w"&gt; &lt;/span&gt;grunt-cli
$&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="c1"&gt;# cd to your project root (the one containing app/ and dist/)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Create &lt;code&gt;package.json&lt;/code&gt; and &lt;code&gt;Gruntfile.js&lt;/code&gt; in project&amp;nbsp;root:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="err"&gt;├──&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;app&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;
&lt;span class="err"&gt;│&lt;/span&gt;&lt;span class="w"&gt;   &lt;/span&gt;&lt;span class="err"&gt;├──&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;css&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;
&lt;span class="err"&gt;│&lt;/span&gt;&lt;span class="w"&gt;   &lt;/span&gt;&lt;span class="err"&gt;├──&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;js&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;
&lt;span class="err"&gt;│&lt;/span&gt;&lt;span class="w"&gt;   &lt;/span&gt;&lt;span class="err"&gt;├──&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;index&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;html&lt;/span&gt;
&lt;span class="err"&gt;│&lt;/span&gt;&lt;span class="w"&gt;   &lt;/span&gt;&lt;span class="err"&gt;└──&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kn"&gt;package&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;json&lt;/span&gt;
&lt;span class="err"&gt;├──&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;dist&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;
&lt;span class="err"&gt;├──&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;Gruntfile&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;js&lt;/span&gt;
&lt;span class="err"&gt;└──&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kn"&gt;package&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;json&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;package.json&lt;/strong&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nt"&gt;&amp;quot;name&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;whatever&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nt"&gt;&amp;quot;version&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;0.0.1&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nt"&gt;&amp;quot;description&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Whatever&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nt"&gt;&amp;quot;author&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Bui Thanh Nhan&amp;quot;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;Gruntfile.js&lt;/strong&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="nx"&gt;module&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;exports&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;grunt&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nx"&gt;grunt&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;initConfig&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="nx"&gt;pkg&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;grunt&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;file&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;readJSON&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;package.json&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="nx"&gt;nodewebkit&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;            &lt;/span&gt;&lt;span class="nx"&gt;options&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;                &lt;/span&gt;&lt;span class="nx"&gt;build_dir&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;./dist&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="w"&gt;                &lt;/span&gt;&lt;span class="c1"&gt;// choose what platforms to compile for here&lt;/span&gt;
&lt;span class="w"&gt;                &lt;/span&gt;&lt;span class="nx"&gt;mac&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="w"&gt;                &lt;/span&gt;&lt;span class="nx"&gt;win&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="w"&gt;                &lt;/span&gt;&lt;span class="nx"&gt;linux32&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="w"&gt;                &lt;/span&gt;&lt;span class="nx"&gt;linux64&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kc"&gt;true&lt;/span&gt;
&lt;span class="w"&gt;            &lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;
&lt;span class="w"&gt;            &lt;/span&gt;&lt;span class="nx"&gt;src&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;./app/**/*&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p"&gt;})&lt;/span&gt;

&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nx"&gt;grunt&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;loadNpmTasks&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;grunt-node-webkit-builder&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nx"&gt;grunt&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;registerTask&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;default&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;nodewebkit&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Then:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;$&lt;span class="w"&gt; &lt;/span&gt;npm&lt;span class="w"&gt; &lt;/span&gt;install&lt;span class="w"&gt; &lt;/span&gt;grunt&lt;span class="w"&gt; &lt;/span&gt;grunt-node-webkit-builder&lt;span class="w"&gt; &lt;/span&gt;--save-dev
$&lt;span class="w"&gt; &lt;/span&gt;grunt
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;The first time will be slow because grunt will download precompiled nw binaries for all supported
platforms, which will be stored in &lt;strong&gt;dist/cache/&lt;/strong&gt;. From now you can compile for mac + linux + win
with a simple &lt;code&gt;grunt&lt;/code&gt; command. The compiled binaries will be stored in &lt;strong&gt;dist/releases/&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;Congratulations! You now know how to use yet another weird stack born out of the &lt;span class="caps"&gt;HTML5&lt;/span&gt; craze that
isn&amp;rsquo;t guaranteed to still be alive the next year (or even next month). For extra credit, use it to
piss off long-time &lt;span class="caps"&gt;UNIX&lt;/span&gt; Philosophy believers. The &lt;a href="http://suckless.org/philosophy"&gt;suckless&lt;/a&gt; community would be a good place to
start.&amp;nbsp;;)&lt;/p&gt;</content><category term="tutorials"></category><category term="linux"></category><category term="webdev"></category></entry><entry><title>How I bypassed my university’s domain blocker to watch movies on hdviet.com</title><link href="https://old.hi.imnhan.com/posts/how-i-bypassed-my-university-domain-blocker-to-access-hdviet/" rel="alternate"></link><published>2014-03-17T21:58:00+07:00</published><updated>2014-03-17T21:58:00+07:00</updated><author><name>Bùi Thành Nhân</name></author><id>tag:old.hi.imnhan.com,2014-03-17:/posts/how-i-bypassed-my-university-domain-blocker-to-access-hdviet/</id><summary type="html">&lt;p&gt;&lt;strong&gt;&lt;span class="caps"&gt;TL&lt;/span&gt;;&lt;span class="caps"&gt;DR&lt;/span&gt;&lt;/strong&gt;: Clone &lt;a href="https://github.com/nhanb/twisted-connect-proxy"&gt;my script from GitHub&lt;/a&gt;, run it with &lt;code&gt;python2 server.py 8080&lt;/code&gt;, configure your
browser to use localhost:8080 as &lt;span class="caps"&gt;HTTP&lt;/span&gt; and &lt;span class="caps"&gt;HTTPS&lt;/span&gt; proxy,&amp;nbsp;profit.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Disclaimer&lt;/strong&gt;: The sole reason I came up with this trick and documented it was to satisfy my
curiosity. I don&amp;rsquo;t come to …&lt;/p&gt;</summary><content type="html">&lt;p&gt;&lt;strong&gt;&lt;span class="caps"&gt;TL&lt;/span&gt;;&lt;span class="caps"&gt;DR&lt;/span&gt;&lt;/strong&gt;: Clone &lt;a href="https://github.com/nhanb/twisted-connect-proxy"&gt;my script from GitHub&lt;/a&gt;, run it with &lt;code&gt;python2 server.py 8080&lt;/code&gt;, configure your
browser to use localhost:8080 as &lt;span class="caps"&gt;HTTP&lt;/span&gt; and &lt;span class="caps"&gt;HTTPS&lt;/span&gt; proxy,&amp;nbsp;profit.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Disclaimer&lt;/strong&gt;: The sole reason I came up with this trick and documented it was to satisfy my
curiosity. I don&amp;rsquo;t come to campus often anymore so it&amp;rsquo;s not like I&amp;rsquo;m going to spend 8 hours a day
wasting the university&amp;rsquo;s internet bandwidth for &amp;ldquo;Two and a half men&amp;rdquo;&amp;nbsp;anyway&amp;hellip;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Another Note&lt;/strong&gt; (last one, promise!): If you&amp;rsquo;re using Mac &lt;span class="caps"&gt;OS&lt;/span&gt; X or Windows, Proxifier will probably
do the trick way better and without any hassle. If you&amp;rsquo;re using Linux or you simply want to learn
more about this stuff, read&amp;nbsp;on!&lt;/p&gt;
&lt;h2 id="the-problem"&gt;The problem&lt;a class="headerlink" href="#the-problem" title="Permanent link"&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;This semester the &lt;span class="caps"&gt;RMIT&lt;/span&gt;-&lt;span class="caps"&gt;WPA&lt;/span&gt; wifi network no longer requires manual proxy configuration (probably
because it makes Web Programming students miserable - they have to use Google App Engine), which is
good news. Nevertheless, that annoying domain filter is still up and running, meaning we still
can&amp;rsquo;t go to certain blacklisted websites. (mediafire, fshare, gamevn, vnsharing,&amp;nbsp;etc.)&lt;/p&gt;
&lt;p&gt;Hdviet&amp;rsquo;s case is a bit special: the domain &lt;code&gt;hdviet.com&lt;/code&gt; itself is not blocked, but the domain of
the actual server hosting its playlists &lt;span class="amp"&gt;&amp;amp;&lt;/span&gt; videos, &lt;code&gt;v-01.vn-hd.com&lt;/code&gt;, is. A quick look at Firefox&amp;rsquo;s
excellent Network inspector confirmed&amp;nbsp;that:&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="/images/hdviet_01_forbidden.png"&gt;&lt;/p&gt;
&lt;p&gt;If you request the file&amp;nbsp;directly:&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="/images/hdviet_02_forbidden_direct.png"&gt;&lt;/p&gt;
&lt;h2 id="going-for-the-ip"&gt;Going for the &lt;span class="caps"&gt;IP&lt;/span&gt;&lt;a class="headerlink" href="#going-for-the-ip" title="Permanent link"&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Naturally, I wanted to check if I could access the resource directly via the &lt;span class="caps"&gt;IP&lt;/span&gt;. An easy way to look
up a domain&amp;rsquo;s &lt;span class="caps"&gt;IP&lt;/span&gt; is using &lt;a href="http://ping.eu/ping/"&gt;ping.eu&lt;/a&gt;. Once you&amp;rsquo;ve got the &lt;span class="caps"&gt;IP&lt;/span&gt;, try replacing the domain with it in
the failed&amp;nbsp;request:&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="/images/hdviet_03_ip.png"&gt;&lt;/p&gt;
&lt;p&gt;This time it works, which means only the domain is blocked, not the &lt;span class="caps"&gt;IP&lt;/span&gt;.&lt;/p&gt;
&lt;p&gt;One thing worth noting about hdviet: The video is not served as 1 single file, it is instead
chopped into multiple parts, which are loaded in order. Therefore, our first job is to
automatically replace &lt;code&gt;v-01.vn-hd.com&lt;/code&gt; with the &lt;span class="caps"&gt;IP&lt;/span&gt; in all of the&amp;nbsp;requests.&lt;/p&gt;
&lt;h2 id="twisted-proxy"&gt;Twisted proxy&lt;a class="headerlink" href="#twisted-proxy" title="Permanent link"&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Since changing the request destination directly in the browser is probably difficult (I don&amp;rsquo;t think
Google Chrome even allows that), we&amp;rsquo;ll use an &lt;span class="caps"&gt;HTTP&lt;/span&gt;(S) proxy. This is when Twisted comes in&amp;nbsp;handy.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://twistedmatrix.com/"&gt;Twisted&lt;/a&gt; is a battery-included framework to build robust network applications. By
&amp;ldquo;battery-included&amp;rdquo; they mean that most of the common functionalities have already been implemented
so we can use them out of the box. For the purpose of this tutorial, we are only interested in its
&lt;span class="caps"&gt;HTTP&lt;/span&gt; proxy&amp;nbsp;library.&lt;/p&gt;
&lt;p&gt;To install twisted, use &lt;code&gt;pip&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;sudo&lt;span class="w"&gt; &lt;/span&gt;pip&lt;span class="w"&gt; &lt;/span&gt;install&lt;span class="w"&gt; &lt;/span&gt;twisted
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Since the default implementation doesn&amp;rsquo;t support &lt;span class="caps"&gt;HTTPS&lt;/span&gt;, we&amp;rsquo;ll use a &lt;a href="https://github.com/fmoo/twisted-connect-proxy"&gt;powered-up one&lt;/a&gt; I found on
GitHub, written by Peter Ruibal. Let&amp;rsquo;s clone this&amp;nbsp;thing:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;git&lt;span class="w"&gt; &lt;/span&gt;clone&lt;span class="w"&gt; &lt;/span&gt;https://github.com/fmoo/twisted-connect-proxy.git
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Now let&amp;rsquo;s try running the proxy server: &lt;code&gt;cd&lt;/code&gt; into the cloned directory and run it with &lt;code&gt;python2&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="nb"&gt;cd&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;twisted-connect-proxy
python2&lt;span class="w"&gt; &lt;/span&gt;server.py&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;8080&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Then configure your browser to use &lt;strong&gt;localhost:8080&lt;/strong&gt; as the proxy. For Firefox it&amp;rsquo;s&amp;nbsp;easy:&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="/images/hdviet_04_firefox_proxy.png"&gt;&lt;/p&gt;
&lt;p&gt;You should now be able to surf the web through the running proxy. But hey, you still can&amp;rsquo;t visit
any blocked site! Of course you can&amp;rsquo;t, since we haven&amp;rsquo;t replaced the domains with IPs. Let&amp;rsquo;s do&amp;nbsp;that.&lt;/p&gt;
&lt;h2 id="domain-to-ip"&gt;Domain to &lt;span class="caps"&gt;IP&lt;/span&gt;&lt;a class="headerlink" href="#domain-to-ip" title="Permanent link"&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Open &lt;code&gt;server.py&lt;/code&gt;, look for this&amp;nbsp;part:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;ConnectProxyRequest&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ProxyRequest&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot;HTTP ProxyRequest handler (factory) that supports CONNECT&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
    &lt;span class="n"&gt;connectedProtocol&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;None&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;process&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;method&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;CONNECT&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;processConnectRequest&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;ProxyRequest&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;process&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;The &lt;code&gt;process()&lt;/code&gt; method is in charge of forwarding whatever request the proxy receives to the actual
target server. Let&amp;rsquo;s intercept it with our own &lt;code&gt;redirect()&lt;/code&gt; function:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="n"&gt;redirects&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="s1"&gt;&amp;#39;v-01.vn-hd.com&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;125.212.216.93&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;  &lt;span class="c1"&gt;# video&lt;/span&gt;
    &lt;span class="s1"&gt;&amp;#39;s.vn-hd.com&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;210.211.120.146&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;  &lt;span class="c1"&gt;# sub&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;redirect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;req&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;domain&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;ip&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;redirects&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;items&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;req&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;find&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;domain&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;  &lt;span class="c1"&gt;# check if we&amp;#39;re requesting a blocked domain&lt;/span&gt;
            &lt;span class="n"&gt;req&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;uri&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;req&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;uri&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;replace&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;domain&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;ip&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="n"&gt;req&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;req&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;replace&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;domain&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;ip&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="n"&gt;req&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;requestHeaders&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;setRawHeaders&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;host&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;ip&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;  &lt;span class="c1"&gt;# replace &amp;quot;Host&amp;quot; header too&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;ConnectProxyRequest&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ProxyRequest&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot;HTTP ProxyRequest handler (factory) that supports CONNECT&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
    &lt;span class="n"&gt;connectedProtocol&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;None&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;process&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;redirect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  &lt;span class="c1"&gt;# intercept request processing&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;method&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;CONNECT&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;processConnectRequest&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="c1"&gt;# the rest of the file ...&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;In the snippet above, we defined a dictionary &lt;code&gt;redirects&lt;/code&gt; that stores the blocked domains that we
need to replace. Note that I added &lt;strong&gt;s.vn-hd.com&lt;/strong&gt; as well, which is the host that stores
subtitles. In our actual &lt;code&gt;redirect()&lt;/code&gt; function, we check if the request being processed is pointing
to any of the blocked domains defined earlier, then replace domain with its corresponding &lt;span class="caps"&gt;IP&lt;/span&gt; if
there is a&amp;nbsp;match:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="n"&gt;req&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;uri&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;req&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;uri&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;replace&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;domain&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;ip&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;req&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;req&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;replace&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;domain&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;ip&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;req&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;requestHeaders&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;setRawHeaders&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;host&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;ip&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Note that the 3rd line also changes the &amp;ldquo;Host&amp;rdquo; &lt;span class="caps"&gt;HTTP&lt;/span&gt; header. Yes, our beloved people from &lt;span class="caps"&gt;IT&lt;/span&gt;
Services do inspect &lt;span class="caps"&gt;HTTP&lt;/span&gt; headers to block stuff too. This line will introduce another problem that
I will explain later in this&amp;nbsp;post.&lt;/p&gt;
&lt;p&gt;Now restart our proxy server and check the link again. It should work. You can now watch stuff, but
you&amp;rsquo;ll notice that English subtitles are not shown even if you turn them&amp;nbsp;on:&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="/images/hdviet_05_no_sub.png"&gt;&lt;/p&gt;
&lt;p&gt;If you open the browser&amp;rsquo;s network inspector, reload the page and try to enable English subtitles
again, you&amp;rsquo;ll see the&amp;nbsp;problem:&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="/images/hdviet_06_404.png"&gt;&lt;/p&gt;
&lt;p&gt;The link in question&amp;nbsp;is:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;http://s.vn-hd.com/store6/21042013/Two_and_a_Half_Men_S02/E001/Two_and_a_Half_Men_S02_E001_ENG.srt
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Since &lt;strong&gt;s.vn-hd.com&lt;/strong&gt; is in our blocked domain dictionary (&lt;code&gt;redirects&lt;/code&gt;), the proxy server will
request&amp;nbsp;this:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;http://210.211.120.146/store6/21042013/Two_and_a_Half_Men_S02/E001/Two_and_a_Half_Men_S02_E001_ENG.srt
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;If you try to open it directly in a browser (that isn&amp;rsquo;t using our proxy server), you&amp;rsquo;ll get a 404
too.  Why is that? This is because the &lt;strong&gt;Host&lt;/strong&gt; header is also changed to &lt;strong&gt;210.211.120.146&lt;/strong&gt;
instead of the original domain &lt;strong&gt;s.vn-hd.com&lt;/strong&gt;. Normally a single web server can be serving
multiple domains at a time, and when we send an &lt;span class="caps"&gt;HTTP&lt;/span&gt; request, we need to specify &lt;code&gt;Host: &amp;lt;domain&amp;gt;&lt;/code&gt;
for the server to know which domain we want to get the resource from. When the &lt;strong&gt;Host&lt;/strong&gt; header is
simply the &lt;span class="caps"&gt;IP&lt;/span&gt;, the server may get confused and therefore cannot serve the correct resource. As for
&lt;strong&gt;v-01.vn-hd.com&lt;/strong&gt;, we got lucky in that&amp;nbsp;case.&lt;/p&gt;
&lt;p&gt;On the other hand, if we keep &lt;code&gt;Host: s.vn-hd.com&lt;/code&gt; as-is, &lt;span class="caps"&gt;RMIT&lt;/span&gt; will be able to block our request.
This leads to our final&amp;nbsp;trick:&lt;/p&gt;
&lt;h2 id="google-app-engine-to-the-rescue"&gt;Google App Engine to the rescue!&lt;a class="headerlink" href="#google-app-engine-to-the-rescue" title="Permanent link"&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Because a subtitle file is just plain text, its size is negligible. We can set up an external
website that receives our original request, fetches the requested file on hdviet&amp;rsquo;s server and
returns the requested file&amp;rsquo;s content back to us. I have already set up a proof-of-concept Google
App Engine website at &lt;strong&gt;hdviet-proxy.appspot.com&lt;/strong&gt;. It works like&amp;nbsp;this:&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="/images/hdviet_07_graph.png"&gt;&lt;/p&gt;
&lt;p&gt;Now we need to edit our server code to redirect any &lt;strong&gt;s.vn-hd.com&lt;/strong&gt; request to
&lt;strong&gt;hdviet-proxy.appspot.com/?url=original_url&lt;/strong&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;urllib&lt;/span&gt;

&lt;span class="n"&gt;sub_server&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;s.vn-hd.com&amp;#39;&lt;/span&gt;
&lt;span class="n"&gt;remote_server&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;hdviet-proxy.appspot.com&amp;#39;&lt;/span&gt;
&lt;span class="n"&gt;redirects&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="s1"&gt;&amp;#39;v-01.vn-hd.com&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;125.212.216.93&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;  &lt;span class="c1"&gt;# video&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;redirect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;req&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;domain&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;ip&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;redirects&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;items&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;req&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;find&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;domain&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;req&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;uri&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;req&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;uri&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;replace&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;domain&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;ip&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="n"&gt;req&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;req&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;replace&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;domain&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;ip&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="n"&gt;req&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;requestHeaders&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;setRawHeaders&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;host&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;ip&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt;
        &lt;span class="k"&gt;elif&lt;/span&gt; &lt;span class="n"&gt;req&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;find&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;sub_server&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;proxied_url&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;http://&lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s1"&gt;/?&lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;remote_server&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                                             &lt;span class="n"&gt;urllib&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;urlencode&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;url&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;req&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;uri&lt;/span&gt;&lt;span class="p"&gt;}))&lt;/span&gt;
            &lt;span class="n"&gt;req&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;uri&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;proxied_url&lt;/span&gt;
            &lt;span class="n"&gt;req&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;req&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;replace&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;sub_server&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;remote_server&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="n"&gt;req&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;requestHeaders&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;setRawHeaders&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;host&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;remote_server&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;You can view my &lt;a href="https://github.com/nhanb/twisted-connect-proxy"&gt;finished script on github&lt;/a&gt; and clone it to use right&amp;nbsp;away.&lt;/p&gt;
&lt;p&gt;If you want to set up your own website instead of using mine, it&amp;rsquo;s really simple. Just use the new
site template provided with &lt;span class="caps"&gt;GAE&lt;/span&gt; &lt;span class="caps"&gt;SDK&lt;/span&gt; and edit &lt;code&gt;main.py&lt;/code&gt; like&amp;nbsp;so:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;webapp2&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;google.appengine.api&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;urlfetch&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;MainHandler&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;webapp2&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;RequestHandler&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;url&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;url&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;resp&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;urlfetch&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;fetch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;url&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;content&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;response&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;write&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;resp&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;app&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;webapp2&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;WSGIApplication&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;
    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;/&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;MainHandler&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="n"&gt;debug&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="kc"&gt;True&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Remember to change the &lt;code&gt;remote_server&lt;/code&gt; variable in &lt;code&gt;server.py&lt;/code&gt; to match your appspot&amp;nbsp;link.&lt;/p&gt;
&lt;p&gt;Restart the server script, now when the browser requests for&amp;nbsp;this:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;http://s.vn-hd.com/store6/21042013/Two_and_a_Half_Men_S02/E001/Two_and_a_Half_Men_S02_E001_ENG.srt
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;code&gt;server.py&lt;/code&gt; will redirect to&amp;nbsp;this:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;http://hdviet-proxy.appspot.com/?url=http%3A%2F%2Fs.vn-hd.com%2Fstore6%2F21042013%2FTwo_and_a_Half_Men_S02%2FE001%2FTwo_and_a_Half_Men_S02_E001_ENG.srt
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;And the appspot site will get the original url, fetch its content, and give it right back to&amp;nbsp;us:&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="/images/hdviet_08_srt.png"&gt;&lt;/p&gt;
&lt;p&gt;You should now be able to watch movies with subtitles.&amp;nbsp;Congratulations!&lt;/p&gt;</content><category term="tutorials"></category><category term="ubuntu"></category><category term="linux"></category></entry><entry><title>What I did after installing Manjaro xfce</title><link href="https://old.hi.imnhan.com/posts/what-i-did-after-installing-manjaro-xfce/" rel="alternate"></link><published>2014-02-04T20:20:13+07:00</published><updated>2014-02-04T20:20:13+07:00</updated><author><name>Bùi Thành Nhân</name></author><id>tag:old.hi.imnhan.com,2014-02-04:/posts/what-i-did-after-installing-manjaro-xfce/</id><summary type="html">&lt;p&gt;After about 2 months with elementary &lt;span class="caps"&gt;OS&lt;/span&gt;, I got sick of the guaranteed once-every-hour crashes of
its &lt;strong&gt;Files&lt;/strong&gt; file manager (yeah, I&amp;rsquo;m still hating their naming decisions with a passion), the
flickering when I play fullscreen OpenGL games, and the automatic collapsing of workspaces. I&amp;rsquo;ve
had enough of …&lt;/p&gt;</summary><content type="html">&lt;p&gt;After about 2 months with elementary &lt;span class="caps"&gt;OS&lt;/span&gt;, I got sick of the guaranteed once-every-hour crashes of
its &lt;strong&gt;Files&lt;/strong&gt; file manager (yeah, I&amp;rsquo;m still hating their naming decisions with a passion), the
flickering when I play fullscreen OpenGL games, and the automatic collapsing of workspaces. I&amp;rsquo;ve
had enough of that. Let&amp;rsquo;s go back to xfce! But hey, (X)ubuntu 14.04 is nearly out but I don&amp;rsquo;t want
to install an alpha version right now, and installing 13.10 just to update 2 months later is insane
(to me, at least). That&amp;rsquo;s when I noticed &lt;a href="http://manjaro.org/"&gt;Manjaro&lt;/a&gt; - a battery-included distro based on Arch.
All hail rolling&amp;nbsp;release!&lt;/p&gt;
&lt;p&gt;Although Manjaro comes packed with most of the apps that I would install on any other distro
anyway: &lt;span class="caps"&gt;GIMP&lt;/span&gt;, LibreOffice, Steam, etc., here are some additional steps I took to make it&amp;nbsp;rock.&lt;/p&gt;
&lt;h2 id="if-you-get-a-default-xfce-environment-after-setup"&gt;If you get a default xfce environment after setup&amp;hellip;&lt;a class="headerlink" href="#if-you-get-a-default-xfce-environment-after-setup" title="Permanent link"&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;It happened to me when I tried to mount my existing &lt;code&gt;/home&lt;/code&gt; partition. Instead of the beautiful
screenshot featured on Manjaro&amp;rsquo;s home page, I got something like this (image courtesy of Xfce
project&amp;nbsp;website):&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="/images/xfce_default.jpg"&gt;&lt;/p&gt;
&lt;p&gt;I guess it was because of some weird bug that the partition ended up being owned by &lt;code&gt;root&lt;/code&gt; so the
installer could not copy Manjaro-specific settings at the end. Make it your own again then copy the
default Manjaro&amp;nbsp;files:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;sudo&lt;span class="w"&gt; &lt;/span&gt;chown&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;$USER&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;/home
cp&lt;span class="w"&gt; &lt;/span&gt;-a&lt;span class="w"&gt; &lt;/span&gt;/etc/skel/.&lt;span class="w"&gt; &lt;/span&gt;~/
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Then restart your computer and see if it worked (it&amp;nbsp;should).&lt;/p&gt;
&lt;h2 id="get-mirosoft-fonts"&gt;Get Mirosoft fonts&lt;a class="headerlink" href="#get-mirosoft-fonts" title="Permanent link"&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Getting Micro$oft fonts is like the first thing to do after any Linux distro installation. The Arch
community has a whole &lt;a href="https://wiki.archlinux.org/index.php/MS_Fonts"&gt;wiki page&lt;/a&gt; dedicated to it. It&amp;rsquo;s worth mentioning that you can&amp;rsquo;t
&lt;em&gt;legally&lt;/em&gt; install those packages without the actual fonts already on your computer. Assuming you
have an installed copy of Windows 7, go to its &lt;code&gt;Fonts&lt;/code&gt; folder and put the necessary fonts in the
same folder of the extracted package downloaded from the &lt;span class="caps"&gt;AUR&lt;/span&gt; page. For some instant copy-and-paste
shell commands: (&lt;strong&gt;warning&lt;/strong&gt;: this script assumes you already have all your Windows 7 fonts in
&lt;code&gt;~/win_fonts/&lt;/code&gt;. Put them there before running the following&amp;nbsp;commands)&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;curl&lt;span class="w"&gt; &lt;/span&gt;-O&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;https://gist.github.com/nhanb/8804875/raw/arch-ms-fonts.sh&amp;#39;&lt;/span&gt;
bash&lt;span class="w"&gt; &lt;/span&gt;arch-ms-fonts.sh
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h2 id="proper-font-smoothing"&gt;Proper font smoothing&lt;a class="headerlink" href="#proper-font-smoothing" title="Permanent link"&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;I won&amp;rsquo;t try to reinvent the wheels here. Head to Manjaro&amp;rsquo;s &lt;a href="http://wiki.manjaro.org/index.php?title=Improve_Font_Rendering"&gt;wiki page on font smoothing&lt;/a&gt;.
They&amp;rsquo;ve got everything you&amp;nbsp;need.&lt;/p&gt;
&lt;h2 id="install-international-fonts"&gt;Install international fonts&lt;a class="headerlink" href="#install-international-fonts" title="Permanent link"&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Even if you&amp;rsquo;re not Japanese or Korean, you&amp;rsquo;ll occasionally come across content that contains
characters from these languages. With the default installation, all those characters will be shown
as rectangles, which bugs me a&amp;nbsp;lot.&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="/images/jap_font_none.png"&gt;&lt;/p&gt;
&lt;p&gt;The solution? Simple. Just install the &lt;code&gt;ttf-droid&lt;/code&gt; package:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;sudo&lt;span class="w"&gt; &lt;/span&gt;pacman&lt;span class="w"&gt; &lt;/span&gt;-S&lt;span class="w"&gt; &lt;/span&gt;ttf-droid
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;img alt="" src="/images/jap_font_done.png"&gt;&lt;/p&gt;
&lt;p&gt;Now that&amp;rsquo;s&amp;nbsp;better!&lt;/p&gt;</content><category term="tutorials"></category><category term="arch"></category><category term="linux"></category></entry><entry><title>“Have you built anything cool?”</title><link href="https://old.hi.imnhan.com/posts/have-you-built-anything-cool/" rel="alternate"></link><published>2014-01-25T10:37:00+07:00</published><updated>2014-01-25T10:37:00+07:00</updated><author><name>Bùi Thành Nhân</name></author><id>tag:old.hi.imnhan.com,2014-01-25:/posts/have-you-built-anything-cool/</id><summary type="html">&lt;p&gt;So recently I went to a &lt;em&gt;networking event&lt;/em&gt;&amp;ndash;something I have never liked or been good at. I&amp;rsquo;m
not sure if I&amp;rsquo;m one of those introverts or if I&amp;rsquo;m just socially awkward, but the very idea of
going around trying to converse with total strangers just to …&lt;/p&gt;</summary><content type="html">&lt;p&gt;So recently I went to a &lt;em&gt;networking event&lt;/em&gt;&amp;ndash;something I have never liked or been good at. I&amp;rsquo;m
not sure if I&amp;rsquo;m one of those introverts or if I&amp;rsquo;m just socially awkward, but the very idea of
going around trying to converse with total strangers just to exchange business cards is not at all
appealing to me. Anyway, that&amp;rsquo;s another story. Right now I want to write about something a guy
from a non-tech company asked&amp;nbsp;me:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;- Have you built anything cool?&lt;br&gt;
- [pause] Well, more or less&amp;hellip;&lt;br&gt;
- What do you mean by &amp;ldquo;more or less&amp;rdquo;? [&amp;hellip;] Have you built anything at&amp;nbsp;all?  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Then I went on trying to explain what my recent side project&amp;ndash;
&lt;a href="https://pytaku-legacy.appspot.com"&gt;pytaku&lt;/a&gt;&amp;ndash;does and why it is awesome for me. He seemed to be
disinterested halfway through so I decided to shut up&amp;nbsp;anyway.&lt;/p&gt;
&lt;p&gt;Sure, I have done stuff now and then, be it assignment work or something I decided to create
for my own amusement. It is just funny how I have already stepped into to my final year without
taking a proper look back at what I have done in these past 2 years, so I&amp;rsquo;m going to do just&amp;nbsp;that.&lt;/p&gt;
&lt;p&gt;If you&amp;ndash;Nicholas&amp;ndash;are reading this and don&amp;rsquo;t want all the nerdy stuff, here are my condensed&amp;nbsp;answers:&lt;/p&gt;
&lt;h3 id="have-you-built-anything"&gt;Have you built anything?&lt;a class="headerlink" href="#have-you-built-anything" title="Permanent link"&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Yes, I have made desktop and Android games, a movie ticket sales program, a desktop manga
grabber, a web version of it that talks to dropbox, and several small shell scripts / web&amp;nbsp;utilities.&lt;/p&gt;
&lt;h3 id="so-nothing-cool"&gt;So, nothing cool?&lt;a class="headerlink" href="#so-nothing-cool" title="Permanent link"&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;If you&amp;rsquo;re neither a tech geek nor an otaku (which I assume you&amp;rsquo;re not) then no, there&amp;rsquo;s probably
nothing I&amp;rsquo;ve done that you would find&amp;nbsp;interesting.&lt;/p&gt;
&lt;h2 id="nerd-alert"&gt;Nerd alert!&lt;a class="headerlink" href="#nerd-alert" title="Permanent link"&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;The rest of this post is aimed at the &lt;del&gt;nerdier&lt;/del&gt; more tech-savvy audience. You have been
warned&amp;nbsp;;)&lt;/p&gt;
&lt;h2 id="first-year-welcome-to-the-web-and-the-gui-programming-disillusionment"&gt;First year&amp;ndash;Welcome to the web, and the &lt;span class="caps"&gt;GUI&lt;/span&gt; programming disillusionment&lt;a class="headerlink" href="#first-year-welcome-to-the-web-and-the-gui-programming-disillusionment" title="Permanent link"&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;I had touched &lt;em&gt;web stuff&lt;/em&gt; before in high school: a vBulletin forum that I created (unofficially)
for students in my middle school. However, I only properly learned &lt;span class="caps"&gt;PHP&lt;/span&gt; and &lt;span class="caps"&gt;JS&lt;/span&gt; when I started the
Web Programming course here. With (moderately) great power came great desires, so I set out to
build a basic &lt;span class="caps"&gt;PHP&lt;/span&gt; site to scrape a youtube view page&amp;rsquo;s &lt;span class="caps"&gt;HTML&lt;/span&gt; to get direct video links (not working
anymore since a recent youtube&amp;nbsp;update)&lt;/p&gt;
&lt;p&gt;&lt;img alt="tubegrab v2.9" src="/images/tubegrab.jpg" title="tubegrab v2.9"&gt;&lt;/p&gt;
&lt;p&gt;That was my first touch on jQueryUI and regular expressions; I also learned how &lt;span class="caps"&gt;RMIT&lt;/span&gt;&amp;rsquo;s mekong
server sucked to the point that it didn&amp;rsquo;t allow &lt;code&gt;get_file_contents()&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;About school assignments? Nothing interesting: standard minimal &lt;span class="caps"&gt;LAMP&lt;/span&gt; &lt;span class="caps"&gt;CMS&lt;/span&gt; with jQuery glitter
sprinkled on top. Not a bad experience but&amp;nbsp;meh.&lt;/p&gt;
&lt;p&gt;I also learned about &lt;span class="caps"&gt;MVC&lt;/span&gt; and &lt;span class="caps"&gt;GUI&lt;/span&gt; programming with Java swing. I did write a movie ticket program
with a (pretty minimal) seat picker and
&lt;a href="https://github.com/nhanb/sealord"&gt;a battleship-inspired game&lt;/a&gt;: &lt;/p&gt;
&lt;p&gt;&lt;img alt="Cinema Movie Picker" src="/images/cinema_1.png" title="Cinema Movie Picker"&gt;
&lt;img alt="Seat Picker" src="/images/cinema_2.png" title="Seat Picker"&gt;
&lt;img alt="Sealord" src="/images/sealord.png"&gt;&lt;/p&gt;
&lt;p&gt;Then it occurred to me that programming &lt;span class="caps"&gt;GUI&lt;/span&gt; interfaces for desktop programs was much more tedious
than doing it for the web, especially when working with the now-not-favored Swing toolkit.
Nightmarish&amp;nbsp;days&amp;hellip;&lt;/p&gt;
&lt;p&gt;Another lesson learned the hard way was that &amp;ldquo;&lt;span class="caps"&gt;MVC&lt;/span&gt;&amp;rdquo; is not even a concrete thing, and there is
hardly any obvious &amp;ldquo;one true way&amp;rdquo; to implement that. I spent much more time planning for plumbing
code than I the time I spent actually writing &amp;ldquo;feature&amp;rdquo; code. And the result, now looking back, was
not even that good. And yeah, there was no such thing as &amp;ldquo;separation of concerns&amp;rdquo; in my code back
then, which eventually led to countless times of tracing obscure stack traces for debugging (good
thing I had a lot of free time back&amp;nbsp;then).&lt;/p&gt;
&lt;p&gt;To rub salt in the wound, I came to realize that nobody cared how Swing looked on any desktop
environment other than &lt;span class="caps"&gt;OS&lt;/span&gt; X and Windows. Font rendering was painful to look at, and the only way to
make it &lt;em&gt;a little bit&lt;/em&gt; more acceptable was using a
&lt;a href="http://www.webupd8.org/2013/06/install-openjdk-patched-with-font-fixes.html"&gt;forked version of OpenJDK&lt;/a&gt;.
&lt;span class="caps"&gt;WTF&lt;/span&gt; guys? And that&amp;rsquo;s not the only problem; let&amp;rsquo;s talk Look And Feel. Java&amp;rsquo;s built-in
getSystemLookAndFeel() could only detect &lt;span class="caps"&gt;GNOME&lt;/span&gt;&amp;rsquo;s. When developing &lt;code&gt;ajmg&lt;/code&gt; I discovered that and had
to write my own method that extended the thing to detect more DEs, but soon after that I thought
&amp;ldquo;What the hell, why do I even have to do this?&amp;rdquo; and decided that Swing was dead to me (or any
desktop Linux user for that&amp;nbsp;matter).&lt;/p&gt;
&lt;h2 id="second-year-enough-of-this-bull-school-crap-im-making-stuff-for-myself"&gt;Second year: enough of this &lt;del&gt;bull&lt;/del&gt; school crap. I&amp;rsquo;m making stuff for myself!&lt;a class="headerlink" href="#second-year-enough-of-this-bull-school-crap-im-making-stuff-for-myself" title="Permanent link"&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;To be fair, the following year has offered a number of new stuff: C/C++ programming, a taste of the
M$ .&lt;span class="caps"&gt;NET&lt;/span&gt; C# stack (still impressed by Visual Studio&amp;rsquo;s vi mode plugin), more Java,
&lt;a href="http://truongtx.me/2013/05/02/agent-069-game/"&gt;Android app programming&lt;/a&gt;, and some neat security
tricks. However, none of those intrigued me much, so I decided to start making things for my&amp;nbsp;own:&lt;/p&gt;
&lt;h3 id="shell-scripts"&gt;Shell scripts&lt;a class="headerlink" href="#shell-scripts" title="Permanent link"&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;If you have taken a look at my &lt;a href="https://github.com/nhanb/dotfiles"&gt;dotfiles&lt;/a&gt;, you&amp;rsquo;ll notice that I
do write a bunch of shell scripts to automate stuff I do often. The one I&amp;rsquo;m currently proudest of
is &lt;a href="https://github.com/nhanb/dotfiles/blob/master/scripts/rmitproxy_silent"&gt;rmiproxy_silent&lt;/a&gt;, a
script that automatically detects whether I am using &lt;span class="caps"&gt;RMIT&lt;/span&gt;&amp;rsquo;s network and set/clear the appropriate
proxy settings. Another one that I can&amp;rsquo;t live without is
&lt;a href="https://github.com/nhanb/dotfiles/blob/master/install.sh"&gt;install.sh&lt;/a&gt;, a script that helps install
all my dotfiles, sets up zsh and various things. It saved me &lt;em&gt;a lot&lt;/em&gt; of time whenever I reinstall
my&amp;nbsp;system.&lt;/p&gt;
&lt;p&gt;Obligatory shout-out to &lt;a href="https://github.com/robbyrussell/oh-my-zsh/"&gt;oh-my-zsh&lt;/a&gt;, greatest invention
since sliced bread! Those guys are&amp;nbsp;awesome!&lt;/p&gt;
&lt;h3 id="ajmg-then-pytaku-then-who-knows"&gt;&lt;span class="caps"&gt;AJMG&lt;/span&gt;, then Pytaku, then&amp;hellip; who knows?&lt;a class="headerlink" href="#ajmg-then-pytaku-then-who-knows" title="Permanent link"&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;The original idea was actually creating a Java Swing program that helps download manga. It was born
out of frustration of &lt;a href="http://blog.domdomsoft.com/"&gt;DomDomSoft&lt;/a&gt;, a manga downloader that requires
&amp;ldquo;donation&amp;rdquo; to unlock full functionalities. &amp;ldquo;I could do that, and I&amp;rsquo;ll open source the crap out of
it, because open source is awesome&amp;rdquo;, I thought. Then I spent some time and got the minimal program
working&amp;nbsp;program:&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="/images/ajmg.png"&gt;&lt;/p&gt;
&lt;p&gt;This program did help me get a firm knowledge of java&amp;rsquo;s thread manipulation and using http proxy
(so I could exploit &lt;span class="caps"&gt;RMIT&lt;/span&gt;&amp;rsquo;s awesome network bandwidth). I also succeeded in achieving separation of
concern to a certain level this time, allowing contributors (if any) to easily add support for
other manga reader sites. But then again, Swing&amp;rsquo;s quirks put me off, so my bad habit of losing
interest quickly kicked in and the project stopped&amp;nbsp;there.&lt;/p&gt;
&lt;p&gt;Then came &lt;a href="https://pytaku-legacy.appspot.com"&gt;Pytaku&lt;/a&gt;, ajmg&amp;rsquo;s spiritual successor. At this point I
knew enough of python and wanted to try out Google App Engine, so I decided to make a web version
of &lt;span class="caps"&gt;AJMG&lt;/span&gt;, with the difference that instead of downloading directly, it forwards everything to the
user&amp;rsquo;s Dropbox folder. Why not Google Drive you ask? Because they haven&amp;rsquo;t even bothered to release
an official Linux client for it. Shame on you,&amp;nbsp;Google!&lt;/p&gt;
&lt;p&gt;Loads of exciting things were learned along the way: how &lt;span class="caps"&gt;URL&lt;/span&gt; handling works in webapp2 and in other
web frameworks in general, proper templating (can&amp;rsquo;t believe I ever wrote &lt;code&gt;&amp;lt;title&amp;gt;&amp;lt;?php echo $title;
?&amp;gt;&amp;lt;/title&amp;gt;&lt;/code&gt;&amp;hellip; not cool!), OAuth2 (more than a few &amp;ldquo;Aha!&amp;rdquo; moments working with this little guy&amp;hellip;),
Google&amp;rsquo;s Datastore and NoSQL in general, and of course, Twitter Bootstrap&amp;ndash;saving clueless
non-designer developers since its&amp;nbsp;inception.&lt;/p&gt;
&lt;p&gt;And now, I&amp;rsquo;m rewriting it from scratch, this time trying out &lt;span class="caps"&gt;TDD&lt;/span&gt;, making use of
&lt;a href="https://travis-ci.org/nhanb/pytaku"&gt;travis-ci&lt;/a&gt;, which will be especially helpful to periodically
test if a manga site has changed its page layout and screwed up Pytaku&amp;rsquo;s scraping code. I have
encountered a number of quirks when trying to set up the correct testing boilerplate for a Google
App Engine project, but it seems everything will be smooth from now on. This holiday season I plan
to at least roll out an alpha version to show off. Stay tuned if you&amp;rsquo;re&amp;nbsp;interested!&lt;/p&gt;
&lt;h2 id="to-sum-it-up"&gt;To sum it up&amp;hellip;&lt;a class="headerlink" href="#to-sum-it-up" title="Permanent link"&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;I don&amp;rsquo;t believe in developing products I myself don&amp;rsquo;t want to use. I want to make things that make
my life easier, and if that helps others too then it&amp;rsquo;s a huge bonus. This is why Github is my
favorite company right now, and
&lt;a href="https://www.youtube.com/watch?v=qyz3jkOBbQY"&gt;How GitHub uses GitHub to build GitHub&lt;/a&gt; remains the
best developer speech I have ever&amp;nbsp;seen.&lt;/p&gt;
&lt;p&gt;Right now I haven&amp;rsquo;t made a full-blown program that I can confidently distribute to end users, but I
certainly have made quite a few nifty tools to improve my day-to-day computing tasks and learned a
lot along the way. Right now I cannot confidently answer this big question by pointing them to a
polished website detailing every nook and cranny of my shiny widely-used, battle-tested program,
but I&amp;rsquo;m confident I have the right knowledge to get there. If there is such a thing as &amp;ldquo;Lunar New
Year Resolution&amp;rdquo;, I guess mine is that one year from now, I will have a satisfying answer to this
question. Watch out world, I&amp;rsquo;m&amp;nbsp;coming!&lt;/p&gt;
&lt;p&gt;If you managed to get here, you are probably a tech geek like me. So, have &lt;em&gt;you&lt;/em&gt; built anything
cool&amp;nbsp;recently?&lt;/p&gt;</content><category term="misc"></category></entry><entry><title>Installing programs in Ubuntu</title><link href="https://old.hi.imnhan.com/posts/installing-programs-in-ubuntu/" rel="alternate"></link><published>2013-09-06T21:03:00+07:00</published><updated>2013-09-06T21:03:00+07:00</updated><author><name>Bùi Thành Nhân</name></author><id>tag:old.hi.imnhan.com,2013-09-06:/posts/installing-programs-in-ubuntu/</id><summary type="html">&lt;p&gt;Or the story of runtime paths, executables, packages and package&amp;nbsp;managers&lt;/p&gt;</summary><content type="html">&lt;p&gt;This article will not only explain how to install stuff, but it will (hopefully) also give readers
a better understanding about Linux&amp;rsquo;s structure for storing and executing programs, ultimately
appreciate the usefulness of package managers in&amp;nbsp;general.&lt;/p&gt;
&lt;h2 id="executables"&gt;Executables&lt;a class="headerlink" href="#executables" title="Permanent link"&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Let&amp;rsquo;s start with something simple. Fire up your favorite text editor and create a file called
&lt;code&gt;itc.sh&lt;/code&gt; with the following&amp;nbsp;content:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="ch"&gt;#!/bin/bash&lt;/span&gt;

notify-send&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Hello world!&amp;quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Let&amp;rsquo;s say I put it at the desktop. Now open up a terminal, go to the Desktop directory and make
our itc file executable. In case you&amp;rsquo;re new, here are the&amp;nbsp;commands:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="nb"&gt;cd&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;/home/your_username/Desktop
chmod&lt;span class="w"&gt; &lt;/span&gt;+x&lt;span class="w"&gt; &lt;/span&gt;itc.sh
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;Protip&lt;/strong&gt;: for the first command you can also type &lt;code&gt;cd ~/Desktop&lt;/code&gt;, because &lt;code&gt;~&lt;/code&gt; is the shorthand for
your home directory (&lt;code&gt;/home/username&lt;/code&gt;)&lt;/p&gt;
&lt;p&gt;With the &lt;code&gt;chmod&lt;/code&gt; command, we made it possible to run our little script by typing its full&amp;nbsp;path:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;~/Desktop/itc.sh
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Another shorthand to make your life easier: &lt;code&gt;.&lt;/code&gt; stands for &amp;ldquo;current directory&amp;rdquo;, meaning if you are
currently in the &lt;code&gt;~/Desktop&lt;/code&gt; directory, you can run the script by simply&amp;nbsp;typing:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;./itc.sh
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Either way, a notification saying &amp;ldquo;Hello world!&amp;rdquo; should pop up. This is a program in its
simplest form: an executable file. In this particular example it is a Bash script, but it&amp;rsquo;s not
limited to that. It can be a Python or Ruby script, or a compiled binary file. The file extension
isn&amp;rsquo;t even needed. You can rename it to simply &lt;code&gt;itc&lt;/code&gt; and it should run just&amp;nbsp;fine.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;In order to run a file, you need to make it executable. This can be done with the &lt;code&gt;chmod&lt;/code&gt; command
or via the &lt;span class="caps"&gt;GUI&lt;/span&gt; &lt;a href="http://askubuntu.com/questions/35478/how-do-i-mark-a-file-as-executable-via-a-gui"&gt;using Nautilus&amp;rsquo;s &lt;strong&gt;Properties&lt;/strong&gt; dialog&lt;/a&gt;.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id="path"&gt;Path&lt;a class="headerlink" href="#path" title="Permanent link"&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;So we&amp;rsquo;ve created a program that shows a useless message, good job! However, every time we call
it, we need to specify the whole address to the file: &lt;code&gt;~/Desktop/itc&lt;/code&gt; is probably not a very cool
looking command. In order to make it possible to simply run &lt;code&gt;itc&lt;/code&gt;, you need to move it to the
&lt;code&gt;/usr/bin/&lt;/code&gt; directory. This requires root permission so we&amp;rsquo;ll need &lt;code&gt;sudo&lt;/code&gt; too:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;sudo&lt;span class="w"&gt; &lt;/span&gt;mv&lt;span class="w"&gt; &lt;/span&gt;~/Desktop/itc&lt;span class="w"&gt; &lt;/span&gt;/usr/bin/itc
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;We can now run our program by simply typing &lt;code&gt;itc&lt;/code&gt;. You guessed it: every executable file put in
this directory will be available as a command. There are other directories like this too. You can
see a whole list of such directories by typing &lt;code&gt;echo $PATH&lt;/code&gt; to your&amp;nbsp;terminal.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;To make an executable file available as a command, shove it into a directory that&amp;rsquo;s included in
&lt;strong&gt;$&lt;span class="caps"&gt;PATH&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id="packages"&gt;Packages&lt;a class="headerlink" href="#packages" title="Permanent link"&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Unfortunately, most programs have a lot of files instead of one, and they are scattered to many
different folders. Let&amp;rsquo;s have a look at the files of &lt;code&gt;wget&lt;/code&gt; - the downloader that&amp;rsquo;s included in
every major Linux&amp;nbsp;distribution:&lt;/p&gt;
&lt;p&gt;&lt;img alt="Wget files" src="/images/wget-installed-files.png"&gt;&lt;/p&gt;
&lt;p&gt;It&amp;rsquo;s not that the developers chose to annoy us by scattering them all over the place. It&amp;rsquo;s simply
complying to Linux structure: executable files go to &lt;strong&gt;/usr/bin&lt;/strong&gt;, man pages (user manuals that
show up when you type &lt;code&gt;man wget&lt;/code&gt;) go to &lt;strong&gt;/usr/share/man&lt;/strong&gt;, and so on. For more complex programs,
the number of files alone is terrifying, which makes installing and remove the program a&amp;nbsp;nightmare.&lt;/p&gt;
&lt;p&gt;On another note, almost every Linux program depends on one or many other programs. This is
because of the &lt;span class="caps"&gt;UNIX&lt;/span&gt; philosophy that encourages writing each program to do one thing, and do it
well. The goal is to make each program easier to implement and maintain as well as to avoid
duplicate work. For example, program A may provide a functionality that both programs B and C
need. Otherwise, B and C developers both have to write code for one same functionality. In this
case, A is called a &lt;strong&gt;dependency&lt;/strong&gt; of B and C. However, this introduces a bunch of&amp;nbsp;problems:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;We need to install A before installing&amp;nbsp;B&lt;/li&gt;
&lt;li&gt;We should know not to install A again when we install&amp;nbsp;C&lt;/li&gt;
&lt;li&gt;We must be careful not to remove A if we are still using B or&amp;nbsp;C&lt;/li&gt;
&lt;li&gt;What if B and C require different versions of&amp;nbsp;A?&lt;/li&gt;
&lt;li&gt;I can go&amp;nbsp;on&amp;hellip;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;This is where packages jump in. A package is basically the whole set of files of a program (or a
part of a program). It also stores necessary information such as which file goes to which
directory, what are the dependencies of this package, etc. A special program reads the
package, installs dependencies and puts files into their appropriate locations. This is called
a &lt;strong&gt;package manager&lt;/strong&gt;. Of course besides installing, a package manager also manages updates
and removals of programs. Ubuntu is based on Debian, so it inherits Debian&amp;rsquo;s great package manager
called &lt;strong&gt;aptitude&lt;/strong&gt; (or simply &lt;code&gt;apt&lt;/code&gt;). Let&amp;rsquo;s take a look at wget&amp;rsquo;s&amp;nbsp;dependencies:&lt;/p&gt;
&lt;p&gt;&lt;img alt="Wget files" src="/images/wget-dependencies.png"&gt;&lt;/p&gt;
&lt;p&gt;The package manager maintains a list of available packages and their dependency/dependant
relationships. For Ubuntu, the list is updated regularly on Canonical&amp;rsquo;s official servers. Everytime
Ubuntu does the &amp;ldquo;Check for updates&amp;rdquo; thing, it is downloading the latest list of packages. And when
Ubuntu updates, it is simply pulling newer versions of the installed packages from Canonical&amp;rsquo;s
servers too. These servers are called &lt;strong&gt;repositories&lt;/strong&gt;. All other major Linux distributions do the
same thing: letting the package manager and the repositories work on their thing, saving users
time to do more interesting&amp;nbsp;stuff.&lt;/p&gt;
&lt;p&gt;Here are some basic commands to get you&amp;nbsp;started:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;sudo apt-get install package-name&lt;/code&gt; to install&amp;nbsp;package&lt;/li&gt;
&lt;li&gt;&lt;code&gt;sudo apt-get remove package-name&lt;/code&gt; - it&amp;rsquo;s obvious isn&amp;rsquo;t&amp;nbsp;it?&lt;/li&gt;
&lt;li&gt;&lt;code&gt;sudo apt-get update&lt;/code&gt; - update package list. Note that it only updates the list, not the&amp;nbsp;packages&lt;/li&gt;
&lt;li&gt;&lt;code&gt;sudo apt-get upgrade&lt;/code&gt; - upgrade packages to their latest&amp;nbsp;versions&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;There will be programs that are not available on the official repositories, but are provided as
package files (Dropbox for example). Remember that the right package format for Ubuntu is &lt;code&gt;.deb&lt;/code&gt;
files. Do not open &lt;code&gt;.rpm&lt;/code&gt; files since they are for Fedora&amp;rsquo;s package manager called &lt;code&gt;yum&lt;/code&gt;. When
you&amp;rsquo;ve obtained the file, simply open it with Ubuntu Software Center to start&amp;nbsp;installing.&lt;/p&gt;
&lt;h2 id="synaptic-ubuntu-software-center"&gt;Synaptic, Ubuntu Software Center&lt;a class="headerlink" href="#synaptic-ubuntu-software-center" title="Permanent link"&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Aptitude is only a command-line program, which is not very user-friendly. Synaptic is a &lt;span class="caps"&gt;GUI&lt;/span&gt; program
that provides a nice user interface that&amp;rsquo;s easy to use, while internally it uses &lt;code&gt;apt&lt;/code&gt; to do all
the actual&amp;nbsp;work.&lt;/p&gt;
&lt;p&gt;&lt;img alt="Wget files" src="/images/wget-dependencies.png"&gt;&lt;/p&gt;
&lt;p&gt;Ubuntu Software Center is more than a &lt;span class="caps"&gt;GUI&lt;/span&gt; wrapper for &lt;code&gt;apt&lt;/code&gt;. It is something similar to Apple&amp;rsquo;s
appstore with all those program ratings and promotions. It&amp;rsquo;s nice for beginners but the fact that
it hides the details like dependency list makes it undesirable for intermediate users. If you are
comfortable with Synaptic, I strongly recommend using it as your main way to install/uninstall
stuff. But ultimately, using the command-line &lt;code&gt;apt&lt;/code&gt; always is the fastest&amp;nbsp;way.&lt;/p&gt;</content><category term="tutorials"></category><category term="ubuntu"></category><category term="linux"></category></entry><entry><title>Fix RMIT wi-fi issue in Ubuntu 13.04 and variants</title><link href="https://old.hi.imnhan.com/posts/fix-rmit-wifi-issue-in-ubuntu-13-04-and-variants/" rel="alternate"></link><published>2013-06-17T08:12:00+07:00</published><updated>2013-06-17T08:12:00+07:00</updated><author><name>Bùi Thành Nhân</name></author><id>tag:old.hi.imnhan.com,2013-06-17:/posts/fix-rmit-wifi-issue-in-ubuntu-13-04-and-variants/</id><summary type="html">&lt;p&gt;The problem is NetworkManager - there&amp;rsquo;s a workaround but nobody has been formally assigned to fix&amp;nbsp;it.&lt;/p&gt;</summary><content type="html">&lt;h2 id="the-issue"&gt;The issue&lt;a class="headerlink" href="#the-issue" title="Permanent link"&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;When I upgraded to Xubuntu 13.04, although I could connect to any other wi-fi network painlessly,
the &lt;span class="caps"&gt;RMIT&lt;/span&gt;-&lt;span class="caps"&gt;WPA&lt;/span&gt; network just never allowed me to establish a connection. The most annoying part was
that it had been working fine in previous versions (12.04,&amp;nbsp;12.10).&lt;/p&gt;
&lt;p&gt;After days of googling, I finally pinpointed the issue: a certain version of NetworkManager
bundled in Ubuntu 13.04 has a bug that automatically turns &lt;span class="caps"&gt;CA&lt;/span&gt; certificate usage to &lt;em&gt;true&lt;/em&gt; for any
&lt;span class="caps"&gt;WPA2&lt;/span&gt; wifi network, even if we choose to use none in the &lt;span class="caps"&gt;GUI&lt;/span&gt;.&lt;/p&gt;
&lt;p&gt;&lt;img alt="RMIT wi-fi settings" src="/images/rmit_wifi.png"&gt;&lt;/p&gt;
&lt;h2 id="the-solution"&gt;The solution&lt;a class="headerlink" href="#the-solution" title="Permanent link"&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Just manually edit &lt;code&gt;/etc/NetworkManager/system-connections/RMIT-WPA&lt;/code&gt;, make sure that you have
&lt;code&gt;system-ca-certs=false&lt;/code&gt;, then restart the wifi connection. To edit this file you will need root
permission. If you&amp;rsquo;re not sure how to do this, open a terminal and enter this command to open
&lt;code&gt;gedit&lt;/code&gt; with sudo permission (&lt;code&gt;mousepad&lt;/code&gt; if you&amp;rsquo;re using&amp;nbsp;xubuntu):&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="c1"&gt;# Protip: DON&amp;#39;T use sudo for GUI programs! Use gksudo instead.&lt;/span&gt;
gksudo&lt;span class="w"&gt; &lt;/span&gt;gedit&lt;span class="w"&gt; &lt;/span&gt;/etc/NetworkManager/system-connections/RMIT-WPA
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;This is a &lt;a href="https://bugs.launchpad.net/ubuntu/+source/network-manager/+bug/1104476"&gt;known bug&lt;/a&gt; and
many have complained about it. There seems to be no developer assigned to fix it though. I&amp;rsquo;ll keep
you updated on the&amp;nbsp;issue.&lt;/p&gt;
&lt;h3 id="update-dec-16-2013"&gt;Update (Dec 16, 2013)&lt;a class="headerlink" href="#update-dec-16-2013" title="Permanent link"&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;A fix has been released in &lt;span class="caps"&gt;GNOME&lt;/span&gt; upstream but not incorporated into official Ubuntu repositories
yet. An impatient contributor has created his own &lt;span class="caps"&gt;PPA&lt;/span&gt; to provide the fixed package. To install it,
enter the following&amp;nbsp;commands:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;sudo&lt;span class="w"&gt; &lt;/span&gt;sudo&lt;span class="w"&gt; &lt;/span&gt;add-apt-repository&lt;span class="w"&gt; &lt;/span&gt;ppa:pritambaral/nms
sudo&lt;span class="w"&gt; &lt;/span&gt;apt-get&lt;span class="w"&gt; &lt;/span&gt;update
sudo&lt;span class="w"&gt; &lt;/span&gt;apt-get&lt;span class="w"&gt; &lt;/span&gt;install&lt;span class="w"&gt; &lt;/span&gt;network-manager-gnome
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</content><category term="tutorials"></category><category term="ubuntu"></category><category term="linux"></category></entry><entry><title>Why I use Linux: Automation</title><link href="https://old.hi.imnhan.com/posts/why-i-use-linux-automation/" rel="alternate"></link><published>2013-06-07T08:02:00+07:00</published><updated>2013-06-07T08:02:00+07:00</updated><author><name>Bùi Thành Nhân</name></author><id>tag:old.hi.imnhan.com,2013-06-07:/posts/why-i-use-linux-automation/</id><summary type="html">&lt;p&gt;Repeating is for&amp;nbsp;losers.&lt;/p&gt;</summary><content type="html">&lt;p&gt;(In this post, when I say Linux, I mean any popular &lt;span class="caps"&gt;GNU&lt;/span&gt;/Linux distribution. Hope this clarification
will keep the nitpickers&amp;nbsp;away.)&lt;/p&gt;
&lt;p&gt;First let&amp;rsquo;s discuss &lt;em&gt;why&lt;/em&gt; automation&amp;nbsp;rocks.&lt;/p&gt;
&lt;h2 id="repetition-is-evil-and-boring"&gt;Repetition is evil (and boring)&lt;a class="headerlink" href="#repetition-is-evil-and-boring" title="Permanent link"&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;As a (would-be) software engineer, the &lt;em&gt;repetition is evil&lt;/em&gt; notion has been planted in my head for
far more times than anything else, and for good&amp;nbsp;reasons.&lt;/p&gt;
&lt;p&gt;People are far more prone to error than computers, and doing repetitive tasks creates just too
much room for that. Computers, on the other hand, do everything exactly how you tell them to do,
with extreme speed and&amp;nbsp;accuracy.&lt;/p&gt;
&lt;p&gt;Moreover, let&amp;rsquo;s face it: We developers are all (or at least mostly) lazy. Not the &amp;ldquo;I&amp;rsquo;m don&amp;rsquo;t
wanna do anything&amp;rdquo; kind of lazy, but more of the &amp;ldquo;This crap is boring and not challenging at all,
why the hell am I wasting time for it?&amp;rdquo; type. We&amp;rsquo;ve all got better things to do with our lives,
like re-watching the last episode of &lt;span class="caps"&gt;BBC&lt;/span&gt;&amp;rsquo;s &lt;em&gt;Sherlock&lt;/em&gt; to look for clues to how he faked his death,
or trying to figure out what that &amp;ldquo;Han shot first&amp;rdquo; meme means (sorry, I&amp;rsquo;m from the later&amp;nbsp;generation).&lt;/p&gt;
&lt;h2 id="automation-needs-command-line-tools"&gt;Automation needs command line tools&lt;a class="headerlink" href="#automation-needs-command-line-tools" title="Permanent link"&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Because, of course, &lt;span class="caps"&gt;GUI&lt;/span&gt; programs are (nearly) impossible to interact with in our scripts. Sure
you can try mouse click emulation tools and stuff like that, but is it really worth the effort?
And I&amp;rsquo;d bet anything that those tools are far from reliable (&lt;span class="caps"&gt;GUI&lt;/span&gt; latency,&amp;nbsp;anyone?).&lt;/p&gt;
&lt;p&gt;And this is where Windows falls short. Most (if not all) Windows tools are designed for &lt;span class="caps"&gt;GUI&lt;/span&gt;, and
the whole Windows ecosystem is built around &lt;span class="caps"&gt;GUI&lt;/span&gt;&amp;nbsp;use.&lt;/p&gt;
&lt;p&gt;It&amp;rsquo;s a whole different matter in Linux: from the good old awk, sed, grep, wget to the new shiny
aria2&amp;hellip; Almost anything you can think of is available as a command line&amp;nbsp;tool.&lt;/p&gt;
&lt;h2 id="putting-them-all-together"&gt;Putting them all together&lt;a class="headerlink" href="#putting-them-all-together" title="Permanent link"&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Just like any &lt;span class="caps"&gt;UNIX&lt;/span&gt;-like system, Linux tools utilize the One True Phylosophy: Do only 1 thing, and
do it well. (okay, I&amp;rsquo;m paraphrasing a bit, but you get the&amp;nbsp;idea)&lt;/p&gt;
&lt;p&gt;The true power of command line tools is when they are used together. Let&amp;rsquo;s take a look at a
&lt;a href="https://gist.github.com/nhanb/5726342"&gt;python script&lt;/a&gt; I wrote last night to download the whole
beginner course from &lt;a href="http://www.justinguitar.com"&gt;justinguitar&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;The real flow starts from line&amp;nbsp;48:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="c1"&gt;# Fetch index pages which has links to all beginner lessons&lt;/span&gt;
&lt;span class="n"&gt;r&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;requests&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;http://www.justinguitar.com/en/BC-000-BeginnersCourse.php&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;start_page&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;r&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;text&lt;/span&gt;

&lt;span class="c1"&gt;# Search for all links to lessons&lt;/span&gt;
&lt;span class="n"&gt;pat&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;re&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;compile&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&amp;lt;a href=&amp;quot;(BC-[0-9]&lt;/span&gt;&lt;span class="si"&gt;{3}&lt;/span&gt;&lt;span class="s1"&gt;-.+?)&amp;quot;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;pages&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;pat&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;findall&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;start_page&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c1"&gt;# Fetch html for each lesson&lt;/span&gt;
&lt;span class="n"&gt;pages_html&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;fetch_html&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;pages&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c1"&gt;# Crawl each lesson page, pull out lesson names and youtube link code&lt;/span&gt;
&lt;span class="n"&gt;youtube_codes&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;
&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;html&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;pages_html&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;code&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;parse_info&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;html&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="nb"&gt;print&lt;/span&gt; &lt;span class="n"&gt;code&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;code&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;youtube_codes&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;youtube_codes&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;code&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;To summarize, this snippet goes to justinguitar&amp;rsquo;s beginner course index page, grab all links to
each lesson, then grab the lesson title as well as the youtube video code to its video. The
result is the list name &lt;code&gt;youtube_codes&lt;/code&gt;; each element is a tuple with the format
&lt;code&gt;(title, youtube_code)&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Then I use a command line tool called &lt;code&gt;youtube-dl&lt;/code&gt; to fetch the direct link to each video. The
tool itself can download the video too, but it doesn&amp;rsquo;t support multiple connections to
accelerate the download. This is where &lt;code&gt;aria2c&lt;/code&gt; jumps in: it takes the direct link from
&lt;code&gt;youtube-dl&lt;/code&gt; then download the whole&amp;nbsp;thing:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="c1"&gt;# Leech the hell out of them&lt;/span&gt;
&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;lesson&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;youtube_codes&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;

    &lt;span class="c1"&gt;# Ignore if lesson has no video&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;lesson&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="kc"&gt;None&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;call&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;touch&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;lesson&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]])&lt;/span&gt;
        &lt;span class="k"&gt;continue&lt;/span&gt;

    &lt;span class="c1"&gt;# Use youtube-dl to get fresh download link and file extension&lt;/span&gt;
    &lt;span class="n"&gt;command&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;youtube-dl &amp;#39;&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;lesson&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt;\
            &lt;span class="s1"&gt;&amp;#39; --skip-download --get-url --get-filename -f 35/34/82/44/43/100&amp;#39;&lt;/span&gt;

    &lt;span class="n"&gt;shell_output&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;check_output&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;command&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;split&lt;/span&gt;&lt;span class="p"&gt;()))&lt;/span&gt;
    &lt;span class="n"&gt;direct_link&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;fname&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;shell_output&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;splitlines&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="n"&gt;file_ext&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;fname&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;fname&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;rfind&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;.&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;):]&lt;/span&gt;
    &lt;span class="n"&gt;file_name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;lesson&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;file_ext&lt;/span&gt;

    &lt;span class="c1"&gt;# Then aria2 for serious multi-part download acceleration&lt;/span&gt;
    &lt;span class="nb"&gt;print&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;Downloading &amp;#39;&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;file_name&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;...&amp;#39;&lt;/span&gt;
    &lt;span class="n"&gt;command&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;aria2c&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;-o&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;file_name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;-x2&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="n"&gt;direct_link&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
    &lt;span class="n"&gt;shell_output&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;check_output&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;command&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="nb"&gt;print&lt;/span&gt; &lt;span class="n"&gt;shell_output&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;That&amp;rsquo;s it! I just needed to launch this script, turn off the laptop screen and go to bed. This
morning I woke up seeing the whole course with almost 100 lessons downloaded. Imagine having to
manually download all that by clicking each link&amp;hellip; You don&amp;rsquo;t wanna go there, do&amp;nbsp;you?&lt;/p&gt;
&lt;p&gt;So that&amp;rsquo;s just a very simple example of what automation helps your every day life. Of course its
true power is unleashed when used in development; this is how one-click test and deployment
works. Windows can do this too, but your choice of tool will be limited. And don&amp;rsquo;t get me started
on its lack of a decent package&amp;nbsp;manager!&lt;/p&gt;
&lt;p&gt;To make a long story short, do yourself a favor and install a Linux&amp;nbsp;distro.&lt;/p&gt;
&lt;p&gt;&amp;hellip; or buy a&amp;nbsp;Mac.&lt;/p&gt;</content><category term="tutorials"></category><category term="python"></category><category term="linux"></category></entry><entry><title>Modern vim plugin management: Pathogen vs Vundle</title><link href="https://old.hi.imnhan.com/posts/modern-vim-plugin-management-pathogen-vs-vundle/" rel="alternate"></link><published>2013-05-13T12:00:00+07:00</published><updated>2013-05-13T12:00:00+07:00</updated><author><name>Bùi Thành Nhân</name></author><id>tag:old.hi.imnhan.com,2013-05-13:/posts/modern-vim-plugin-management-pathogen-vs-vundle/</id><summary type="html">&lt;p&gt;Pimp your vim with little&amp;nbsp;effort.&lt;/p&gt;</summary><content type="html">&lt;p&gt;For the impatient ones: Vundle is better than pathogen, use&amp;nbsp;it.&lt;/p&gt;
&lt;p&gt;This post will explain how vim plugins work and how to easily manage your plugins with
third-party tools: Pathogen or Vundle. I assume you are using a Linux distro and have git
already installed. If not, consult Dr. Google for more&amp;nbsp;details.&lt;/p&gt;
&lt;h2 id="vim-plugins-anatomy"&gt;Vim plugins anatomy&lt;a class="headerlink" href="#vim-plugins-anatomy" title="Permanent link"&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;A vim plugin is simply a set of files that alter vim&amp;rsquo;s behavior or add new functionalities to it.
To make this possible, by default vim looks for files in your home folder (which is 
&lt;code&gt;/home/username&lt;/code&gt; or &lt;code&gt;~&lt;/code&gt;):&lt;/p&gt;
&lt;h2 id="vimrc-file"&gt;~/.vimrc (file)&lt;a class="headerlink" href="#vimrc-file" title="Permanent link"&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;This is where you put your personalizations to vim: indentations, keybindings, etc. This post
will not discuss in detail how you do your customizations. For now just know that it&amp;rsquo;s&amp;nbsp;there.&lt;/p&gt;
&lt;p&gt;You will probably want to move this file into your ~/.vim folder to be able to manage everything
inside 1 folder. I will create &lt;code&gt;~/.vim/vimrc&lt;/code&gt; then create a symlink pointing to it. Open a
terminal and&amp;nbsp;type:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;ln&lt;span class="w"&gt; &lt;/span&gt;-s&lt;span class="w"&gt; &lt;/span&gt;~/.vim/vimrc&lt;span class="w"&gt; &lt;/span&gt;~/.vimrc
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h2 id="vim-directory"&gt;~/.vim (directory)&lt;a class="headerlink" href="#vim-directory" title="Permanent link"&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;This should contain a bunch of subdirectories. Some&amp;nbsp;examples:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;autoload&lt;/li&gt;
&lt;li&gt;ftplugin&lt;/li&gt;
&lt;li&gt;colors&lt;/li&gt;
&lt;li&gt;syntax&lt;/li&gt;
&lt;li&gt;doc&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Each of these directories serves a particular purpose: &lt;code&gt;colors&lt;/code&gt; contains colorschemes, &lt;code&gt;syntax&lt;/code&gt;
lets you add new rules for syntax highlighting, &lt;code&gt;doc&lt;/code&gt; contains documentation&amp;hellip;&lt;br&gt;
A plugin will typically put its files into more than one directory here. For example, here is
a plugin called &lt;a href="https://github.com/majutsushi/tagbar"&gt;tagbar&lt;/a&gt;, and I&amp;rsquo;ve installed it by
copying its content into my &lt;code&gt;~/.vim&lt;/code&gt; folder:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;~/.vim
├──&lt;span class="w"&gt; &lt;/span&gt;autoload
│&lt;span class="w"&gt;   &lt;/span&gt;└──&lt;span class="w"&gt; &lt;/span&gt;tagbar.vim
├──&lt;span class="w"&gt; &lt;/span&gt;doc
│&lt;span class="w"&gt;   &lt;/span&gt;├──&lt;span class="w"&gt; &lt;/span&gt;tagbar.txt
│&lt;span class="w"&gt;   &lt;/span&gt;└──&lt;span class="w"&gt; &lt;/span&gt;tags
├──&lt;span class="w"&gt; &lt;/span&gt;plugin
│&lt;span class="w"&gt;   &lt;/span&gt;└──&lt;span class="w"&gt; &lt;/span&gt;tagbar.vim
├──&lt;span class="w"&gt; &lt;/span&gt;README
└──&lt;span class="w"&gt; &lt;/span&gt;syntax
&lt;span class="w"&gt;    &lt;/span&gt;└──&lt;span class="w"&gt; &lt;/span&gt;tagbar.vim
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Everything looks good. Just copy and paste the whole thing, nice and simple. How about adding a
decent colorscheme? Let&amp;rsquo;s install &lt;a href="https://github.com/altercation/vim-colors-solarized"&gt;solarized&lt;/a&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;├──&lt;span class="w"&gt; &lt;/span&gt;autoload
│&lt;span class="w"&gt;   &lt;/span&gt;└──&lt;span class="w"&gt; &lt;/span&gt;togglebg.vim
├──&lt;span class="w"&gt; &lt;/span&gt;bitmaps
│&lt;span class="w"&gt;   &lt;/span&gt;└──&lt;span class="w"&gt; &lt;/span&gt;togglebg.png
├──&lt;span class="w"&gt; &lt;/span&gt;colors
│&lt;span class="w"&gt;   &lt;/span&gt;└──&lt;span class="w"&gt; &lt;/span&gt;solarized.vim
├──&lt;span class="w"&gt; &lt;/span&gt;doc
│&lt;span class="w"&gt;   &lt;/span&gt;├──&lt;span class="w"&gt; &lt;/span&gt;solarized.txt
│&lt;span class="w"&gt;   &lt;/span&gt;└──&lt;span class="w"&gt; &lt;/span&gt;tags
└──&lt;span class="w"&gt; &lt;/span&gt;README.mkd
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Wait, &lt;code&gt;doc/tags&lt;/code&gt; is already there. Ok, no problem! Let&amp;rsquo;s just copy the content of solarized&amp;rsquo;s
tags file and paste it into the existing one. Now we&amp;nbsp;have:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;~/.vim
├──&lt;span class="w"&gt; &lt;/span&gt;autoload
│&lt;span class="w"&gt;   &lt;/span&gt;├──&lt;span class="w"&gt; &lt;/span&gt;tagbar.vim
│&lt;span class="w"&gt;   &lt;/span&gt;└──&lt;span class="w"&gt; &lt;/span&gt;togglebg.vim
├──&lt;span class="w"&gt; &lt;/span&gt;bitmaps
│&lt;span class="w"&gt;   &lt;/span&gt;└──&lt;span class="w"&gt; &lt;/span&gt;togglebg.png
├──&lt;span class="w"&gt; &lt;/span&gt;colors
│&lt;span class="w"&gt;   &lt;/span&gt;└──&lt;span class="w"&gt; &lt;/span&gt;solarized.vim
├──&lt;span class="w"&gt; &lt;/span&gt;doc
│&lt;span class="w"&gt;   &lt;/span&gt;├──&lt;span class="w"&gt; &lt;/span&gt;solarized.txt
│&lt;span class="w"&gt;   &lt;/span&gt;├──&lt;span class="w"&gt; &lt;/span&gt;tagbar.txt
│&lt;span class="w"&gt;   &lt;/span&gt;└──&lt;span class="w"&gt; &lt;/span&gt;tags
├──&lt;span class="w"&gt; &lt;/span&gt;plugin
│&lt;span class="w"&gt;   &lt;/span&gt;└──&lt;span class="w"&gt; &lt;/span&gt;tagbar.vim
├──&lt;span class="w"&gt; &lt;/span&gt;README
├──&lt;span class="w"&gt; &lt;/span&gt;README.mkd
└──&lt;span class="w"&gt; &lt;/span&gt;syntax
&lt;span class="w"&gt;    &lt;/span&gt;└──&lt;span class="w"&gt; &lt;/span&gt;tagbar.vim
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Now what if you you decide that solarized sucks and want to get rid of it? Good luck finding
which file belongs to which plugin. Oh, don&amp;rsquo;t forget the merged &lt;code&gt;doc/tags&lt;/code&gt; file!
Now imagine you have 20-30 plugins installed (which is normal, by the way). It&amp;rsquo;s not a
pretty sight now, is&amp;nbsp;it?&lt;/p&gt;
&lt;h2 id="pathogen-to-the-rescue"&gt;Pathogen to the rescue!&lt;a class="headerlink" href="#pathogen-to-the-rescue" title="Permanent link"&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;The legendary Tim Pope came up with a genius solution:
&lt;a href="https://github.com/tpope/vim-pathogen"&gt;pathogen&lt;/a&gt;.
Now let&amp;rsquo;s install it like any regular plugin (I&amp;rsquo;ve omitted the &lt;span class="caps"&gt;README&lt;/span&gt;):&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;~/.vim
└──&lt;span class="w"&gt; &lt;/span&gt;autoload
&lt;span class="w"&gt;    &lt;/span&gt;└──&lt;span class="w"&gt; &lt;/span&gt;pathogen.vim
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Put this at the beginning of your &lt;code&gt;~/.vimrc&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;execute pathogen#infect&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Create this directory: &lt;code&gt;~/.vim/bundle&lt;/code&gt;. To install tagbar and solarized, just create their own
directories&amp;nbsp;here:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;path
├──&lt;span class="w"&gt; &lt;/span&gt;autoload
│&lt;span class="w"&gt;   &lt;/span&gt;└──&lt;span class="w"&gt; &lt;/span&gt;pathogen.vim
└──&lt;span class="w"&gt; &lt;/span&gt;bundle
&lt;span class="w"&gt;    &lt;/span&gt;├──&lt;span class="w"&gt; &lt;/span&gt;tagbar
&lt;span class="w"&gt;    &lt;/span&gt;│&lt;span class="w"&gt;   &lt;/span&gt;├──&lt;span class="w"&gt; &lt;/span&gt;autoload
&lt;span class="w"&gt;    &lt;/span&gt;│&lt;span class="w"&gt;   &lt;/span&gt;│&lt;span class="w"&gt;   &lt;/span&gt;└──&lt;span class="w"&gt; &lt;/span&gt;tagbar.vim
&lt;span class="w"&gt;    &lt;/span&gt;│&lt;span class="w"&gt;   &lt;/span&gt;├──&lt;span class="w"&gt; &lt;/span&gt;doc
&lt;span class="w"&gt;    &lt;/span&gt;│&lt;span class="w"&gt;   &lt;/span&gt;│&lt;span class="w"&gt;   &lt;/span&gt;├──&lt;span class="w"&gt; &lt;/span&gt;tagbar.txt
&lt;span class="w"&gt;    &lt;/span&gt;│&lt;span class="w"&gt;   &lt;/span&gt;│&lt;span class="w"&gt;   &lt;/span&gt;└──&lt;span class="w"&gt; &lt;/span&gt;tags
&lt;span class="w"&gt;    &lt;/span&gt;│&lt;span class="w"&gt;   &lt;/span&gt;├──&lt;span class="w"&gt; &lt;/span&gt;plugin
&lt;span class="w"&gt;    &lt;/span&gt;│&lt;span class="w"&gt;   &lt;/span&gt;│&lt;span class="w"&gt;   &lt;/span&gt;└──&lt;span class="w"&gt; &lt;/span&gt;tagbar.vim
&lt;span class="w"&gt;    &lt;/span&gt;│&lt;span class="w"&gt;   &lt;/span&gt;├──&lt;span class="w"&gt; &lt;/span&gt;README
&lt;span class="w"&gt;    &lt;/span&gt;│&lt;span class="w"&gt;   &lt;/span&gt;└──&lt;span class="w"&gt; &lt;/span&gt;syntax
&lt;span class="w"&gt;    &lt;/span&gt;│&lt;span class="w"&gt;       &lt;/span&gt;└──&lt;span class="w"&gt; &lt;/span&gt;tagbar.vim
&lt;span class="w"&gt;    &lt;/span&gt;└──&lt;span class="w"&gt; &lt;/span&gt;vim-colors-solarized
&lt;span class="w"&gt;        &lt;/span&gt;├──&lt;span class="w"&gt; &lt;/span&gt;autoload
&lt;span class="w"&gt;        &lt;/span&gt;│&lt;span class="w"&gt;   &lt;/span&gt;└──&lt;span class="w"&gt; &lt;/span&gt;togglebg.vim
&lt;span class="w"&gt;        &lt;/span&gt;├──&lt;span class="w"&gt; &lt;/span&gt;bitmaps
&lt;span class="w"&gt;        &lt;/span&gt;│&lt;span class="w"&gt;   &lt;/span&gt;└──&lt;span class="w"&gt; &lt;/span&gt;togglebg.png
&lt;span class="w"&gt;        &lt;/span&gt;├──&lt;span class="w"&gt; &lt;/span&gt;colors
&lt;span class="w"&gt;        &lt;/span&gt;│&lt;span class="w"&gt;   &lt;/span&gt;└──&lt;span class="w"&gt; &lt;/span&gt;solarized.vim
&lt;span class="w"&gt;        &lt;/span&gt;├──&lt;span class="w"&gt; &lt;/span&gt;doc
&lt;span class="w"&gt;        &lt;/span&gt;│&lt;span class="w"&gt;   &lt;/span&gt;├──&lt;span class="w"&gt; &lt;/span&gt;solarized.txt
&lt;span class="w"&gt;        &lt;/span&gt;│&lt;span class="w"&gt;   &lt;/span&gt;└──&lt;span class="w"&gt; &lt;/span&gt;tags
&lt;span class="w"&gt;        &lt;/span&gt;└──&lt;span class="w"&gt; &lt;/span&gt;README.mkd
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;What Pathogen does is that it adds every directory inside &lt;code&gt;bundle&lt;/code&gt; into vim&amp;rsquo;s &amp;ldquo;runtimepath&amp;rdquo;.
It means that each folder here can be considered a new &lt;code&gt;.vim&lt;/code&gt; folder where vim looks for
appropriate configuration files. The plugins are now isolated so removing or updating them
becomes trivial: just remove or update its own&amp;nbsp;directory.&lt;/p&gt;
&lt;h2 id="pathogen-git"&gt;Pathogen + Git&lt;a class="headerlink" href="#pathogen-git" title="Permanent link"&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Everything goes to the cloud these days, and certainly your vim setup should as well. If you
haven&amp;rsquo;t created a &lt;a href="https://github.com"&gt;Github&lt;/a&gt; account, do it now. Create an empty repository
with any name you want (mine is &lt;code&gt;.vim&lt;/code&gt;). Don&amp;rsquo;t commit yet. Create a file: &lt;code&gt;~/.vim/.gitignore&lt;/code&gt;,
add these lines to its&amp;nbsp;content:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;bundle/
.netrwhist
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;.netrwhist is a local file generated by vim that is better off ignored. We also ignore bundle
directory because the plugins will be included as git submodules (google &lt;em&gt;git submodule&lt;/em&gt;
for details). Remember to delete everything inside &lt;code&gt;bundle/&lt;/code&gt;, because we will install the
plugins again with&amp;nbsp;git.&lt;/p&gt;
&lt;p&gt;Git init, commit and push to your github repo: (on the &lt;em&gt;git remote add&amp;hellip;&lt;/em&gt; line, replace &lt;code&gt;nhanb&lt;/code&gt;
with your github username, &lt;code&gt;.vim&lt;/code&gt; with your repo&amp;nbsp;name)&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="nb"&gt;cd&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;~/.vim
git&lt;span class="w"&gt; &lt;/span&gt;init
git&lt;span class="w"&gt; &lt;/span&gt;add&lt;span class="w"&gt; &lt;/span&gt;.
git&lt;span class="w"&gt; &lt;/span&gt;commit&lt;span class="w"&gt; &lt;/span&gt;-m&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;init&amp;#39;&lt;/span&gt;

git&lt;span class="w"&gt; &lt;/span&gt;remote&lt;span class="w"&gt; &lt;/span&gt;add&lt;span class="w"&gt; &lt;/span&gt;origin&lt;span class="w"&gt; &lt;/span&gt;https://github.com/nhanb/.vim.git
git&lt;span class="w"&gt; &lt;/span&gt;push&lt;span class="w"&gt; &lt;/span&gt;-u&lt;span class="w"&gt; &lt;/span&gt;origin&lt;span class="w"&gt; &lt;/span&gt;master
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Everytime you edit anything in your .vim directory, remember to commit the changes and push to&amp;nbsp;github:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;git&lt;span class="w"&gt; &lt;/span&gt;add&lt;span class="w"&gt; &lt;/span&gt;.&lt;span class="w"&gt; &lt;/span&gt;
git&lt;span class="w"&gt; &lt;/span&gt;commit&lt;span class="w"&gt; &lt;/span&gt;-m&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;some message here&amp;#39;&lt;/span&gt;
git&lt;span class="w"&gt; &lt;/span&gt;push
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;If you want to install a plugin, see if it has a git repo (9 out of 10 times it has a
github repo). Find its git url and add to your .vim as a&amp;nbsp;submodule:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="nb"&gt;cd&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;~/.vim
git&lt;span class="w"&gt; &lt;/span&gt;add&lt;span class="w"&gt; &lt;/span&gt;submodule&lt;span class="w"&gt; &lt;/span&gt;https://github.com/majutsushi/tagbar.git&lt;span class="w"&gt; &lt;/span&gt;bundle/tagbar
git&lt;span class="w"&gt; &lt;/span&gt;add&lt;span class="w"&gt; &lt;/span&gt;submodule&lt;span class="w"&gt; &lt;/span&gt;https://github.com/altercation/vim-colors-solarized.git&lt;span class="w"&gt; &lt;/span&gt;bundle/solarized
git&lt;span class="w"&gt; &lt;/span&gt;submodule&lt;span class="w"&gt; &lt;/span&gt;update&lt;span class="w"&gt; &lt;/span&gt;--init
git&lt;span class="w"&gt; &lt;/span&gt;submodule&lt;span class="w"&gt; &lt;/span&gt;foreach&lt;span class="w"&gt; &lt;/span&gt;git&lt;span class="w"&gt; &lt;/span&gt;pull&lt;span class="w"&gt; &lt;/span&gt;origin&lt;span class="w"&gt; &lt;/span&gt;master
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;When you need to update your plugins, just run the last line to make git pull updates for all&amp;nbsp;plugins. &lt;/p&gt;
&lt;p&gt;Here&amp;rsquo;s the awesome part: when you&amp;rsquo;re using a whole new computer and want to get all your vim settings
from the cloud, simply clone your github repo, make a symlink for .vimrc and pull all&amp;nbsp;plugins:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="nb"&gt;cd&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;~
git&lt;span class="w"&gt; &lt;/span&gt;clone&lt;span class="w"&gt; &lt;/span&gt;https://github.com/nhanb/.vim.git&lt;span class="w"&gt; &lt;/span&gt;.vim
ln&lt;span class="w"&gt; &lt;/span&gt;-s&lt;span class="w"&gt; &lt;/span&gt;~/.vim/vimrc&lt;span class="w"&gt; &lt;/span&gt;~/.vimrc
&lt;span class="nb"&gt;cd&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;.vim
git&lt;span class="w"&gt; &lt;/span&gt;submodule&lt;span class="w"&gt; &lt;/span&gt;update&lt;span class="w"&gt; &lt;/span&gt;--init&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;git&lt;span class="w"&gt; &lt;/span&gt;submodule&lt;span class="w"&gt; &lt;/span&gt;foreach&lt;span class="w"&gt; &lt;/span&gt;git&lt;span class="w"&gt; &lt;/span&gt;pull&lt;span class="w"&gt; &lt;/span&gt;origin&lt;span class="w"&gt; &lt;/span&gt;master
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Now you must be really excited, no? Git does everything for you: upload/download, add plugins,
update plugins &lt;em&gt;and&lt;/em&gt; remove plugins&amp;hellip; There must be some simple git command to remove a
submodule,&amp;nbsp;right?&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;span class="caps"&gt;NO&lt;/span&gt;&lt;/strong&gt;. Sadly, no. To remove a git submodule, you&amp;rsquo;ll need to manually edit 2 git files and
remove the folder by hand. See
&lt;a href="http://stackoverflow.com/questions/1260748/how-do-i-remove-a-git-submodule"&gt;this Stackoverflow question&lt;/a&gt;
for detailed&amp;nbsp;instructions.&lt;/p&gt;
&lt;h2 id="vundle-the-new-cool-kid"&gt;Vundle, the new cool kid&lt;a class="headerlink" href="#vundle-the-new-cool-kid" title="Permanent link"&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;This time let&amp;rsquo;s start fresh: remove all submodules and pathogen. Your bundle folder should be
now empty. Clone &lt;a href="https://github.com/gmarik/vundle"&gt;Vundle&lt;/a&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;git&lt;span class="w"&gt; &lt;/span&gt;clone&lt;span class="w"&gt; &lt;/span&gt;https://github.com/gmarik/vundle.git&lt;span class="w"&gt; &lt;/span&gt;~/.vim/bundle/vundle
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Put this in your .vimrc (preferably at the&amp;nbsp;beginning):&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="k"&gt;set&lt;/span&gt; &lt;span class="nb"&gt;nocompatible&lt;/span&gt;               &lt;span class="c"&gt;&amp;quot; be iMproved&lt;/span&gt;
&lt;span class="k"&gt;filetype&lt;/span&gt; off                   &lt;span class="c"&gt;&amp;quot; required!&lt;/span&gt;

&lt;span class="k"&gt;set&lt;/span&gt; &lt;span class="nb"&gt;rtp&lt;/span&gt;&lt;span class="p"&gt;+=~&lt;/span&gt;&lt;span class="sr"&gt;/.vim/&lt;/span&gt;bundle&lt;span class="sr"&gt;/vundle/&lt;/span&gt;
&lt;span class="k"&gt;call&lt;/span&gt; vundle#rc&lt;span class="p"&gt;()&lt;/span&gt;

&lt;span class="c"&gt;&amp;quot; let Vundle manage Vundle&lt;/span&gt;
&lt;span class="c"&gt;&amp;quot; required! &lt;/span&gt;
Bundle &lt;span class="s1"&gt;&amp;#39;gmarik/vundle&amp;#39;&lt;/span&gt;

&lt;span class="c"&gt;&amp;quot; My Bundles here:&lt;/span&gt;
&lt;span class="c"&gt;&amp;quot;&lt;/span&gt;
&lt;span class="c"&gt;&amp;quot; original repos on github&lt;/span&gt;
Bundle &lt;span class="s1"&gt;&amp;#39;majutsushi/tagbar&amp;#39;&lt;/span&gt;
Bundle &lt;span class="s1"&gt;&amp;#39;altercation/vim-colors-solarized&amp;#39;&lt;/span&gt;

&lt;span class="c"&gt;&amp;quot; Github repos of the user &amp;#39;vim-scripts&amp;#39;&lt;/span&gt;
&lt;span class="c"&gt;&amp;quot; =&amp;gt; can omit the username part&lt;/span&gt;
Bundle &lt;span class="s1"&gt;&amp;#39;L9&amp;#39;&lt;/span&gt;
Bundle &lt;span class="s1"&gt;&amp;#39;FuzzyFinder&amp;#39;&lt;/span&gt;

&lt;span class="c"&gt;&amp;quot; non github repos&lt;/span&gt;
Bundle &lt;span class="s1"&gt;&amp;#39;git://git.wincent.com/command-t.git&amp;#39;&lt;/span&gt;
&lt;span class="c"&gt;&amp;quot; ...&lt;/span&gt;

&lt;span class="k"&gt;filetype&lt;/span&gt; plugin indent &lt;span class="k"&gt;on&lt;/span&gt;     &lt;span class="c"&gt;&amp;quot; required!&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Relaunch vim, run &lt;code&gt;:BundleInstall&lt;/code&gt; to install the &amp;ldquo;bundles&amp;rdquo; you listed in .vimrc. When you want
to update them, &lt;code&gt;:BundleUpdate&lt;/code&gt;. To remove a plugin, just delete its line in your .vimrc file
then relaunch vim and run &lt;code&gt;:BundleClean&lt;/code&gt; to remove its folder inside&amp;nbsp;~/.vim/bundle/&lt;/p&gt;
&lt;p&gt;Vundle follows Pathogen&amp;rsquo;s approach: putting plugins in their separate directories. However,
it also takes care of the git stuff for us too! Note that by default it uses &lt;code&gt;git clone&lt;/code&gt;, not
&lt;code&gt;git add submodule&lt;/code&gt; to add plugins. If you&amp;rsquo;re using Windows, there&amp;rsquo;s Vundle for Windows too,
though I&amp;rsquo;ve never tried&amp;nbsp;it.&lt;/p&gt;
&lt;p&gt;That&amp;rsquo;s it, happy coding! Feel free to leave your comments if there&amp;rsquo;s anything wrong/unclear&amp;nbsp;here.&lt;/p&gt;</content><category term="tutorials"></category><category term="vim"></category></entry></feed>